
Moon Force.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00803800  00002ea8  00002f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dc0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0000adc0  00002dc0  00002e74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000062f  00803812  00803812  00002f6e  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00002f6e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fa0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000062b1  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002066  00000000  00000000  00009479  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e1f  00000000  00000000  0000b4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005bc  00000000  00000000  0000d300  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ccb  00000000  00000000  0000d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001999  00000000  00000000  0000f587  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f8  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__ctors_end>
       4:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
       8:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
       c:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <__vector_3>
      10:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      14:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      18:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      1c:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__vector_7>
      20:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      24:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      28:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      2c:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      30:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      34:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__vector_13>
      38:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      3c:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      40:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      44:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      48:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      4c:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      50:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      54:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      58:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      5c:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      60:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      64:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      68:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      6c:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      70:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      74:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>
      78:	0c 94 88 04 	jmp	0x910	; 0x910 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	10 18       	sub	r1, r0
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	00 00       	nop
      84:	e0 f8       	bld	r14, 0
      86:	e0 00       	.word	0x00e0	; ????
	...
      90:	c0 0c       	add	r12, r0
      92:	fc f0       	brlt	.+62     	; 0xd2 <__trampolines_end+0x56>
      94:	ff ff       	.word	0xffff	; ????
      96:	ff e0       	ldi	r31, 0x0F	; 15
      98:	e0 e8       	ldi	r30, 0x80	; 128
      9a:	18 00       	.word	0x0018	; ????
      9c:	00 80       	ld	r0, Z
      9e:	70 70       	andi	r23, 0x00	; 0
      a0:	f1 ff       	sbrs	r31, 1
      a2:	ff ff       	.word	0xffff	; ????
      a4:	ff ff       	.word	0xffff	; ????
      a6:	7f ff       	.word	0xff7f	; ????
      a8:	ff 7f       	andi	r31, 0xFF	; 255
      aa:	fe ef       	ldi	r31, 0xFE	; 254
      ac:	e3 40       	sbci	r30, 0x03	; 3
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	00 00       	nop
      b4:	00 d0       	rcall	.+0      	; 0xb6 <__trampolines_end+0x3a>
	...
      be:	00 00       	nop
      c0:	80 04       	cpc	r8, r0
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	80 ff       	sbrs	r24, 0
      c6:	e0 80       	ld	r14, Z
      c8:	c0 60       	ori	r28, 0x00	; 0
      ca:	08 00       	.word	0x0008	; ????
      cc:	00 80       	ld	r0, Z
      ce:	20 20       	and	r2, r0
      d0:	a0 52       	subi	r26, 0x20	; 32
      d2:	74 7d       	andi	r23, 0xD4	; 212
      d4:	ff 37       	cpi	r31, 0x7F	; 127
      d6:	3f 7d       	andi	r19, 0xDF	; 223
      d8:	bf 3e       	cpi	r27, 0xEF	; 239
      da:	6c 42       	sbci	r22, 0x2C	; 44
      dc:	40 00       	.word	0x0040	; ????
      de:	00 40       	sbci	r16, 0x00	; 0
      e0:	c0 84       	ldd	r12, Z+8	; 0x08
      e2:	7c f8       	.word	0xf87c	; ????
      e4:	c0 fe       	sbrs	r12, 0
      e6:	fe f0       	brts	.+62     	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
      e8:	7e 8e       	std	Y+30, r7	; 0x1e
      ea:	f8 fe       	.word	0xfef8	; ????
      ec:	06 00       	.word	0x0006	; ????
      ee:	00 10       	cpse	r0, r0
      f0:	71 ff       	sbrs	r23, 1
      f2:	9e ff       	.word	0xff9e	; ????
      f4:	ff ff       	.word	0xffff	; ????
      f6:	ff fc       	.word	0xfcff	; ????
      f8:	fc cf       	rjmp	.-8      	; 0xf2 <__trampolines_end+0x76>
      fa:	f7 3c       	cpi	r31, 0xC7	; 199
      fc:	0e 02       	muls	r16, r30
      fe:	00 0c       	add	r0, r0
     100:	38 71       	andi	r19, 0x18	; 24
     102:	7f 7f       	andi	r23, 0xFF	; 255
     104:	ff 03       	fmulsu	r23, r23
     106:	07 03       	mulsu	r16, r23
     108:	ff ff       	.word	0xffff	; ????
     10a:	13 08       	sbc	r1, r3
     10c:	04 04       	cpc	r0, r4
     10e:	00 40       	sbci	r16, 0x00	; 0
     110:	80 04       	cpc	r8, r0
     112:	78 c0       	rjmp	.+240    	; 0x204 <evilBomb+0x6>
     114:	00 7e       	andi	r16, 0xE0	; 224
     116:	80 00       	.word	0x0080	; ????
     118:	70 0e       	add	r7, r16
     11a:	80 f8       	bld	r8, 0
     11c:	06 00       	.word	0x0006	; ????
     11e:	00 10       	cpse	r0, r0
     120:	61 9e       	mul	r6, r17
     122:	00 93 e0 7c 	sts	0x7CE0, r16	; 0x807ce0 <__bss_end+0x3e9f>
     126:	ef fc       	.word	0xfcef	; ????
     128:	c0 08       	sbc	r12, r0
     12a:	c7 30       	cpi	r28, 0x07	; 7
     12c:	0c 02       	muls	r16, r28
     12e:	00 08       	sbc	r0, r0
     130:	30 01       	movw	r6, r0
     132:	06 77       	andi	r16, 0x76	; 118
     134:	00 00       	nop
     136:	03 00       	.word	0x0003	; ????
     138:	01 fe       	sbrs	r0, 1
     13a:	03 08       	sbc	r0, r3
     13c:	00 04       	cpc	r0, r0
     13e:	06 0f       	add	r16, r22
     140:	23 33       	cpi	r18, 0x33	; 51
     142:	ff ee       	ldi	r31, 0xEF	; 239
     144:	06 67       	ori	r16, 0x76	; 118
     146:	83 fb       	bst	r24, 3
     148:	e2 6e       	ori	r30, 0xE2	; 226
     14a:	e7 c3       	rjmp	.+1998   	; 0x91a <rowLoad+0x6>
     14c:	1f 3e       	cpi	r17, 0xEF	; 239
     14e:	00 02       	muls	r16, r16
     150:	33 1b       	sub	r19, r19
     152:	73 c6       	rjmp	.+3302   	; 0xe3a <drawTiles+0x162>
     154:	1c 7c       	andi	r17, 0xCC	; 204
     156:	00 ff       	sbrs	r16, 0
     158:	ff 00       	.word	0x00ff	; ????
     15a:	78 0c       	add	r7, r8
     15c:	86 80       	ldd	r8, Z+6	; 0x06
     15e:	00 04       	cpc	r0, r0
     160:	0c 00       	.word	0x000c	; ????
     162:	00 01       	movw	r0, r0
     164:	06 00       	.word	0x0006	; ????
     166:	00 18       	sub	r0, r0
     168:	01 00       	.word	0x0001	; ????
     16a:	00 00       	nop
     16c:	01 01       	movw	r0, r2
     16e:	06 01       	movw	r0, r12
     170:	21 13       	cpse	r18, r17
     172:	36 e0       	ldi	r19, 0x06	; 6
     174:	02 27       	eor	r16, r18
     176:	03 7b       	andi	r16, 0xB3	; 179
     178:	22 20       	and	r2, r2
     17a:	26 c3       	rjmp	.+1612   	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
     17c:	07 1e       	adc	r0, r23
     17e:	00 02       	muls	r16, r16
     180:	11 09       	sbc	r17, r1
     182:	32 c4       	rjmp	.+2148   	; 0x9e8 <tone+0x26>
     184:	18 00       	.word	0x0018	; ????
     186:	00 00       	nop
     188:	7f 00       	.word	0x007f	; ????
     18a:	38 04       	cpc	r3, r8
     18c:	02 80       	ldd	r0, Z+2	; 0x02
     18e:	00 04       	cpc	r0, r0
     190:	00 00       	nop
     192:	00 00       	nop
     194:	02 00       	.word	0x0002	; ????
     196:	00 08       	sbc	r0, r0
     198:	00 00       	nop
     19a:	00 00       	nop
     19c:	00 00       	nop
     19e:	3c 7f       	andi	r19, 0xFC	; 252
     1a0:	67 e3       	ldi	r22, 0x37	; 55
     1a2:	c0 00       	.word	0x00c0	; ????
     1a4:	04 08       	sbc	r0, r4
     1a6:	20 10       	cpse	r2, r0
     1a8:	41 e1       	ldi	r20, 0x11	; 17
     1aa:	e7 ff       	sbrs	r30, 7
     1ac:	fe 7c       	andi	r31, 0xCE	; 206
     1ae:	00 07       	cpc	r16, r16
     1b0:	0f 0c       	add	r0, r15
     1b2:	08 40       	sbci	r16, 0x08	; 8
     1b4:	82 04       	cpc	r8, r2
     1b6:	00 00       	nop
     1b8:	40 20       	and	r4, r0
     1ba:	09 0f       	add	r16, r25
     1bc:	0e 00       	.word	0x000e	; ????
     1be:	18 18       	sub	r1, r8
	...
     1c8:	30 30       	cpi	r19, 0x00	; 0
     1ca:	00 00       	nop
     1cc:	06 06       	cpc	r0, r22
     1ce:	3c 66       	ori	r19, 0x6C	; 108
     1d0:	43 c1       	rjmp	.+646    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     1d2:	80 00       	.word	0x0080	; ????
     1d4:	04 00       	.word	0x0004	; ????
     1d6:	00 10       	cpse	r0, r0
     1d8:	00 41       	sbci	r16, 0x10	; 16
     1da:	c1 e6       	ldi	r28, 0x61	; 97
     1dc:	7c 18       	sub	r7, r12
     1de:	00 07       	cpc	r16, r16
     1e0:	0c 08       	sbc	r0, r12
     1e2:	00 40       	sbci	r16, 0x00	; 0
     1e4:	02 00       	.word	0x0002	; ????
     1e6:	00 00       	nop
     1e8:	00 20       	and	r0, r0
     1ea:	00 08       	sbc	r0, r0
     1ec:	06 00       	.word	0x0006	; ????
     1ee:	10 00       	.word	0x0010	; ????
	...
     1f8:	00 20       	and	r0, r0
     1fa:	00 00       	nop
     1fc:	00 04       	cpc	r0, r0

000001fe <evilBomb>:
     1fe:	08 08 30 78 fe ff ff ff 7b 31 00 30 68 f6 fd 79     ..0x....{1.0h..y
     20e:	31 00                                               1.

00000210 <evilWave>:
     210:	08 08 0f 3f 78 e6 e6 78 3f 0f 07 08 70 84 84 70     ...?x..x?...p..p
     220:	08 07                                               ..

00000222 <balls>:
     222:	10 10 00 1c 3e 7f 7f 7f fe fc c0 e0 f0 f0 f0 e0     ....>...........
     232:	c0 00 00 00 38 7c fe fe ff 7f 3f 03 07 07 07 03     ....8|....?.....
     242:	01 00 00 00 1c 3a 3e 3e 5c 80 00 c0 e0 a0 e0 c0     .....:>>\.......
     252:	00 00 00 00 00 38 7c 7c 5c 3a 00 01 03 03 03 01     .....8||\:......
	...

00000264 <ufo>:
     264:	10 08 38 7c 7c 7c 7e 7e ff ff ff ff 7e 7e 7c 7c     ..8|||~~....~~||
     274:	7c 38 00 28 28 28 24 20 68 6c 6e 4e 2c 2c 28 28     |8.((($ hlnN,,((
     284:	28 00                                               (.

00000286 <largePit>:
     286:	18 08 01 03 03 07 07 0f 0f 0f 1f 3f 7f ff ff ff     ...........?....
     296:	ff ff ff 3f 1f 0f 07 03 01 01 fe fc fc f8 f8 f0     ...?............
     2a6:	f0 f0 e0 c0 80 00 00 00 00 00 00 c0 e0 f0 f8 fc     ................
     2b6:	fe fe                                               ..

000002b8 <smallPit>:
     2b8:	10 08 01 03 03 07 07 0f 1f 7f ff ff 3f 1f 0f 03     ............?...
     2c8:	01 01 fe fc fc f8 f8 f0 e0 80 00 00 c0 e0 f0 fc     ................
     2d8:	fe fe                                               ..

000002da <largeRock>:
     2da:	10 10 c0 e0 f8 fc fe fe fe fe fe fe fc f8 f0 e0     ................
     2ea:	c0 80 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2fa:	ff ff c0 e0 b8 d4 fa fe fe fe be fa fc d8 b0 e0     ................
     30a:	c0 80 f7 fe ff ff ff ff ff ff ff ff ff ff ff ff     ................
     31a:	fe f7                                               ..

0000031c <smallRock>:
     31c:	08 10 80 e0 fc fe fe fc f8 80 ff ff ff ff ff ff     ................
     32c:	ff ff 80 e0 bc ea fe fc f8 80 fb fe ff ff ff ff     ................
     33c:	f7 ff                                               ..

0000033e <dualShot>:
     33e:	08 08 06 7f ff 7f 7f ff 7f 06 00 06 af 00 00 af     ................
     34e:	06 00                                               ..

00000350 <blaster>:
     350:	10 08 18 00 42 5a 18 5a 5a 5a ff ff ff ff ff 7e     ....BZ.ZZZ.....~
     360:	3c 18 18 00 42 18 00 18 42 18 5a 7e 76 7e 7a 34     <...B...B.Z~v~z4
     370:	18 00 42 42 18 5a 5a 5a 18 7e ff ff ff ff ff 7e     ..BB.ZZZ.~.....~
     380:	3c 18 42 00 00 18 42 18 00 24 7e 6e 7e 7e 5e 2c     <.B...B..$~n~~^,
     390:	18 00                                               ..

00000392 <buggie>:
     392:	18 08 78 f8 f8 f8 ff ff fe fc f8 f8 f8 fe ff ff     ..x.............
     3a2:	ff ff ff ff ff fe fc fc f8 70 00 70 70 70 70 7e     .........p.pppp~
     3b2:	74 78 70 70 70 70 7e 7e 72 72 72 72 72 74 78 78     txpppp~~rrrrrtxx
     3c2:	70 00                                               p.

000003c4 <wheel>:
     3c4:	08 08 00 18 3c 7e 7e 3c 18 00 00 00 18 2c 34 18     ....<~~<.....,4.
	...

000003d6 <tileData>:
     3d6:	fe fe fe fe fe fe fe fe fc fc fc fc fc fc fc fc     ................
     3e6:	f8 f8 f8 f8 f8 f8 f8 f8 13 0b 05 02 00 00 01 03     ................
     3f6:	01 00 04 00 01 01 01 12 02 02 04 04 04 48 08 08     .............H..
     406:	88 90 90 b0 b0 98 98 98 58 4c 2c 26 16 13 03 07     ........XL,&....
     416:	07 03 06 0a 02 02 14 04 44 4c 4c 2c 26 16 13 0b     ........DLL,&...
     426:	09 05 04 04 02 00 00 00 00 00 00 00 02 00 00 00     ................
     436:	09 01 02 06 16 12 12 12 13 13 13 13 13 0b 09 09     ................
     446:	09 09 05 04 04 04 04 02 02 02 02 01 01 01 01 00     ................
     456:	00 00 02 00 00 00 04 00 00 00 80 c0 e0 c0 80 80     ................
     466:	c0 80 80 80 00 00 00 00 80 80 c0 c0 60 30 70 78     ............`0px
     476:	30 30 a0 20 40 40 80 80 80 80 80 c0 c0 c0 c0 c0     00. @@..........
     486:	60 60 60 60 30 30 30 b0 98 58 4c 4c 0c 0e 0e 0c     ````000..XLL....
     496:	08 28 08 08 08 50 10 10 20 20 40 40 40 40 80 80     .(...P..  @@@@..
     4a6:	00 00 40 50 b8 2c 7c fe fe f7 7f ff ff ff ff ff     ..@P.,|.........
     4b6:	fe fe fc fc f8 f0 c0 00 00 01 00 15 02 49 12 0a     .............I..
     4c6:	0a 24 15 15 09 0a 23 0b 8b 0b 23 0a 23 0b 23 0b     .$....#...#.#.#.
	...
     4de:	00 00 00 de de de 00 00 00 1e 1e 00 00 1e 1e 00     ................
     4ee:	00 6c fe fe 6c fe fe 6c 00 48 5c 54 fe 54 74 24     .l..l..l.H\T.Tt$
     4fe:	00 c6 e6 70 38 1c ce c6 00 60 f4 9e ba 6e e4 a0     ...p8....`...n..
     50e:	00 20 18 18 0c 18 18 20 00 00 00 7c fe c6 82 00     . ..... ...|....
     51e:	00 00 82 c6 fe 7c 00 00 10 54 7c 38 38 7c 54 10     .....|...T|88|T.
     52e:	00 18 18 7e 7e 18 18 00 00 00 80 e0 e0 60 00 00     ...~~........`..
     53e:	00 18 18 18 18 18 18 00 00 00 00 e0 e0 e0 00 00     ................
     54e:	00 c0 60 30 18 0c 04 00 00 7c fe fe fe 82 fe 7c     ..`0.....|.....|
     55e:	00 00 0c fc fe fe fe 00 00 c4 e6 f2 de de de cc     ................
     56e:	00 44 d6 92 fe fe fe 7c 00 3e 3e 30 3e fe fe 30     .D.....|.>>0>..0
     57e:	00 5e de da da da fa 72 00 7c fe 8a fa fa fa 72     .^.....r.|.....r
     58e:	00 02 02 f2 fa fe 0e 06 00 6c fe 92 fe fe fe 6c     .........l.....l
     59e:	00 1c be a2 fe fe fe 7c 00 00 00 6c 6c 6c 00 00     .......|...lll..
     5ae:	00 00 80 ec ec 6c 00 00 00 00 10 38 7c fe 00 00     .....l.....8|...
     5be:	00 6c 6c 6c 6c 6c 6c 00 00 00 fe 7c 38 10 00 00     .llllll....|8...
     5ce:	00 0c 06 d2 da de 0e 04 00 7c fe c6 ba aa b6 bc     .........|......
     5de:	00 fc fe 12 fe fe fe fc 00 fe fe fe fe 92 fe 6c     ...............l
     5ee:	00 7c fe fe fe 82 c6 44 00 fe fe fe fe 82 fe 7c     .|.....D.......|
     5fe:	00 fe fe fe fe 92 92 82 00 fe fe fe fe 12 12 02     ................
     60e:	00 7c fe fe fe 82 a6 e4 00 fe fe 10 fe fe fe fe     .|..............
     61e:	00 82 fe fe fe fe 82 00 00 40 c2 82 fe fe 7e 02     .........@....~.
     62e:	00 fe fe fe fe 38 ee c6 00 fe fe fe fe 80 80 80     .....8..........
     63e:	00 fe fe 1e fc 1e fe fe 00 fe fe fe 1c 38 fe fe     .............8..
     64e:	00 7c fe 82 fe fe fe 7c 00 fe fe fe fe 22 3e 1c     .|.....|.....">.
     65e:	00 7c fe a2 fe fe fe 7c 00 fe fe fe fe 22 fe dc     .|.....|....."..
     66e:	00 4c de 9e fe f2 f6 64 00 02 02 fe fe fe 02 02     .L.....d........
     67e:	00 7e fe 80 fe fe fe 7e 00 3e 7e e0 fe fe 7e 3e     .~.....~.>~...~>
     68e:	00 7e fe e0 7c e0 fe 7e 00 c6 ee 7c 38 7c ee c6     .~..|..~...|8|..
     69e:	00 0e 1e fe f8 fe 1e 0e 00 e2 f2 fa fe be 9e 8e     ................
     6ae:	00 10 38 7c 10 10 10 10 00 60 92 64 02 f1 61 91     ..8|.....`.d..a.
     6be:	00 20 30 38 3c 38 30 20 00 10 30 70 f0 70 30 10     . 08<80 ..0p.p0.
     6ce:	00 30 78 fc fc 78 30 00 00 00 00 fc 00 c0 e0 a0     .0x..x0.........
     6de:	fc b8 b8 ff b0 a0 f4 ba a1 a1 a1 a5 ae b4 e0 c0     ................
     6ee:	18 14 34 ff 1e d6 16 1e 1f 17 17 1e 1e fe ff 3c     ..4............<
     6fe:	00 80 e0 d0 d8 fc de d0 f0 e0 80 e0 c0 ff c0 80     ................
     70e:	00 00 fc 00 00 00 38 74 56 de 76 d6 5c 7c 38 00     ......8tV.v.\|8.
     71e:	00 90 f0 90 00 00 00 00 c0 00 00 fe 58 58 5f 7a     ............XX_z
     72e:	5e 5a 5e 7e 7f 7f e0 c0 00 00 06 0f 0f 06 00 00     ^Z^~............
     73e:	00 00 00 7f 7f 40 40 40 40 40 40 7f 7f 40 40 40     .....@@@@@@..@@@
     74e:	40 40 40 7f 7f 00 00 00 80 c0 20 9f 50 51 52 52     @@@....... .PQRR
     75e:	0e 00 00 00 00 00 00 00 00 00 08 1c 14 16 23 c1     ..............#.
     76e:	80 80 fe 01 fc 03 00 00 00 00 00 00 00 03 ff fc     ................
     77e:	c1 22 17 8a 43 22 13 02 83 42 23 33 3a 3f 77 e3     ."..C"...B#3:?w.
     78e:	c0 20 1f 90 48 28 28 08 0c 07 04 07 0c 08 08 08     . ..H((.........
     79e:	18 10 3f e0 c0 80 80 80 ff f0 10 09 c5 23 10 08     ..?..........#..
     7ae:	00 00 00 00 0c 1e f3 e1 80 80 80 80 80 80 80 80     ................
     7be:	18 7e 18 1e da 1a 7c 18 40 40 40 60 60 40 40 40     .~....|.@@@``@@@
     7ce:	0c cf 0c 0f 3d 0d ce 0c 00 00 00 00 00 00 00 80     ....=...........
     7de:	40 80 00 00 00 00 00 00 00 00 00 00 00 80 e0 50     @..............P
     7ee:	a0 c0 80 00 80 00 00 00 00 00 00 e0 38 16 68 28     ............8.h(
     7fe:	50 60 80 00 00 00 00 00 00 00 02 00 00 00 00 00     P`..............
     80e:	00 00 00 00 00 00 80 70 28 d0 e0 c0 80 00 00 00     .......p(.......
     81e:	00 00 00 08 00 00 00 00 00 00 02 00 20 00 00 00     ............ ...
     82e:	00 00 00 00 00 00 80 40 a0 30 38 16 41 22 04 08     .......@.08.A"..
     83e:	70 80 00 80 80 40 a0 40 80 40 b0 08 28 17 4a 3c     p....@.@.@..(.J<
     84e:	9a 34 38 60 c0 00 80 40 01 05 0a 1c 9a 22 11 00     .48`...@....."..
     85e:	00 05 0a 0f 14 08 10 50 28 94 0a 25 01 0d 02 08     .......P(..%....
     86e:	05 01 03 27 06 0d 0e 08 1e 45 1a 0d 10 0a 00 00     ...'.....E......
     87e:	00 01 12 07 85 0a 04 08 10 50 28 94 0a 25 11 1e     .........P(..%..
     88e:	28 70 50 d0 2c 82 43 01 04 02 40 01 0b 16 3c 70     (pP.,.C...@...<p
     89e:	50 d0 28 94 44 22 01 02 0a 14 38 70 50 88 04 08     P.(.D"....8pP...
     8ae:	28 14 44 34 0a 25 02 09 84 00 01 00 00 08 00 00     (.D4.%..........
     8be:	00 00 01 00 02 01 84 03 23 03 04 02 01 00 00 00     ........#.......
     8ce:	00 00 00 01 82 07 06 09                             ........

000008d6 <__ctors_end>:
     8d6:	11 24       	eor	r1, r1
     8d8:	1f be       	out	0x3f, r1	; 63
     8da:	cf ef       	ldi	r28, 0xFF	; 255
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	df e3       	ldi	r29, 0x3F	; 63
     8e0:	de bf       	out	0x3e, r29	; 62

000008e2 <__do_copy_data>:
     8e2:	18 e3       	ldi	r17, 0x38	; 56
     8e4:	a0 e0       	ldi	r26, 0x00	; 0
     8e6:	b8 e3       	ldi	r27, 0x38	; 56
     8e8:	e8 ea       	ldi	r30, 0xA8	; 168
     8ea:	fe e2       	ldi	r31, 0x2E	; 46
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__do_copy_data+0x10>
     8ee:	05 90       	lpm	r0, Z+
     8f0:	0d 92       	st	X+, r0
     8f2:	a2 31       	cpi	r26, 0x12	; 18
     8f4:	b1 07       	cpc	r27, r17
     8f6:	d9 f7       	brne	.-10     	; 0x8ee <__do_copy_data+0xc>

000008f8 <__do_clear_bss>:
     8f8:	2e e3       	ldi	r18, 0x3E	; 62
     8fa:	a2 e1       	ldi	r26, 0x12	; 18
     8fc:	b8 e3       	ldi	r27, 0x38	; 56
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <.do_clear_bss_start>

00000900 <.do_clear_bss_loop>:
     900:	1d 92       	st	X+, r1

00000902 <.do_clear_bss_start>:
     902:	a1 34       	cpi	r26, 0x41	; 65
     904:	b2 07       	cpc	r27, r18
     906:	e1 f7       	brne	.-8      	; 0x900 <.do_clear_bss_loop>
     908:	0e 94 42 16 	call	0x2c84	; 0x2c84 <main>
     90c:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <_exit>

00000910 <__bad_interrupt>:
     910:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000914 <rowLoad>:
	seed = ADC1.RES;				//Get seed value from ADC1
	PORTC_PIN0CTRL = 0x88;			//Restore UP button function
	
}

void rowLoad(const char *tileData, uint8_t *rowRAM, uint8_t clear) {		//Loads a row of 16 tiles directly into the OLED. Useful for status screens/pause displays without destroying the main buffer
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	dc 01       	movw	r26, r24
     91a:	84 2f       	mov	r24, r20
	
	for (int col = 0 ; col < 16 ; col++) {
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	50 e0       	ldi	r21, 0x00	; 0
     920:	1f c0       	rjmp	.+62     	; 0x960 <rowLoad+0x4c>
		uint16_t tilePointer = rowRAM[col] * 8;								//Get the tile and * 8 to create a pointer
     922:	fb 01       	movw	r30, r22
     924:	e4 0f       	add	r30, r20
     926:	f5 1f       	adc	r31, r21
     928:	e0 81       	ld	r30, Z
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	ee 0f       	add	r30, r30
     932:	ff 1f       	adc	r31, r31
     934:	ee 0f       	add	r30, r30
     936:	ff 1f       	adc	r31, r31
		
		for (uint8_t colB = 0 ; colB < 8 ; colB++) {						//Draw the 8 pixel wide tile
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	0e c0       	rjmp	.+28     	; 0x958 <rowLoad+0x44>
			
			SPI0.DATA = pgm_read_byte(tileData + tilePointer++) & clear;	//Send the column of pixels directly to OLED. Clear 0 = blank Clear 0xFF = show pixels
     93c:	ef 01       	movw	r28, r30
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	ea 0f       	add	r30, r26
     942:	fb 1f       	adc	r31, r27
     944:	e4 91       	lpm	r30, Z
     946:	e8 23       	and	r30, r24
     948:	e0 93 24 08 	sts	0x0824, r30	; 0x800824 <jumpVelocity+0x7f599c>
			while(!(SPI0.INTFLAGS & SPI_DREIF_bm)) {}
     94c:	90 91 23 08 	lds	r25, 0x0823	; 0x800823 <jumpVelocity+0x7f599b>
     950:	95 ff       	sbrs	r25, 5
     952:	fc cf       	rjmp	.-8      	; 0x94c <rowLoad+0x38>
void rowLoad(const char *tileData, uint8_t *rowRAM, uint8_t clear) {		//Loads a row of 16 tiles directly into the OLED. Useful for status screens/pause displays without destroying the main buffer
	
	for (int col = 0 ; col < 16 ; col++) {
		uint16_t tilePointer = rowRAM[col] * 8;								//Get the tile and * 8 to create a pointer
		
		for (uint8_t colB = 0 ; colB < 8 ; colB++) {						//Draw the 8 pixel wide tile
     954:	2f 5f       	subi	r18, 0xFF	; 255
			
			SPI0.DATA = pgm_read_byte(tileData + tilePointer++) & clear;	//Send the column of pixels directly to OLED. Clear 0 = blank Clear 0xFF = show pixels
     956:	fe 01       	movw	r30, r28
void rowLoad(const char *tileData, uint8_t *rowRAM, uint8_t clear) {		//Loads a row of 16 tiles directly into the OLED. Useful for status screens/pause displays without destroying the main buffer
	
	for (int col = 0 ; col < 16 ; col++) {
		uint16_t tilePointer = rowRAM[col] * 8;								//Get the tile and * 8 to create a pointer
		
		for (uint8_t colB = 0 ; colB < 8 ; colB++) {						//Draw the 8 pixel wide tile
     958:	28 30       	cpi	r18, 0x08	; 8
     95a:	80 f3       	brcs	.-32     	; 0x93c <rowLoad+0x28>
	
}

void rowLoad(const char *tileData, uint8_t *rowRAM, uint8_t clear) {		//Loads a row of 16 tiles directly into the OLED. Useful for status screens/pause displays without destroying the main buffer
	
	for (int col = 0 ; col < 16 ; col++) {
     95c:	4f 5f       	subi	r20, 0xFF	; 255
     95e:	5f 4f       	sbci	r21, 0xFF	; 255
     960:	40 31       	cpi	r20, 0x10	; 16
     962:	51 05       	cpc	r21, r1
     964:	f4 f2       	brlt	.-68     	; 0x922 <rowLoad+0xe>
				
		}		
		
	}
	
}
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <getButtons>:

uint8_t getButtons() {
	
	uint8_t buttons = PORTC_IN & 0x0F;					//Grab lower nibble of C (d-pad)
     96c:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <jumpVelocity+0x7f55c0>
     970:	9f 70       	andi	r25, 0x0F	; 15
	buttons |= PORTA_IN & 0xE0;							//OR in upper 3 bits of Port A
     972:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <jumpVelocity+0x7f5580>
     976:	80 7e       	andi	r24, 0xE0	; 224
	return buttons;									//Return inverse for easy logic	
	
}
     978:	89 2b       	or	r24, r25
     97a:	08 95       	ret

0000097c <toneLogic>:

void toneLogic() {			//Called at 1KHz

	if (toneDir) {
     97c:	80 91 13 38 	lds	r24, 0x3813	; 0x803813 <toneDir>
     980:	90 91 14 38 	lds	r25, 0x3814	; 0x803814 <toneDir+0x1>
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	41 f0       	breq	.+16     	; 0x998 <toneLogic+0x1c>
		TCA0.SINGLE.CMP0 += toneDir;	
     988:	e0 e0       	ldi	r30, 0x00	; 0
     98a:	fa e0       	ldi	r31, 0x0A	; 10
     98c:	20 a5       	ldd	r18, Z+40	; 0x28
     98e:	31 a5       	ldd	r19, Z+41	; 0x29
     990:	82 0f       	add	r24, r18
     992:	93 1f       	adc	r25, r19
     994:	80 a7       	std	Z+40, r24	; 0x28
     996:	91 a7       	std	Z+41, r25	; 0x29
	}

	if (toneTimer) {
     998:	80 91 16 38 	lds	r24, 0x3816	; 0x803816 <toneTimer>
     99c:	90 91 17 38 	lds	r25, 0x3817	; 0x803817 <toneTimer+0x1>
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	71 f0       	breq	.+28     	; 0x9c0 <toneLogic+0x44>
		if (--toneTimer == 0) {
     9a4:	01 97       	sbiw	r24, 0x01	; 1
     9a6:	80 93 16 38 	sts	0x3816, r24	; 0x803816 <toneTimer>
     9aa:	90 93 17 38 	sts	0x3817, r25	; 0x803817 <toneTimer+0x1>
     9ae:	89 2b       	or	r24, r25
     9b0:	39 f4       	brne	.+14     	; 0x9c0 <toneLogic+0x44>
			TCA0.SINGLE.CTRLA &= 0xFE;				//Mask out enable bit (sound off)
     9b2:	e0 e0       	ldi	r30, 0x00	; 0
     9b4:	fa e0       	ldi	r31, 0x0A	; 10
     9b6:	80 81       	ld	r24, Z
     9b8:	8e 7f       	andi	r24, 0xFE	; 254
     9ba:	80 83       	st	Z, r24
			tonePriority = 0;						//Priority set to 0 (anything can now play)
     9bc:	10 92 15 38 	sts	0x3815, r1	; 0x803815 <tonePriority>
     9c0:	08 95       	ret

000009c2 <tone>:
		}
	}	
	
}

void tone(uint16_t thePitch, uint16_t theTime, uint8_t thisPriority, int direction) {
     9c2:	dc 01       	movw	r26, r24

	if (thisPriority < tonePriority) {					//A "more important" sound is playing? (some sounds are more equal than others)
     9c4:	90 91 15 38 	lds	r25, 0x3815	; 0x803815 <tonePriority>
     9c8:	49 17       	cp	r20, r25
     9ca:	88 f0       	brcs	.+34     	; 0x9ee <tone+0x2c>
		return;											//Abort
	}

	toneDir = direction;	
     9cc:	20 93 13 38 	sts	0x3813, r18	; 0x803813 <toneDir>
     9d0:	30 93 14 38 	sts	0x3814, r19	; 0x803814 <toneDir+0x1>
	tonePriority = thisPriority;						//Playing? Set as new priority
     9d4:	40 93 15 38 	sts	0x3815, r20	; 0x803815 <tonePriority>
	
    TCA0.SINGLE.CMP0 = thePitch;
     9d8:	e0 e0       	ldi	r30, 0x00	; 0
     9da:	fa e0       	ldi	r31, 0x0A	; 10
     9dc:	a0 a7       	std	Z+40, r26	; 0x28
     9de:	b1 a7       	std	Z+41, r27	; 0x29
    TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm; // Start	
     9e0:	80 81       	ld	r24, Z
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	80 83       	st	Z, r24
	
	toneTimer = theTime;	
     9e6:	60 93 16 38 	sts	0x3816, r22	; 0x803816 <toneTimer>
     9ea:	70 93 17 38 	sts	0x3817, r23	; 0x803817 <toneTimer+0x1>
     9ee:	08 95       	ret

000009f0 <ledState>:
	
}

void ledState(uint8_t theState) {
	
	if (theState) {
     9f0:	88 23       	and	r24, r24
     9f2:	21 f0       	breq	.+8      	; 0x9fc <ledState+0xc>
		PORTB_OUTSET = 0x10;	
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <jumpVelocity+0x7f559d>
     9fa:	08 95       	ret
	}
	else {
		PORTB_OUTCLR = 0x10;
     9fc:	80 e1       	ldi	r24, 0x10	; 16
     9fe:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <jumpVelocity+0x7f559e>
     a02:	08 95       	ret

00000a04 <getRandom>:
	
}

uint8_t getRandom(uint8_t mask) {
	
	ADC0.COMMAND = 0x01;					//Start ADC0 (the bare pads)
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	90 93 08 06 	sts	0x0608, r25	; 0x800608 <jumpVelocity+0x7f5780>
	while(!ADC0.INTFLAGS) {}				//Wait for it
     a0a:	90 91 0b 06 	lds	r25, 0x060B	; 0x80060b <jumpVelocity+0x7f5783>
     a0e:	99 23       	and	r25, r25
     a10:	e1 f3       	breq	.-8      	; 0xa0a <getRandom+0x6>
	return (ADC0.RES + seed) & mask;		//Add the SEED value from start of frame and return the masked value
     a12:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <jumpVelocity+0x7f5788>
     a16:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <jumpVelocity+0x7f5789>
     a1a:	90 91 49 3c 	lds	r25, 0x3C49	; 0x803c49 <seed>
     a1e:	29 0f       	add	r18, r25
	
}
     a20:	82 23       	and	r24, r18
     a22:	08 95       	ret

00000a24 <setWindow>:

}

void setWindow(uint8_t x, uint8_t y) {

	for (int row = 0 ; row < 8 ; row++) {
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	1a c0       	rjmp	.+52     	; 0xa5e <setWindow+0x3a>
		winX[row] = x >> 3;
     a2a:	f9 01       	movw	r30, r18
     a2c:	ef 5b       	subi	r30, 0xBF	; 191
     a2e:	f7 4c       	sbci	r31, 0xC7	; 199
     a30:	98 2f       	mov	r25, r24
     a32:	96 95       	lsr	r25
     a34:	96 95       	lsr	r25
     a36:	96 95       	lsr	r25
     a38:	90 83       	st	Z, r25
		winXfine[row] = x & 0x07;
     a3a:	f9 01       	movw	r30, r18
     a3c:	e7 5c       	subi	r30, 0xC7	; 199
     a3e:	f7 4c       	sbci	r31, 0xC7	; 199
     a40:	98 2f       	mov	r25, r24
     a42:	97 70       	andi	r25, 0x07	; 7
     a44:	90 83       	st	Z, r25
		winY = y >> 3;
     a46:	96 2f       	mov	r25, r22
     a48:	96 95       	lsr	r25
     a4a:	96 95       	lsr	r25
     a4c:	96 95       	lsr	r25
     a4e:	90 93 19 38 	sts	0x3819, r25	; 0x803819 <winY>
		winYfine = y & 0x07;		
     a52:	96 2f       	mov	r25, r22
     a54:	97 70       	andi	r25, 0x07	; 7
     a56:	90 93 18 38 	sts	0x3818, r25	; 0x803818 <winYfine>

}

void setWindow(uint8_t x, uint8_t y) {

	for (int row = 0 ; row < 8 ; row++) {
     a5a:	2f 5f       	subi	r18, 0xFF	; 255
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	28 30       	cpi	r18, 0x08	; 8
     a60:	31 05       	cpc	r19, r1
     a62:	1c f3       	brlt	.-58     	; 0xa2a <setWindow+0x6>
		winXfine[row] = x & 0x07;
		winY = y >> 3;
		winYfine = y & 0x07;		
	}
	
}
     a64:	08 95       	ret

00000a66 <setRowScroll>:

void setRowScroll(uint8_t x, uint8_t row) {

	winX[row] = x >> 3;
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	fb 01       	movw	r30, r22
     a6a:	ef 5b       	subi	r30, 0xBF	; 191
     a6c:	f7 4c       	sbci	r31, 0xC7	; 199
     a6e:	98 2f       	mov	r25, r24
     a70:	96 95       	lsr	r25
     a72:	96 95       	lsr	r25
     a74:	96 95       	lsr	r25
     a76:	90 83       	st	Z, r25
	winXfine[row] = x & 0x07;
     a78:	fb 01       	movw	r30, r22
     a7a:	e7 5c       	subi	r30, 0xC7	; 199
     a7c:	f7 4c       	sbci	r31, 0xC7	; 199
     a7e:	87 70       	andi	r24, 0x07	; 7
     a80:	80 83       	st	Z, r24
     a82:	08 95       	ret

00000a84 <drawSprite>:

}

void drawSprite(const char *bitmap, int8_t xPos, int8_t yPos, uint8_t frameNumber, int8_t mirror) {
     a84:	6f 92       	push	r6
     a86:	7f 92       	push	r7
     a88:	8f 92       	push	r8
     a8a:	9f 92       	push	r9
     a8c:	af 92       	push	r10
     a8e:	bf 92       	push	r11
     a90:	cf 92       	push	r12
     a92:	df 92       	push	r13
     a94:	ef 92       	push	r14
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29

	uint8_t xSize = pgm_read_byte(bitmap++);				//Get bitmap width from flash
     aa0:	dc 01       	movw	r26, r24
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	fc 01       	movw	r30, r24
     aa6:	64 90       	lpm	r6, Z
	uint8_t ySize = pgm_read_byte(bitmap++) >> 3;			//Get bitmap height from flash, convert to bytes (8 pixels per byte)
     aa8:	02 96       	adiw	r24, 0x02	; 2
     aaa:	fd 01       	movw	r30, r26
     aac:	a4 91       	lpm	r26, Z
     aae:	a6 95       	lsr	r26
     ab0:	a6 95       	lsr	r26
     ab2:	a6 95       	lsr	r26

	uint16_t sizeInBytes = xSize * ySize;					//Get total sprite size
     ab4:	c6 2d       	mov	r28, r6
     ab6:	d0 e0       	ldi	r29, 0x00	; 0
     ab8:	aa 2e       	mov	r10, r26
     aba:	b1 2c       	mov	r11, r1
     abc:	ca 9d       	mul	r28, r10
     abe:	60 01       	movw	r12, r0
     ac0:	cb 9d       	mul	r28, r11
     ac2:	d0 0c       	add	r13, r0
     ac4:	da 9d       	mul	r29, r10
     ac6:	d0 0c       	add	r13, r0
     ac8:	11 24       	eor	r1, r1

	uint8_t offset = yPos & 0x07;
     aca:	74 2f       	mov	r23, r20
     acc:	77 70       	andi	r23, 0x07	; 7
	uint8_t offsetInv = 8 - offset;
     ace:	18 e0       	ldi	r17, 0x08	; 8
     ad0:	17 1b       	sub	r17, r23
	
	int16_t bPointer = ((yPos >> 3) * 128) + xPos;			//Where the screen buffer pointer starts
     ad2:	45 95       	asr	r20
     ad4:	45 95       	asr	r20
     ad6:	45 95       	asr	r20
     ad8:	a6 2f       	mov	r26, r22
     ada:	06 2e       	mov	r0, r22
     adc:	00 0c       	add	r0, r0
     ade:	bb 0b       	sbc	r27, r27
     ae0:	30 e8       	ldi	r19, 0x80	; 128
     ae2:	43 03       	mulsu	r20, r19
     ae4:	a0 0d       	add	r26, r0
     ae6:	b1 1d       	adc	r27, r1
     ae8:	11 24       	eor	r1, r1

	bitmap += frameNumber * (sizeInBytes * 2);				//Advance to frame pointer in sprite char memory
     aea:	2c 9d       	mul	r18, r12
     aec:	a0 01       	movw	r20, r0
     aee:	2d 9d       	mul	r18, r13
     af0:	50 0d       	add	r21, r0
     af2:	11 24       	eor	r1, r1
     af4:	9a 01       	movw	r18, r20
     af6:	22 0f       	add	r18, r18
     af8:	33 1f       	adc	r19, r19
     afa:	82 0f       	add	r24, r18
     afc:	93 1f       	adc	r25, r19

	if (mirror == -1) {										//If mirror draw sprites from right to left
     afe:	0f 3f       	cpi	r16, 0xFF	; 255
     b00:	29 f4       	brne	.+10     	; 0xb0c <drawSprite+0x88>
		bitmap += xSize - 1;
     b02:	9e 01       	movw	r18, r28
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	31 09       	sbc	r19, r1
     b08:	82 0f       	add	r24, r18
     b0a:	93 1f       	adc	r25, r19
	}
	
	uint8_t yOffset = 0;
	
	if (offset) {											//If sprite is on a byte boundry we can save a lot of time, so set flag if so
     b0c:	71 11       	cpse	r23, r1
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <drawSprite+0x90>

	if (mirror == -1) {										//If mirror draw sprites from right to left
		bitmap += xSize - 1;
	}
	
	uint8_t yOffset = 0;
     b10:	71 2c       	mov	r7, r1
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <drawSprite+0x94>
	
	if (offset) {											//If sprite is on a byte boundry we can save a lot of time, so set flag if so
		yOffset = 1;
     b14:	77 24       	eor	r7, r7
     b16:	73 94       	inc	r7
	}

	for (int y = 0 ; y < (ySize + yOffset) ; y++) {			//Do all rows of a sprite+1 if offset (since lowest row will go past a byte boundry) or if no offset, just do ySize rows
     b18:	e1 2c       	mov	r14, r1
     b1a:	f1 2c       	mov	r15, r1
     b1c:	73 c0       	rjmp	.+230    	; 0xc04 <drawSprite+0x180>

		int8_t xTemp = xPos;

		for (int16_t x = bPointer ; x < xSize + bPointer ; x++) {					//Select column

			if (!(x & 0xFC00) && !(xTemp & 0x80)) {									//Don't fill bytes outside of the screen buffer or past the left and right edges of the screen (xTemp)
     b1e:	f9 01       	movw	r30, r18
     b20:	ee 27       	eor	r30, r30
     b22:	fc 7f       	andi	r31, 0xFC	; 252
     b24:	ef 2b       	or	r30, r31
     b26:	09 f0       	breq	.+2      	; 0xb2a <drawSprite+0xa6>
     b28:	50 c0       	rjmp	.+160    	; 0xbca <drawSprite+0x146>
     b2a:	44 23       	and	r20, r20
     b2c:	0c f4       	brge	.+2      	; 0xb30 <drawSprite+0xac>
     b2e:	4d c0       	rjmp	.+154    	; 0xbca <drawSprite+0x146>
				
				uint8_t buildMask = 0;
				uint8_t buildPixels = 0;
				
				if (offset) {														//Get offset pixels from adjacent rows
     b30:	77 23       	and	r23, r23
     b32:	09 f4       	brne	.+2      	; 0xb36 <drawSprite+0xb2>
     b34:	3d c0       	rjmp	.+122    	; 0xbb0 <drawSprite+0x12c>
					if (y) {
     b36:	e1 14       	cp	r14, r1
     b38:	f1 04       	cpc	r15, r1
     b3a:	e9 f0       	breq	.+58     	; 0xb76 <drawSprite+0xf2>
						buildMask = pgm_read_byte(bitmap - xSize) >> offsetInv;
     b3c:	86 2c       	mov	r8, r6
     b3e:	91 2c       	mov	r9, r1
     b40:	fc 01       	movw	r30, r24
     b42:	e8 19       	sub	r30, r8
     b44:	f9 09       	sbc	r31, r9
     b46:	e4 91       	lpm	r30, Z
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	01 2e       	mov	r0, r17
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <drawSprite+0xce>
     b4e:	f5 95       	asr	r31
     b50:	e7 95       	ror	r30
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <drawSprite+0xca>
     b56:	5e 2f       	mov	r21, r30
						buildPixels = pgm_read_byte((bitmap + sizeInBytes) - xSize) >> offsetInv;
     b58:	f6 01       	movw	r30, r12
     b5a:	e8 19       	sub	r30, r8
     b5c:	f9 09       	sbc	r31, r9
     b5e:	e8 0f       	add	r30, r24
     b60:	f9 1f       	adc	r31, r25
     b62:	e4 91       	lpm	r30, Z
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	01 2e       	mov	r0, r17
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <drawSprite+0xea>
     b6a:	f5 95       	asr	r31
     b6c:	e7 95       	ror	r30
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <drawSprite+0xe6>
     b72:	8e 2e       	mov	r8, r30
     b74:	02 c0       	rjmp	.+4      	; 0xb7a <drawSprite+0xf6>
		for (int16_t x = bPointer ; x < xSize + bPointer ; x++) {					//Select column

			if (!(x & 0xFC00) && !(xTemp & 0x80)) {									//Don't fill bytes outside of the screen buffer or past the left and right edges of the screen (xTemp)
				
				uint8_t buildMask = 0;
				uint8_t buildPixels = 0;
     b76:	81 2c       	mov	r8, r1

		for (int16_t x = bPointer ; x < xSize + bPointer ; x++) {					//Select column

			if (!(x & 0xFC00) && !(xTemp & 0x80)) {									//Don't fill bytes outside of the screen buffer or past the left and right edges of the screen (xTemp)
				
				uint8_t buildMask = 0;
     b78:	50 e0       	ldi	r21, 0x00	; 0
				if (offset) {														//Get offset pixels from adjacent rows
					if (y) {
						buildMask = pgm_read_byte(bitmap - xSize) >> offsetInv;
						buildPixels = pgm_read_byte((bitmap + sizeInBytes) - xSize) >> offsetInv;
					}
					if (y < ySize) {
     b7a:	ea 14       	cp	r14, r10
     b7c:	fb 04       	cpc	r15, r11
     b7e:	ec f4       	brge	.+58     	; 0xbba <drawSprite+0x136>
						buildMask |= pgm_read_byte(bitmap) << offset;
     b80:	fc 01       	movw	r30, r24
     b82:	94 90       	lpm	r9, Z
     b84:	e9 2d       	mov	r30, r9
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	07 2e       	mov	r0, r23
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <drawSprite+0x10c>
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	0a 94       	dec	r0
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <drawSprite+0x108>
     b94:	5e 2b       	or	r21, r30
						buildPixels |= pgm_read_byte(bitmap + sizeInBytes) << offset;
     b96:	fc 01       	movw	r30, r24
     b98:	ec 0d       	add	r30, r12
     b9a:	fd 1d       	adc	r31, r13
     b9c:	e4 91       	lpm	r30, Z
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	07 2e       	mov	r0, r23
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <drawSprite+0x124>
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	0a 94       	dec	r0
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <drawSprite+0x120>
     bac:	8e 2a       	or	r8, r30
     bae:	05 c0       	rjmp	.+10     	; 0xbba <drawSprite+0x136>
					}
				}
				else {																//Falls on byte boundry - simple and fast!
					buildMask = pgm_read_byte(bitmap);	
     bb0:	fc 01       	movw	r30, r24
     bb2:	54 91       	lpm	r21, Z
					buildPixels = pgm_read_byte(bitmap + sizeInBytes);				
     bb4:	ec 0d       	add	r30, r12
     bb6:	fd 1d       	adc	r31, r13
     bb8:	84 90       	lpm	r8, Z
				}
								
				buffer[x] &= ~buildMask;											//AND in mask
     bba:	f9 01       	movw	r30, r18
     bbc:	e7 5b       	subi	r30, 0xB7	; 183
     bbe:	f7 4c       	sbci	r31, 0xC7	; 199
     bc0:	50 95       	com	r21
     bc2:	90 80       	ld	r9, Z
     bc4:	59 21       	and	r21, r9
				buffer[x] |= buildPixels;											//OR in pixels
     bc6:	58 29       	or	r21, r8
     bc8:	50 83       	st	Z, r21
			}

			bitmap += mirror;															//Advance bitmap pointer and xTemp counter
     bca:	80 0f       	add	r24, r16
     bcc:	91 1d       	adc	r25, r1
     bce:	07 fd       	sbrc	r16, 7
     bd0:	9a 95       	dec	r25
			xTemp++;
     bd2:	4f 5f       	subi	r20, 0xFF	; 255

	for (int y = 0 ; y < (ySize + yOffset) ; y++) {			//Do all rows of a sprite+1 if offset (since lowest row will go past a byte boundry) or if no offset, just do ySize rows

		int8_t xTemp = xPos;

		for (int16_t x = bPointer ; x < xSize + bPointer ; x++) {					//Select column
     bd4:	2f 5f       	subi	r18, 0xFF	; 255
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <drawSprite+0x15a>
     bda:	9d 01       	movw	r18, r26
     bdc:	46 2f       	mov	r20, r22
     bde:	fd 01       	movw	r30, r26
     be0:	ec 0f       	add	r30, r28
     be2:	fd 1f       	adc	r31, r29
     be4:	2e 17       	cp	r18, r30
     be6:	3f 07       	cpc	r19, r31
     be8:	0c f4       	brge	.+2      	; 0xbec <drawSprite+0x168>
     bea:	99 cf       	rjmp	.-206    	; 0xb1e <drawSprite+0x9a>
			bitmap += mirror;															//Advance bitmap pointer and xTemp counter
			xTemp++;
		
		}
			
		bPointer += 128;														//Increment buffer line buffer by 1 byte-boundary line
     bec:	a0 58       	subi	r26, 0x80	; 128
     bee:	bf 4f       	sbci	r27, 0xFF	; 255

		if (mirror == -1) {														//Since mirrored = going backwards in memory we have to skip 2 row widths to get to the right-hand start of the next one
     bf0:	0f 3f       	cpi	r16, 0xFF	; 255
     bf2:	29 f4       	brne	.+10     	; 0xbfe <drawSprite+0x17a>
			bitmap += (xSize * 2); // - 1;
     bf4:	9e 01       	movw	r18, r28
     bf6:	22 0f       	add	r18, r18
     bf8:	33 1f       	adc	r19, r19
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
	
	if (offset) {											//If sprite is on a byte boundry we can save a lot of time, so set flag if so
		yOffset = 1;
	}

	for (int y = 0 ; y < (ySize + yOffset) ; y++) {			//Do all rows of a sprite+1 if offset (since lowest row will go past a byte boundry) or if no offset, just do ySize rows
     bfe:	ff ef       	ldi	r31, 0xFF	; 255
     c00:	ef 1a       	sub	r14, r31
     c02:	ff 0a       	sbc	r15, r31
     c04:	95 01       	movw	r18, r10
     c06:	27 0d       	add	r18, r7
     c08:	31 1d       	adc	r19, r1
     c0a:	e2 16       	cp	r14, r18
     c0c:	f3 06       	cpc	r15, r19
     c0e:	2c f3       	brlt	.-54     	; 0xbda <drawSprite+0x156>
			bitmap += (xSize * 2); // - 1;
		}

	}

}
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	bf 90       	pop	r11
     c22:	af 90       	pop	r10
     c24:	9f 90       	pop	r9
     c26:	8f 90       	pop	r8
     c28:	7f 90       	pop	r7
     c2a:	6f 90       	pop	r6
     c2c:	08 95       	ret

00000c2e <setScrollDirection>:

void setScrollDirection(uint8_t mirrorType) {

	scrollDirection = mirrorType;	
     c2e:	80 93 1a 38 	sts	0x381A, r24	; 0x80381a <scrollDirection>
     c32:	08 95       	ret

00000c34 <sendSPI>:

}

void sendSPI(uint8_t theData) {
	
	SPI0.DATA = theData;
     c34:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <jumpVelocity+0x7f599c>
	while(!(SPI0.INTFLAGS & SPI_IF_bm)) {}		//Wait for transfer
     c38:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <jumpVelocity+0x7f599b>
     c3c:	88 23       	and	r24, r24
     c3e:	e4 f7       	brge	.-8      	; 0xc38 <sendSPI+0x4>
	
}
     c40:	08 95       	ret

00000c42 <dcHigh>:

void dcHigh() {

	PORTB_OUTSET = 0x02;
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <jumpVelocity+0x7f559d>
     c48:	08 95       	ret

00000c4a <dcLow>:
	
}

void dcLow() {

	PORTB_OUTCLR = 0x02;
     c4a:	82 e0       	ldi	r24, 0x02	; 2
     c4c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <jumpVelocity+0x7f559e>
     c50:	08 95       	ret

00000c52 <csHigh>:
	
}

void csHigh() {

	PORTB_OUTSET = 0x01;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <jumpVelocity+0x7f559d>
     c58:	08 95       	ret

00000c5a <csLow>:
	
}

void csLow() {

	PORTB_OUTCLR = 0x01;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <jumpVelocity+0x7f559e>
     c60:	08 95       	ret

00000c62 <screenLoad>:

}

void screenLoad() {						//This should be called beginning of each frame. Takes just under 1ms

	PORTC_PIN0CTRL = 0x00;							//Disable pullups on "up"
     c62:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <jumpVelocity+0x7f55c8>

	ADC1.COMMAND = 0x01;							//Start ADC1 conversion to execute on PC0 (up) while we send the frame
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <jumpVelocity+0x7f57c0>

	uint16_t pointer = 0;

	if (!displaySleep) {									//Don't bother with this if display is asleep (main code should do this, but this a sanity check)		
     c6c:	80 91 12 38 	lds	r24, 0x3812	; 0x803812 <__data_end>
     c70:	81 11       	cpse	r24, r1
     c72:	26 c0       	rjmp	.+76     	; 0xcc0 <screenLoad+0x5e>
		csLow();
     c74:	0e 94 2d 06 	call	0xc5a	; 0xc5a <csLow>
	
		for (int x = 0 ; x < 512 ; x++) {					//Send 512 pairs of 2 bytes over SPI in hardware buffer mode
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	50 e0       	ldi	r21, 0x00	; 0

	PORTC_PIN0CTRL = 0x00;							//Disable pullups on "up"

	ADC1.COMMAND = 0x01;							//Start ADC1 conversion to execute on PC0 (up) while we send the frame

	uint16_t pointer = 0;
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0

	if (!displaySleep) {									//Don't bother with this if display is asleep (main code should do this, but this a sanity check)		
		csLow();
	
		for (int x = 0 ; x < 512 ; x++) {					//Send 512 pairs of 2 bytes over SPI in hardware buffer mode
     c80:	19 c0       	rjmp	.+50     	; 0xcb4 <screenLoad+0x52>
			SPI0.DATA = buffer[pointer++];
     c82:	f9 01       	movw	r30, r18
     c84:	31 96       	adiw	r30, 0x01	; 1
     c86:	d9 01       	movw	r26, r18
     c88:	a7 5b       	subi	r26, 0xB7	; 183
     c8a:	b7 4c       	sbci	r27, 0xC7	; 199
     c8c:	8c 91       	ld	r24, X
     c8e:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <jumpVelocity+0x7f599c>
			while(!(SPI0.INTFLAGS & SPI_DREIF_bm)) {}
     c92:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <jumpVelocity+0x7f599b>
     c96:	85 ff       	sbrs	r24, 5
     c98:	fc cf       	rjmp	.-8      	; 0xc92 <screenLoad+0x30>
			SPI0.DATA = buffer[pointer++];
     c9a:	2e 5f       	subi	r18, 0xFE	; 254
     c9c:	3f 4f       	sbci	r19, 0xFF	; 255
     c9e:	e7 5b       	subi	r30, 0xB7	; 183
     ca0:	f7 4c       	sbci	r31, 0xC7	; 199
     ca2:	80 81       	ld	r24, Z
     ca4:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <jumpVelocity+0x7f599c>
			while(!(SPI0.INTFLAGS & SPI_DREIF_bm)) {}
     ca8:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <jumpVelocity+0x7f599b>
     cac:	85 ff       	sbrs	r24, 5
     cae:	fc cf       	rjmp	.-8      	; 0xca8 <screenLoad+0x46>
	uint16_t pointer = 0;

	if (!displaySleep) {									//Don't bother with this if display is asleep (main code should do this, but this a sanity check)		
		csLow();
	
		for (int x = 0 ; x < 512 ; x++) {					//Send 512 pairs of 2 bytes over SPI in hardware buffer mode
     cb0:	4f 5f       	subi	r20, 0xFF	; 255
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	41 15       	cp	r20, r1
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	58 07       	cpc	r21, r24
     cba:	1c f3       	brlt	.-58     	; 0xc82 <screenLoad+0x20>
			while(!(SPI0.INTFLAGS & SPI_DREIF_bm)) {}
			SPI0.DATA = buffer[pointer++];
			while(!(SPI0.INTFLAGS & SPI_DREIF_bm)) {}
		}
	
		csHigh();
     cbc:	0e 94 29 06 	call	0xc52	; 0xc52 <csHigh>
	}
	
	seed = ADC1.RES;				//Get seed value from ADC1
     cc0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <jumpVelocity+0x7f57c8>
     cc4:	90 91 51 06 	lds	r25, 0x0651	; 0x800651 <jumpVelocity+0x7f57c9>
     cc8:	80 93 49 3c 	sts	0x3C49, r24	; 0x803c49 <seed>
     ccc:	90 93 4a 3c 	sts	0x3C4A, r25	; 0x803c4a <seed+0x1>
	PORTC_PIN0CTRL = 0x88;			//Restore UP button function
     cd0:	88 e8       	ldi	r24, 0x88	; 136
     cd2:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <jumpVelocity+0x7f55c8>
     cd6:	08 95       	ret

00000cd8 <drawTiles>:
	while(!ADC0.INTFLAGS) {}				//Wait for it
	return (ADC0.RES + seed) & mask;		//Add the SEED value from start of frame and return the masked value
	
}

void drawTiles(const char *tileData, uint8_t *tileMapPointer) {
     cd8:	5f 92       	push	r5
     cda:	6f 92       	push	r6
     cdc:	7f 92       	push	r7
     cde:	8f 92       	push	r8
     ce0:	9f 92       	push	r9
     ce2:	af 92       	push	r10
     ce4:	bf 92       	push	r11
     ce6:	cf 92       	push	r12
     ce8:	df 92       	push	r13
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	ec 01       	movw	r28, r24
     cf8:	8b 01       	movw	r16, r22

	uint16_t bufPoint = 0;

	csLow();
     cfa:	0e 94 2d 06 	call	0xc5a	; 0xc5a <csLow>

	if (scrollDirection) {					//Vertical?
     cfe:	80 91 1a 38 	lds	r24, 0x381A	; 0x80381a <scrollDirection>
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <drawTiles+0x30>
     d06:	db c0       	rjmp	.+438    	; 0xebe <drawTiles+0x1e6>
		
		uint8_t winYfineINV = 8 - winYfine;				//Get remainder of Y fine scrolling to OR in next line of pixels
     d08:	70 90 18 38 	lds	r7, 0x3818	; 0x803818 <winYfine>
     d0c:	88 e0       	ldi	r24, 0x08	; 8
     d0e:	88 2e       	mov	r8, r24
     d10:	87 18       	sub	r8, r7
		uint8_t coarseY = winY * 16;                           //Get the course Y value for top line of visible screen
     d12:	60 90 19 38 	lds	r6, 0x3819	; 0x803819 <winY>
     d16:	66 0c       	add	r6, r6
     d18:	66 0c       	add	r6, r6
     d1a:	66 0c       	add	r6, r6
     d1c:	66 0c       	add	r6, r6
		
		for (uint8_t row = 0 ; row < 8 ; row++) {               //Draw the 8 tile row high display
     d1e:	51 2c       	mov	r5, r1
	
}

void drawTiles(const char *tileData, uint8_t *tileMapPointer) {

	uint16_t bufPoint = 0;
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	50 e0       	ldi	r21, 0x00	; 0
	if (scrollDirection) {					//Vertical?
		
		uint8_t winYfineINV = 8 - winYfine;				//Get remainder of Y fine scrolling to OR in next line of pixels
		uint8_t coarseY = winY * 16;                           //Get the course Y value for top line of visible screen
		
		for (uint8_t row = 0 ; row < 8 ; row++) {               //Draw the 8 tile row high display
     d24:	7f c0       	rjmp	.+254    	; 0xe24 <drawTiles+0x14c>

			uint8_t finePointer = winXfine[row];						//Copy the fine scrolling amount so we can use it as a byte pointer when scanning in graphics
     d26:	e5 2d       	mov	r30, r5
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	e7 5c       	subi	r30, 0xC7	; 199
     d2c:	f7 4c       	sbci	r31, 0xC7	; 199
     d2e:	a0 81       	ld	r26, Z
			uint8_t coarseXpointerU = (tileMapPointer[coarseY] * 8) + finePointer;
     d30:	e6 2c       	mov	r14, r6
     d32:	f1 2c       	mov	r15, r1
     d34:	68 01       	movw	r12, r16
     d36:	ce 0c       	add	r12, r14
     d38:	df 1c       	adc	r13, r15
     d3a:	f6 01       	movw	r30, r12
     d3c:	20 81       	ld	r18, Z
     d3e:	22 0f       	add	r18, r18
     d40:	22 0f       	add	r18, r18
     d42:	22 0f       	add	r18, r18
     d44:	2a 0f       	add	r18, r26
			uint16_t coarseXpointerL; // = (tileMapPointer[coarseY + 16] * 8) + finePointer;
			if (coarseY == 240) {
     d46:	f0 ef       	ldi	r31, 0xF0	; 240
     d48:	6f 12       	cpse	r6, r31
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <drawTiles+0x8e>
				coarseXpointerL = (tileMapPointer[0] * 8) + finePointer;
     d4c:	f8 01       	movw	r30, r16
     d4e:	80 81       	ld	r24, Z
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	8a 0f       	add	r24, r26
     d60:	91 1d       	adc	r25, r1
				uint8_t lower = pgm_read_byte(tileData + coarseXpointerL++) << winYfineINV;
				
				buffer[bufPoint++] = upper | lower;
	
				if (++finePointer == 8) {								//Done drawing this tile?
					finePointer = 0;                                //Reset fine scroll counter
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	59 c0       	rjmp	.+178    	; 0xe18 <drawTiles+0x140>
			uint16_t coarseXpointerL; // = (tileMapPointer[coarseY + 16] * 8) + finePointer;
			if (coarseY == 240) {
				coarseXpointerL = (tileMapPointer[0] * 8) + finePointer;
			}
			else {
				coarseXpointerL = (tileMapPointer[coarseY + 16] * 8) + finePointer;
     d66:	f8 01       	movw	r30, r16
     d68:	ee 0d       	add	r30, r14
     d6a:	ff 1d       	adc	r31, r15
     d6c:	80 89       	ldd	r24, Z+16	; 0x10
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	8a 0f       	add	r24, r26
     d7e:	91 1d       	adc	r25, r1
     d80:	f0 cf       	rjmp	.-32     	; 0xd62 <drawTiles+0x8a>
			}
					
			for (uint8_t colB = 0 ; colB < 128 ; colB++) {         //Draw 16 column wide display (8 pixels / 1 char at a time)

				uint8_t upper = pgm_read_byte(tileData + coarseXpointerU++) >> winYfine;
     d82:	99 24       	eor	r9, r9
     d84:	93 94       	inc	r9
     d86:	92 0e       	add	r9, r18
     d88:	fe 01       	movw	r30, r28
     d8a:	e2 0f       	add	r30, r18
     d8c:	f1 1d       	adc	r31, r1
     d8e:	24 91       	lpm	r18, Z
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	07 2c       	mov	r0, r7
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <drawTiles+0xc2>
     d96:	35 95       	asr	r19
     d98:	27 95       	ror	r18
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <drawTiles+0xbe>
				uint8_t lower = pgm_read_byte(tileData + coarseXpointerL++) << winYfineINV;
     d9e:	bc 01       	movw	r22, r24
     da0:	6f 5f       	subi	r22, 0xFF	; 255
     da2:	7f 4f       	sbci	r23, 0xFF	; 255
     da4:	fe 01       	movw	r30, r28
     da6:	e8 0f       	add	r30, r24
     da8:	f9 1f       	adc	r31, r25
     daa:	e4 91       	lpm	r30, Z
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	08 2c       	mov	r0, r8
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <drawTiles+0xde>
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <drawTiles+0xda>
				
				buffer[bufPoint++] = upper | lower;
     dba:	5a 01       	movw	r10, r20
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	a8 1a       	sub	r10, r24
     dc0:	b8 0a       	sbc	r11, r24
     dc2:	47 5b       	subi	r20, 0xB7	; 183
     dc4:	57 4c       	sbci	r21, 0xC7	; 199
     dc6:	2e 2b       	or	r18, r30
     dc8:	fa 01       	movw	r30, r20
     dca:	20 83       	st	Z, r18
	
				if (++finePointer == 8) {								//Done drawing this tile?
     dcc:	af 5f       	subi	r26, 0xFF	; 255
     dce:	a8 30       	cpi	r26, 0x08	; 8
     dd0:	f9 f4       	brne	.+62     	; 0xe10 <drawTiles+0x138>
					finePointer = 0;                                //Reset fine scroll counter
					coarseXpointerU = tileMapPointer[coarseY] * 8;		//Get new tile pointer from memory
     dd2:	f6 01       	movw	r30, r12
     dd4:	90 80       	ld	r9, Z
     dd6:	99 0c       	add	r9, r9
     dd8:	99 0c       	add	r9, r9
     dda:	99 0c       	add	r9, r9
					if (coarseY == 240) {						
     ddc:	f0 ef       	ldi	r31, 0xF0	; 240
     dde:	6f 12       	cpse	r6, r31
     de0:	0b c0       	rjmp	.+22     	; 0xdf8 <drawTiles+0x120>
						coarseXpointerL = tileMapPointer[0] * 8;						
     de2:	f8 01       	movw	r30, r16
     de4:	60 81       	ld	r22, Z
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	66 0f       	add	r22, r22
     dea:	77 1f       	adc	r23, r23
     dec:	66 0f       	add	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	66 0f       	add	r22, r22
     df2:	77 1f       	adc	r23, r23
				uint8_t lower = pgm_read_byte(tileData + coarseXpointerL++) << winYfineINV;
				
				buffer[bufPoint++] = upper | lower;
	
				if (++finePointer == 8) {								//Done drawing this tile?
					finePointer = 0;                                //Reset fine scroll counter
     df4:	a0 e0       	ldi	r26, 0x00	; 0
     df6:	0c c0       	rjmp	.+24     	; 0xe10 <drawTiles+0x138>
					coarseXpointerU = tileMapPointer[coarseY] * 8;		//Get new tile pointer from memory
					if (coarseY == 240) {						
						coarseXpointerL = tileMapPointer[0] * 8;						
					}
					else {
						coarseXpointerL = tileMapPointer[coarseY + 16] * 8;						
     df8:	f8 01       	movw	r30, r16
     dfa:	ee 0d       	add	r30, r14
     dfc:	ff 1d       	adc	r31, r15
     dfe:	60 89       	ldd	r22, Z+16	; 0x10
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
				uint8_t lower = pgm_read_byte(tileData + coarseXpointerL++) << winYfineINV;
				
				buffer[bufPoint++] = upper | lower;
	
				if (++finePointer == 8) {								//Done drawing this tile?
					finePointer = 0;                                //Reset fine scroll counter
     e0e:	a0 e0       	ldi	r26, 0x00	; 0
			}
			else {
				coarseXpointerL = (tileMapPointer[coarseY + 16] * 8) + finePointer;
			}
					
			for (uint8_t colB = 0 ; colB < 128 ; colB++) {         //Draw 16 column wide display (8 pixels / 1 char at a time)
     e10:	bf 5f       	subi	r27, 0xFF	; 255
     e12:	cb 01       	movw	r24, r22
     e14:	29 2d       	mov	r18, r9

				uint8_t upper = pgm_read_byte(tileData + coarseXpointerU++) >> winYfine;
				uint8_t lower = pgm_read_byte(tileData + coarseXpointerL++) << winYfineINV;
				
				buffer[bufPoint++] = upper | lower;
     e16:	a5 01       	movw	r20, r10
			}
			else {
				coarseXpointerL = (tileMapPointer[coarseY + 16] * 8) + finePointer;
			}
					
			for (uint8_t colB = 0 ; colB < 128 ; colB++) {         //Draw 16 column wide display (8 pixels / 1 char at a time)
     e18:	bb 23       	and	r27, r27
     e1a:	0c f0       	brlt	.+2      	; 0xe1e <drawTiles+0x146>
     e1c:	b2 cf       	rjmp	.-156    	; 0xd82 <drawTiles+0xaa>
						coarseXpointerL = tileMapPointer[coarseY + 16] * 8;						
					}	
				}				
			}

			coarseY += 16;                                            //Increment coarse pointer to next row
     e1e:	f0 e1       	ldi	r31, 0x10	; 16
     e20:	6f 0e       	add	r6, r31
	if (scrollDirection) {					//Vertical?
		
		uint8_t winYfineINV = 8 - winYfine;				//Get remainder of Y fine scrolling to OR in next line of pixels
		uint8_t coarseY = winY * 16;                           //Get the course Y value for top line of visible screen
		
		for (uint8_t row = 0 ; row < 8 ; row++) {               //Draw the 8 tile row high display
     e22:	53 94       	inc	r5
     e24:	27 e0       	ldi	r18, 0x07	; 7
     e26:	25 15       	cp	r18, r5
     e28:	08 f0       	brcs	.+2      	; 0xe2c <drawTiles+0x154>
     e2a:	7d cf       	rjmp	.-262    	; 0xd26 <drawTiles+0x4e>
     e2c:	50 c0       	rjmp	.+160    	; 0xece <drawTiles+0x1f6>
		
		uint8_t coarseY = 0;                           //Get the course Y value for top line of visible screen
  	
		for (uint8_t row = 0 ; row < 8 ; row++) {               //Draw the 8 tile row high display

			uint8_t finePointer = winXfine[row];						//Copy the fine scrolling amount so we can use it as a byte pointer when scanning in graphics
     e2e:	2e 2d       	mov	r18, r14
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	f9 01       	movw	r30, r18
     e34:	e7 5c       	subi	r30, 0xC7	; 199
     e36:	f7 4c       	sbci	r31, 0xC7	; 199
     e38:	60 81       	ld	r22, Z
			uint8_t coarseX = winX[row];								//Find the current coarseX position for this line
     e3a:	f9 01       	movw	r30, r18
     e3c:	ef 5b       	subi	r30, 0xBF	; 191
     e3e:	f7 4c       	sbci	r31, 0xC7	; 199
     e40:	f0 80       	ld	r15, Z
			uint16_t coarseXpointer = (tileMapPointer[coarseX + coarseY] * 8) + finePointer;
     e42:	2d 2d       	mov	r18, r13
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	f9 01       	movw	r30, r18
     e48:	ef 0d       	add	r30, r15
     e4a:	f1 1d       	adc	r31, r1
     e4c:	e0 0f       	add	r30, r16
     e4e:	f1 1f       	adc	r31, r17
     e50:	e0 81       	ld	r30, Z
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e6 0f       	add	r30, r22
     e62:	f1 1d       	adc	r31, r1

			for (uint8_t colB = 0 ; colB < 128 ; colB++) {         //Draw 16 column wide display (8 pixels / 1 char at a time)
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	25 c0       	rjmp	.+74     	; 0xeb2 <drawTiles+0x1da>

				buffer[bufPoint++] = pgm_read_byte(tileData + coarseXpointer++);
     e68:	dc 01       	movw	r26, r24
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	af 01       	movw	r20, r30
     e6e:	4f 5f       	subi	r20, 0xFF	; 255
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	ec 0f       	add	r30, r28
     e74:	fd 1f       	adc	r31, r29
     e76:	c4 90       	lpm	r12, Z
     e78:	87 5b       	subi	r24, 0xB7	; 183
     e7a:	97 4c       	sbci	r25, 0xC7	; 199
     e7c:	fc 01       	movw	r30, r24
     e7e:	c0 82       	st	Z, r12
	
				if (++finePointer == 8) {									//Done drawing this tile?
     e80:	6f 5f       	subi	r22, 0xFF	; 255
     e82:	68 30       	cpi	r22, 0x08	; 8
     e84:	99 f4       	brne	.+38     	; 0xeac <drawTiles+0x1d4>
					finePointer = 0;										//Reset fine scroll counter
					if (++coarseX > 31) {
     e86:	f3 94       	inc	r15
     e88:	ff e1       	ldi	r31, 0x1F	; 31
     e8a:	ff 15       	cp	r31, r15
     e8c:	08 f4       	brcc	.+2      	; 0xe90 <drawTiles+0x1b8>
						coarseX = 0;
     e8e:	f1 2c       	mov	r15, r1
					}
					coarseXpointer = tileMapPointer[coarseX + coarseY] * 8;		//Get new tile pointer from memory
     e90:	f9 01       	movw	r30, r18
     e92:	ef 0d       	add	r30, r15
     e94:	f1 1d       	adc	r31, r1
     e96:	e0 0f       	add	r30, r16
     e98:	f1 1f       	adc	r31, r17
     e9a:	40 81       	ld	r20, Z
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	44 0f       	add	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	44 0f       	add	r20, r20
     ea4:	55 1f       	adc	r21, r21
     ea6:	44 0f       	add	r20, r20
     ea8:	55 1f       	adc	r21, r21
			for (uint8_t colB = 0 ; colB < 128 ; colB++) {         //Draw 16 column wide display (8 pixels / 1 char at a time)

				buffer[bufPoint++] = pgm_read_byte(tileData + coarseXpointer++);
	
				if (++finePointer == 8) {									//Done drawing this tile?
					finePointer = 0;										//Reset fine scroll counter
     eaa:	60 e0       	ldi	r22, 0x00	; 0

			uint8_t finePointer = winXfine[row];						//Copy the fine scrolling amount so we can use it as a byte pointer when scanning in graphics
			uint8_t coarseX = winX[row];								//Find the current coarseX position for this line
			uint16_t coarseXpointer = (tileMapPointer[coarseX + coarseY] * 8) + finePointer;

			for (uint8_t colB = 0 ; colB < 128 ; colB++) {         //Draw 16 column wide display (8 pixels / 1 char at a time)
     eac:	7f 5f       	subi	r23, 0xFF	; 255
     eae:	fa 01       	movw	r30, r20

				buffer[bufPoint++] = pgm_read_byte(tileData + coarseXpointer++);
     eb0:	cd 01       	movw	r24, r26

			uint8_t finePointer = winXfine[row];						//Copy the fine scrolling amount so we can use it as a byte pointer when scanning in graphics
			uint8_t coarseX = winX[row];								//Find the current coarseX position for this line
			uint16_t coarseXpointer = (tileMapPointer[coarseX + coarseY] * 8) + finePointer;

			for (uint8_t colB = 0 ; colB < 128 ; colB++) {         //Draw 16 column wide display (8 pixels / 1 char at a time)
     eb2:	77 23       	and	r23, r23
     eb4:	cc f6       	brge	.-78     	; 0xe68 <drawTiles+0x190>
					coarseXpointer = tileMapPointer[coarseX + coarseY] * 8;		//Get new tile pointer from memory
				}
			
			}

			coarseY += 32;                                            //Increment coarse pointer to next row
     eb6:	20 e2       	ldi	r18, 0x20	; 32
     eb8:	d2 0e       	add	r13, r18
	}
	else {								//Horizontal?
		
		uint8_t coarseY = 0;                           //Get the course Y value for top line of visible screen
  	
		for (uint8_t row = 0 ; row < 8 ; row++) {               //Draw the 8 tile row high display
     eba:	e3 94       	inc	r14
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <drawTiles+0x1ee>
     ebe:	e1 2c       	mov	r14, r1
     ec0:	d1 2c       	mov	r13, r1
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	e7 e0       	ldi	r30, 0x07	; 7
     ec8:	ee 15       	cp	r30, r14
     eca:	08 f0       	brcs	.+2      	; 0xece <drawTiles+0x1f6>
     ecc:	b0 cf       	rjmp	.-160    	; 0xe2e <drawTiles+0x156>
			coarseY += 32;                                            //Increment coarse pointer to next row
		
		}		
	}

	csHigh();
     ece:	0e 94 29 06 	call	0xc52	; 0xc52 <csHigh>

}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	7f 90       	pop	r7
     eec:	6f 90       	pop	r6
     eee:	5f 90       	pop	r5
     ef0:	08 95       	ret

00000ef2 <writecommand>:
	
	SPI0_CTRLB = SPI_BUFEN_bm;								//Resume SPI buffer mode
	
}

void writecommand(uint8_t c) {
     ef2:	cf 93       	push	r28
     ef4:	c8 2f       	mov	r28, r24

	dcLow();
     ef6:	0e 94 25 06 	call	0xc4a	; 0xc4a <dcLow>
	csLow();
     efa:	0e 94 2d 06 	call	0xc5a	; 0xc5a <csLow>
	sendSPI(c);
     efe:	8c 2f       	mov	r24, r28
     f00:	0e 94 1a 06 	call	0xc34	; 0xc34 <sendSPI>
	csHigh();
     f04:	0e 94 29 06 	call	0xc52	; 0xc52 <csHigh>
	dcHigh();
     f08:	0e 94 21 06 	call	0xc42	; 0xc42 <dcHigh>
		
}
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <displayInit>:
uint8_t displaySleep = 0;
uint16_t seed;

void displayInit() {

	csLow();	
     f10:	0e 94 2d 06 	call	0xc5a	; 0xc5a <csLow>
	PORTA_OUTCLR = 0x10;				//LCD reset
     f14:	80 e1       	ldi	r24, 0x10	; 16
     f16:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <jumpVelocity+0x7f557e>
	PORTA_OUTSET = 0x10;				//LCD reset
     f1a:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <jumpVelocity+0x7f557d>
	csHigh();
     f1e:	0e 94 29 06 	call	0xc52	; 0xc52 <csHigh>

    // Init sequence for 128x64 OLED module
    writecommand(SSD1306_DISPLAYOFF);                    // 0xAE
     f22:	8e ea       	ldi	r24, 0xAE	; 174
     f24:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
	
    writecommand(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
     f28:	85 ed       	ldi	r24, 0xD5	; 213
     f2a:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0x80);									// the suggested ratio 0x80
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SETMULTIPLEX);                  // 0xA8
     f34:	88 ea       	ldi	r24, 0xA8	; 168
     f36:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0x3F);
     f3a:	8f e3       	ldi	r24, 0x3F	; 63
     f3c:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SETDISPLAYOFFSET);              // 0xD3
     f40:	83 ed       	ldi	r24, 0xD3	; 211
     f42:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0x0);                                   // no offset
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SETSTARTLINE);// | 0x0);        // line #0
     f4c:	80 e4       	ldi	r24, 0x40	; 64
     f4e:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_CHARGEPUMP);                    // 0x8D
     f52:	8d e8       	ldi	r24, 0x8D	; 141
     f54:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0x14);  // using internal VCC
     f58:	84 e1       	ldi	r24, 0x14	; 20
     f5a:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_MEMORYMODE);                    // 0x20
     f5e:	80 e2       	ldi	r24, 0x20	; 32
     f60:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    //writecommand(0x01);									// 0x00 vertical addressing
    writecommand(0x00);									// 0x00 horizontal addressing
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SEGREMAP | 0x01);				// rotate screen 180
     f6a:	81 ea       	ldi	r24, 0xA1	; 161
     f6c:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_COMSCANDEC);					// rotate screen 180
     f70:	88 ec       	ldi	r24, 0xC8	; 200
     f72:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SETCOMPINS);                    // 0xDA
     f76:	8a ed       	ldi	r24, 0xDA	; 218
     f78:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0x12);
     f7c:	82 e1       	ldi	r24, 0x12	; 18
     f7e:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SETCONTRAST);                   // 0x81
     f82:	81 e8       	ldi	r24, 0x81	; 129
     f84:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0x8F);
     f88:	8f e8       	ldi	r24, 0x8F	; 143
     f8a:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SETPRECHARGE);                  // 0xd9
     f8e:	89 ed       	ldi	r24, 0xD9	; 217
     f90:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0xF1);
     f94:	81 ef       	ldi	r24, 0xF1	; 241
     f96:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_SETVCOMDETECT);                 // 0xDB
     f9a:	8b ed       	ldi	r24, 0xDB	; 219
     f9c:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    writecommand(0x40);
     fa0:	80 e4       	ldi	r24, 0x40	; 64
     fa2:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
     fa6:	84 ea       	ldi	r24, 0xA4	; 164
     fa8:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_NORMALDISPLAY);                 // 0xA6
     fac:	86 ea       	ldi	r24, 0xA6	; 166
     fae:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
    
    writecommand(SSD1306_DISPLAYON);                     //switch on OLED
     fb2:	8f ea       	ldi	r24, 0xAF	; 175
     fb4:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
     fb8:	08 95       	ret

00000fba <displayOnOff>:
	
}

void displayOnOff(uint8_t whatState) {
	
	SPI0_CTRLB = 0;											//Disable SPI buffer mode since we are sending single byte commands
     fba:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <jumpVelocity+0x7f5999>

	if (whatState) {
     fbe:	88 23       	and	r24, r24
     fc0:	29 f0       	breq	.+10     	; 0xfcc <displayOnOff+0x12>
		displayInit();
     fc2:	0e 94 88 07 	call	0xf10	; 0xf10 <displayInit>
		displaySleep = 0;									//Reset OLED to wake it back up
     fc6:	10 92 12 38 	sts	0x3812, r1	; 0x803812 <__data_end>
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <displayOnOff+0x1e>
	}
	else {
		writecommand(SSD1306_DISPLAYOFF);                   //Sleep the OLED
     fcc:	8e ea       	ldi	r24, 0xAE	; 174
     fce:	0e 94 79 07 	call	0xef2	; 0xef2 <writecommand>
		displaySleep = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 12 38 	sts	0x3812, r24	; 0x803812 <__data_end>
	}
	
	SPI0_CTRLB = SPI_BUFEN_bm;								//Resume SPI buffer mode
     fd8:	80 e8       	ldi	r24, 0x80	; 128
     fda:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <jumpVelocity+0x7f5999>
     fde:	08 95       	ret

00000fe0 <gameSetup>:
uint8_t obstacleTimerBase = 80;							//Default timer base Lower= harder


void gameSetup() {							//This function is called once per boot/program

	setScrollDirection(horizontal);
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	0e 94 17 06 	call	0xc2e	; 0xc2e <setScrollDirection>
	gameState = stateTitle;
     fe6:	10 92 4c 3c 	sts	0x3C4C, r1	; 0x803c4c <gameState>
     fea:	08 95       	ret

00000fec <nextRow>:
	
}

void nextRow() {

	rowLoad(tileData, tileMap + 16, draw);
     fec:	4f ef       	ldi	r20, 0xFF	; 255
     fee:	6f e6       	ldi	r22, 0x6F	; 111
     ff0:	7c e3       	ldi	r23, 0x3C	; 60
     ff2:	86 ed       	ldi	r24, 0xD6	; 214
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 8a 04 	call	0x914	; 0x914 <rowLoad>
	memset(&tileMap[16], ' ', 16);
     ffa:	40 e1       	ldi	r20, 0x10	; 16
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	60 e2       	ldi	r22, 0x20	; 32
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	8f e6       	ldi	r24, 0x6F	; 111
    1004:	9c e3       	ldi	r25, 0x3C	; 60
    1006:	0e 94 d7 16 	call	0x2dae	; 0x2dae <memset>
    100a:	08 95       	ret

0000100c <setGoal>:
				
}

void setGoal(uint8_t theGoal) {

	distance = 0;
    100c:	10 92 5f 3d 	sts	0x3D5F, r1	; 0x803d5f <distance>
	distanceGoal = theGoal;
    1010:	80 93 3f 3e 	sts	0x3E3F, r24	; 0x803e3f <distanceGoal>
	byDistance = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 3b 3e 	sts	0x3E3B, r24	; 0x803e3b <byDistance>
    101a:	08 95       	ret

0000101c <phaseStart>:
	
}

void phaseStart() {				//After CHECKPOINT message scrolls off, decide what to do in this phase (could also be a boss if I have time)

	skyEnemies = 0;
    101c:	10 92 4b 3c 	sts	0x3C4B, r1	; 0x803c4b <skyEnemies>
	byDistance = 0;				//Goal based (not scroll based) advancement unless otherwise noted
    1020:	10 92 3b 3e 	sts	0x3E3B, r1	; 0x803e3b <byDistance>
	distance = 0;
    1024:	10 92 5f 3d 	sts	0x3D5F, r1	; 0x803d5f <distance>
	distanceGoal = 10;			
    1028:	8a e0       	ldi	r24, 0x0A	; 10
    102a:	80 93 3f 3e 	sts	0x3E3F, r24	; 0x803e3f <distanceGoal>
		//obstacleTimer = obstacleTimerBase;
		//setGoal(4);	
		//return;
	//}

	obstacleTimer = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <obstacleTimer>

	switch(checkPoint) {
    1034:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <checkPoint>
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	99 f1       	breq	.+102    	; 0x10a2 <phaseStart+0x86>
    103c:	28 f4       	brcc	.+10     	; 0x1048 <phaseStart+0x2c>
    103e:	88 23       	and	r24, r24
    1040:	49 f0       	breq	.+18     	; 0x1054 <phaseStart+0x38>
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	e1 f0       	breq	.+56     	; 0x107e <phaseStart+0x62>
    1046:	62 c0       	rjmp	.+196    	; 0x110c <phaseStart+0xf0>
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	e9 f1       	breq	.+122    	; 0x10c6 <phaseStart+0xaa>
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	09 f4       	brne	.+2      	; 0x1052 <phaseStart+0x36>
    1050:	4c c0       	rjmp	.+152    	; 0x10ea <phaseStart+0xce>
    1052:	5c c0       	rjmp	.+184    	; 0x110c <phaseStart+0xf0>
					
		case 0:
			stagePhase = phaseObstacles;
    1054:	80 e1       	ldi	r24, 0x10	; 16
    1056:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <stagePhase>
			eventGoal = 40;
    105a:	88 e2       	ldi	r24, 0x28	; 40
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <eventGoal>
    1062:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <eventGoal+0x1>

			numberSpawned = 0;
    1066:	10 92 61 3d 	sts	0x3D61, r1	; 0x803d61 <numberSpawned>
			spawnPerWave = 2;
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	80 93 40 3e 	sts	0x3E40, r24	; 0x803e40 <spawnPerWave>
			numberOfWaves = 3;
    1070:	83 e0       	ldi	r24, 0x03	; 3
    1072:	80 93 69 3d 	sts	0x3D69, r24	; 0x803d69 <numberOfWaves>
			setGoal(4);	
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	0e 94 06 08 	call	0x100c	; 0x100c <setGoal>
		break;
    107c:	47 c0       	rjmp	.+142    	; 0x110c <phaseStart+0xf0>
				
		case 1:
			stagePhase = phaseUFOs;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <stagePhase>
			eventGoal = 80;
    1084:	80 e5       	ldi	r24, 0x50	; 80
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <eventGoal>
    108c:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <eventGoal+0x1>

			numberSpawned = 0;
    1090:	10 92 61 3d 	sts	0x3D61, r1	; 0x803d61 <numberSpawned>
			spawnPerWave = 2;
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	80 93 40 3e 	sts	0x3E40, r24	; 0x803e40 <spawnPerWave>
			numberOfWaves = 3;
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	80 93 69 3d 	sts	0x3D69, r24	; 0x803d69 <numberOfWaves>
		break;
    10a0:	35 c0       	rjmp	.+106    	; 0x110c <phaseStart+0xf0>
		
		case 2:
			stagePhase = phaseUFOs | phaseObstacles;
    10a2:	81 e1       	ldi	r24, 0x11	; 17
    10a4:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <stagePhase>
			eventGoal = 70;
    10a8:	86 e4       	ldi	r24, 0x46	; 70
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <eventGoal>
    10b0:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <eventGoal+0x1>

			numberSpawned = 0;
    10b4:	10 92 61 3d 	sts	0x3D61, r1	; 0x803d61 <numberSpawned>
			spawnPerWave = 2;
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	80 93 40 3e 	sts	0x3E40, r24	; 0x803e40 <spawnPerWave>
			numberOfWaves = 3;		
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	80 93 69 3d 	sts	0x3D69, r24	; 0x803d69 <numberOfWaves>
		break;	
    10c4:	23 c0       	rjmp	.+70     	; 0x110c <phaseStart+0xf0>
		
		case 3:
			stagePhase = phaseBalls;
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <stagePhase>
			eventGoal = 70;
    10cc:	86 e4       	ldi	r24, 0x46	; 70
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <eventGoal>
    10d4:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <eventGoal+0x1>

			numberSpawned = 0;
    10d8:	10 92 61 3d 	sts	0x3D61, r1	; 0x803d61 <numberSpawned>
			spawnPerWave = 3;
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	80 93 40 3e 	sts	0x3E40, r24	; 0x803e40 <spawnPerWave>
			numberOfWaves = 4;		
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	80 93 69 3d 	sts	0x3D69, r24	; 0x803d69 <numberOfWaves>
		break;	
    10e8:	11 c0       	rjmp	.+34     	; 0x110c <phaseStart+0xf0>
		
		case 4:
			stagePhase = phaseBalls | phaseUFOs | phaseObstacles;
    10ea:	83 e1       	ldi	r24, 0x13	; 19
    10ec:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <stagePhase>
			eventGoal = 50;
    10f0:	82 e3       	ldi	r24, 0x32	; 50
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	80 93 1f 38 	sts	0x381F, r24	; 0x80381f <eventGoal>
    10f8:	90 93 20 38 	sts	0x3820, r25	; 0x803820 <eventGoal+0x1>

			numberSpawned = 0;
    10fc:	10 92 61 3d 	sts	0x3D61, r1	; 0x803d61 <numberSpawned>
			spawnPerWave = 4;
    1100:	84 e0       	ldi	r24, 0x04	; 4
    1102:	80 93 40 3e 	sts	0x3E40, r24	; 0x803e40 <spawnPerWave>
			numberOfWaves = 5;		
    1106:	85 e0       	ldi	r24, 0x05	; 5
    1108:	80 93 69 3d 	sts	0x3D69, r24	; 0x803d69 <numberOfWaves>
		break;						
		
	}

	eventTimer = 1;				//Make something happen RIGHT AWAY (if that type of phase)
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <eventTimer>
    1114:	90 93 22 38 	sts	0x3822, r25	; 0x803822 <eventTimer+0x1>
    1118:	08 95       	ret

0000111a <spawnObstacle>:

	//addSeed(gamePad);			//Use controls to help random seed
	
}

void spawnObstacle(int16_t xPos, uint8_t whichOne) {
    111a:	ac 01       	movw	r20, r24

	uint8_t yPos = 48;

	switch(whichOne) {
    111c:	62 30       	cpi	r22, 0x02	; 2
    111e:	b9 f0       	breq	.+46     	; 0x114e <spawnObstacle+0x34>
    1120:	18 f4       	brcc	.+6      	; 0x1128 <spawnObstacle+0xe>
    1122:	61 30       	cpi	r22, 0x01	; 1
    1124:	31 f0       	breq	.+12     	; 0x1132 <spawnObstacle+0x18>
    1126:	3d c0       	rjmp	.+122    	; 0x11a2 <spawnObstacle+0x88>
    1128:	64 30       	cpi	r22, 0x04	; 4
    112a:	f9 f0       	breq	.+62     	; 0x116a <spawnObstacle+0x50>
    112c:	68 30       	cpi	r22, 0x08	; 8
    112e:	59 f1       	breq	.+86     	; 0x1186 <spawnObstacle+0x6c>
    1130:	38 c0       	rjmp	.+112    	; 0x11a2 <spawnObstacle+0x88>
		case enemySmallRock:
			enemy[enemyPointer].gfx = smallRock;		//This sprite graphic
    1132:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    1136:	8d e0       	ldi	r24, 0x0D	; 13
    1138:	e8 9f       	mul	r30, r24
    113a:	f0 01       	movw	r30, r0
    113c:	11 24       	eor	r1, r1
    113e:	e5 59       	subi	r30, 0x95	; 149
    1140:	f2 4c       	sbci	r31, 0xC2	; 194
    1142:	8c e1       	ldi	r24, 0x1C	; 28
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	80 83       	st	Z, r24
    1148:	91 83       	std	Z+1, r25	; 0x01
	
}

void spawnObstacle(int16_t xPos, uint8_t whichOne) {

	uint8_t yPos = 48;
    114a:	20 e3       	ldi	r18, 0x30	; 48

	switch(whichOne) {
		case enemySmallRock:
			enemy[enemyPointer].gfx = smallRock;		//This sprite graphic
		break;
    114c:	2b c0       	rjmp	.+86     	; 0x11a4 <spawnObstacle+0x8a>
		
		case enemyBigRock:
			enemy[enemyPointer].gfx = largeRock;		//This sprite graphic
    114e:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    1152:	8d e0       	ldi	r24, 0x0D	; 13
    1154:	e8 9f       	mul	r30, r24
    1156:	f0 01       	movw	r30, r0
    1158:	11 24       	eor	r1, r1
    115a:	e5 59       	subi	r30, 0x95	; 149
    115c:	f2 4c       	sbci	r31, 0xC2	; 194
    115e:	8a ed       	ldi	r24, 0xDA	; 218
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	80 83       	st	Z, r24
    1164:	91 83       	std	Z+1, r25	; 0x01
	
}

void spawnObstacle(int16_t xPos, uint8_t whichOne) {

	uint8_t yPos = 48;
    1166:	20 e3       	ldi	r18, 0x30	; 48
			enemy[enemyPointer].gfx = smallRock;		//This sprite graphic
		break;
		
		case enemyBigRock:
			enemy[enemyPointer].gfx = largeRock;		//This sprite graphic
		break;
    1168:	1d c0       	rjmp	.+58     	; 0x11a4 <spawnObstacle+0x8a>
		
		case enemySmallPit:
			enemy[enemyPointer].gfx = smallPit;			//This sprite graphic
    116a:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    116e:	8d e0       	ldi	r24, 0x0D	; 13
    1170:	e8 9f       	mul	r30, r24
    1172:	f0 01       	movw	r30, r0
    1174:	11 24       	eor	r1, r1
    1176:	e5 59       	subi	r30, 0x95	; 149
    1178:	f2 4c       	sbci	r31, 0xC2	; 194
    117a:	88 eb       	ldi	r24, 0xB8	; 184
    117c:	92 e0       	ldi	r25, 0x02	; 2
    117e:	80 83       	st	Z, r24
    1180:	91 83       	std	Z+1, r25	; 0x01
			yPos = 56;
    1182:	28 e3       	ldi	r18, 0x38	; 56
		break;
    1184:	0f c0       	rjmp	.+30     	; 0x11a4 <spawnObstacle+0x8a>
		
		case enemyBigPit:
			enemy[enemyPointer].gfx = largePit;			//This sprite graphic
    1186:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    118a:	8d e0       	ldi	r24, 0x0D	; 13
    118c:	e8 9f       	mul	r30, r24
    118e:	f0 01       	movw	r30, r0
    1190:	11 24       	eor	r1, r1
    1192:	e5 59       	subi	r30, 0x95	; 149
    1194:	f2 4c       	sbci	r31, 0xC2	; 194
    1196:	86 e8       	ldi	r24, 0x86	; 134
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	80 83       	st	Z, r24
    119c:	91 83       	std	Z+1, r25	; 0x01
			yPos = 56;
    119e:	28 e3       	ldi	r18, 0x38	; 56
		break;
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <spawnObstacle+0x8a>
	
}

void spawnObstacle(int16_t xPos, uint8_t whichOne) {

	uint8_t yPos = 48;
    11a2:	20 e3       	ldi	r18, 0x30	; 48
			enemy[enemyPointer].gfx = largePit;			//This sprite graphic
			yPos = 56;
		break;
	}
	
	enemy[enemyPointer].x = xPos;	
    11a4:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <enemyPointer>
    11a8:	8d e0       	ldi	r24, 0x0D	; 13
    11aa:	98 9f       	mul	r25, r24
    11ac:	f0 01       	movw	r30, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	e5 59       	subi	r30, 0x95	; 149
    11b2:	f2 4c       	sbci	r31, 0xC2	; 194
    11b4:	42 83       	std	Z+2, r20	; 0x02
    11b6:	53 83       	std	Z+3, r21	; 0x03
	enemy[enemyPointer].y = yPos;
    11b8:	24 83       	std	Z+4, r18	; 0x04
	enemy[enemyPointer].type = whichOne;
    11ba:	65 83       	std	Z+5, r22	; 0x05
	enemy[enemyPointer].grounded = 1;				//Stuck to ground
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	82 87       	std	Z+10, r24	; 0x0a
	
	if (++enemyPointer == maxEnemies) {				//Cycle baddies
    11c0:	89 0f       	add	r24, r25
    11c2:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <enemyPointer>
    11c6:	80 31       	cpi	r24, 0x10	; 16
    11c8:	11 f4       	brne	.+4      	; 0x11ce <spawnObstacle+0xb4>
		enemyPointer = 0;
    11ca:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <enemyPointer>
    11ce:	08 95       	ret

000011d0 <spawnShot>:

}

void spawnShot(int8_t x, int8_t y, uint8_t whichType) {
	
	switch(whichType) {
    11d0:	40 38       	cpi	r20, 0x80	; 128
    11d2:	19 f0       	breq	.+6      	; 0x11da <spawnShot+0xa>
    11d4:	40 39       	cpi	r20, 0x90	; 144
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <spawnShot+0x24>
    11d8:	19 c0       	rjmp	.+50     	; 0x120c <spawnShot+0x3c>
		case enemyWaveShot:
			enemy[enemyPointer].gfx = evilWave;		//This sprite graphic
    11da:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    11de:	2d e0       	ldi	r18, 0x0D	; 13
    11e0:	e2 9f       	mul	r30, r18
    11e2:	f0 01       	movw	r30, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	e5 59       	subi	r30, 0x95	; 149
    11e8:	f2 4c       	sbci	r31, 0xC2	; 194
    11ea:	20 e1       	ldi	r18, 0x10	; 16
    11ec:	32 e0       	ldi	r19, 0x02	; 2
    11ee:	20 83       	st	Z, r18
    11f0:	31 83       	std	Z+1, r19	; 0x01
		break;
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <spawnShot+0x3c>
		
		case enemyBombShot:
			enemy[enemyPointer].gfx = evilBomb;		//This sprite graphic
    11f4:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    11f8:	9d e0       	ldi	r25, 0x0D	; 13
    11fa:	e9 9f       	mul	r30, r25
    11fc:	f0 01       	movw	r30, r0
    11fe:	11 24       	eor	r1, r1
    1200:	e5 59       	subi	r30, 0x95	; 149
    1202:	f2 4c       	sbci	r31, 0xC2	; 194
    1204:	2e ef       	ldi	r18, 0xFE	; 254
    1206:	31 e0       	ldi	r19, 0x01	; 1
    1208:	20 83       	st	Z, r18
    120a:	31 83       	std	Z+1, r19	; 0x01
		break;

	}
	
	enemy[enemyPointer].x = x;
    120c:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <enemyPointer>
    1210:	2d e0       	ldi	r18, 0x0D	; 13
    1212:	92 9f       	mul	r25, r18
    1214:	f0 01       	movw	r30, r0
    1216:	11 24       	eor	r1, r1
    1218:	e5 59       	subi	r30, 0x95	; 149
    121a:	f2 4c       	sbci	r31, 0xC2	; 194
    121c:	28 2f       	mov	r18, r24
    121e:	88 0f       	add	r24, r24
    1220:	33 0b       	sbc	r19, r19
    1222:	22 83       	std	Z+2, r18	; 0x02
    1224:	33 83       	std	Z+3, r19	; 0x03
	enemy[enemyPointer].y = y;
    1226:	64 83       	std	Z+4, r22	; 0x04
	enemy[enemyPointer].type = whichType;
    1228:	45 83       	std	Z+5, r20	; 0x05
	enemy[enemyPointer].grounded = 0;				//Not stuck to ground
    122a:	12 86       	std	Z+10, r1	; 0x0a
	
	if (++enemyPointer == maxEnemies) {				//Cycle baddies
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 0f       	add	r24, r25
    1230:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <enemyPointer>
    1234:	80 31       	cpi	r24, 0x10	; 16
    1236:	11 f4       	brne	.+4      	; 0x123c <spawnShot+0x6c>
		enemyPointer = 0;
    1238:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <enemyPointer>
    123c:	08 95       	ret

0000123e <spawnEnemy>:
	}	
	
}

void spawnEnemy(int16_t x, int8_t y, int8_t dir, uint8_t whichType) {
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	ec 01       	movw	r28, r24

	switch(whichType) {
    1244:	20 31       	cpi	r18, 0x10	; 16
    1246:	19 f0       	breq	.+6      	; 0x124e <spawnEnemy+0x10>
    1248:	20 32       	cpi	r18, 0x20	; 32
    124a:	71 f0       	breq	.+28     	; 0x1268 <spawnEnemy+0x2a>
    124c:	19 c0       	rjmp	.+50     	; 0x1280 <spawnEnemy+0x42>
		case enemyUFO:	
			enemy[enemyPointer].gfx = ufo;					//This sprite graphic
    124e:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    1252:	8d e0       	ldi	r24, 0x0D	; 13
    1254:	e8 9f       	mul	r30, r24
    1256:	f0 01       	movw	r30, r0
    1258:	11 24       	eor	r1, r1
    125a:	e5 59       	subi	r30, 0x95	; 149
    125c:	f2 4c       	sbci	r31, 0xC2	; 194
    125e:	84 e6       	ldi	r24, 0x64	; 100
    1260:	92 e0       	ldi	r25, 0x02	; 2
    1262:	80 83       	st	Z, r24
    1264:	91 83       	std	Z+1, r25	; 0x01
		break;
    1266:	0c c0       	rjmp	.+24     	; 0x1280 <spawnEnemy+0x42>
		case enemyBalls:
			enemy[enemyPointer].gfx = balls;					//This sprite graphic
    1268:	e0 91 1d 38 	lds	r30, 0x381D	; 0x80381d <enemyPointer>
    126c:	8d e0       	ldi	r24, 0x0D	; 13
    126e:	e8 9f       	mul	r30, r24
    1270:	f0 01       	movw	r30, r0
    1272:	11 24       	eor	r1, r1
    1274:	e5 59       	subi	r30, 0x95	; 149
    1276:	f2 4c       	sbci	r31, 0xC2	; 194
    1278:	82 e2       	ldi	r24, 0x22	; 34
    127a:	92 e0       	ldi	r25, 0x02	; 2
    127c:	80 83       	st	Z, r24
    127e:	91 83       	std	Z+1, r25	; 0x01
		break;		
	}

	enemy[enemyPointer].timer = attackSpeed;
    1280:	90 91 1d 38 	lds	r25, 0x381D	; 0x80381d <enemyPointer>
    1284:	8d e0       	ldi	r24, 0x0D	; 13
    1286:	98 9f       	mul	r25, r24
    1288:	f0 01       	movw	r30, r0
    128a:	11 24       	eor	r1, r1
    128c:	e5 59       	subi	r30, 0x95	; 149
    128e:	f2 4c       	sbci	r31, 0xC2	; 194
    1290:	a0 91 0f 38 	lds	r26, 0x380F	; 0x80380f <attackSpeed>
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	a3 87       	std	Z+11, r26	; 0x0b
    1298:	b4 87       	std	Z+12, r27	; 0x0c
	
	enemy[enemyPointer].x = x;
    129a:	c2 83       	std	Z+2, r28	; 0x02
    129c:	d3 83       	std	Z+3, r29	; 0x03
	enemy[enemyPointer].y = y;
    129e:	64 83       	std	Z+4, r22	; 0x04
	enemy[enemyPointer].dir = dir;
    12a0:	47 83       	std	Z+7, r20	; 0x07
	
	enemy[enemyPointer].type = whichType;
    12a2:	25 83       	std	Z+5, r18	; 0x05
	enemy[enemyPointer].grounded = 0;				//Not stuck to ground
    12a4:	12 86       	std	Z+10, r1	; 0x0a
	
	if (++enemyPointer == maxEnemies) {				//Cycle baddies
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	89 0f       	add	r24, r25
    12aa:	80 93 1d 38 	sts	0x381D, r24	; 0x80381d <enemyPointer>
    12ae:	80 31       	cpi	r24, 0x10	; 16
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <spawnEnemy+0x78>
		enemyPointer = 0;
    12b2:	10 92 1d 38 	sts	0x381D, r1	; 0x80381d <enemyPointer>
	}
		
}
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <shotLogic>:

void shotLogic() {
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
	
	for (int g = 0 ; g < 3 ; g++) {					//Scan through the 3 possible hero and baddie shots (vertical, not the buggie hori blaster)		
    12c6:	c0 e0       	ldi	r28, 0x00	; 0
    12c8:	d0 e0       	ldi	r29, 0x00	; 0
    12ca:	30 c0       	rjmp	.+96     	; 0x132c <shotLogic+0x70>
		if (heroShots[g].y != spriteOff) {
    12cc:	fe 01       	movw	r30, r28
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ec 0f       	add	r30, r28
    12d4:	fd 1f       	adc	r31, r29
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	e3 5b       	subi	r30, 0xB3	; 179
    12dc:	f3 4c       	sbci	r31, 0xC3	; 195
    12de:	42 81       	ldd	r20, Z+2	; 0x02
    12e0:	53 81       	ldd	r21, Z+3	; 0x03
    12e2:	40 38       	cpi	r20, 0x80	; 128
    12e4:	2f ef       	ldi	r18, 0xFF	; 255
    12e6:	52 07       	cpc	r21, r18
    12e8:	01 f1       	breq	.+64     	; 0x132a <shotLogic+0x6e>
			drawSprite(dualShot, heroShots[g].x, heroShots[g].y, 0, 1);
    12ea:	7e 01       	movw	r14, r28
    12ec:	ee 0c       	add	r14, r14
    12ee:	ff 1c       	adc	r15, r15
    12f0:	ec 0e       	add	r14, r28
    12f2:	fd 1e       	adc	r15, r29
    12f4:	c7 01       	movw	r24, r14
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	fc 01       	movw	r30, r24
    12fc:	e3 5b       	subi	r30, 0xB3	; 179
    12fe:	f3 4c       	sbci	r31, 0xC3	; 195
    1300:	7f 01       	movw	r14, r30
    1302:	60 81       	ld	r22, Z
    1304:	01 e0       	ldi	r16, 0x01	; 1
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	8e e3       	ldi	r24, 0x3E	; 62
    130a:	93 e0       	ldi	r25, 0x03	; 3
    130c:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			if (--heroShots[g].y == -8) {
    1310:	f7 01       	movw	r30, r14
    1312:	82 81       	ldd	r24, Z+2	; 0x02
    1314:	93 81       	ldd	r25, Z+3	; 0x03
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	82 83       	std	Z+2, r24	; 0x02
    131a:	93 83       	std	Z+3, r25	; 0x03
    131c:	08 96       	adiw	r24, 0x08	; 8
    131e:	29 f4       	brne	.+10     	; 0x132a <shotLogic+0x6e>
				heroShots[g].y = spriteOff;
    1320:	f7 01       	movw	r30, r14
    1322:	80 e8       	ldi	r24, 0x80	; 128
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	82 83       	std	Z+2, r24	; 0x02
    1328:	93 83       	std	Z+3, r25	; 0x03
		
}

void shotLogic() {
	
	for (int g = 0 ; g < 3 ; g++) {					//Scan through the 3 possible hero and baddie shots (vertical, not the buggie hori blaster)		
    132a:	21 96       	adiw	r28, 0x01	; 1
    132c:	c3 30       	cpi	r28, 0x03	; 3
    132e:	d1 05       	cpc	r29, r1
    1330:	6c f2       	brlt	.-102    	; 0x12cc <shotLogic+0x10>
				heroShots[g].y = spriteOff;
			}
		}			
	}
	
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	08 95       	ret

0000133e <gotoSleep>:

void gotoSleep() {

	sleepState = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <sleepState>
	displayOnOff(0);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 dd 07 	call	0xfba	; 0xfba <displayOnOff>
	ledState(0);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <ledState>
    1350:	08 95       	ret

00001352 <getGround>:

}

uint8_t getGround() {

	uint8_t randomSlope = getRandom(0x01);			//Ground either slopes up or down
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
	
	if (randomSlope) {							//Positive? Slope up
    1358:	88 23       	and	r24, r24
    135a:	41 f0       	breq	.+16     	; 0x136c <getGround+0x1a>
		if (groundSlope > 0) {
    135c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <groundSlope>
    1360:	88 23       	and	r24, r24
    1362:	59 f0       	breq	.+22     	; 0x137a <getGround+0x28>
			groundSlope--;
    1364:	81 50       	subi	r24, 0x01	; 1
    1366:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <groundSlope>
    136a:	07 c0       	rjmp	.+14     	; 0x137a <getGround+0x28>
		}	
	}
	else {
		if (groundSlope < 2) {
    136c:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <groundSlope>
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	18 f4       	brcc	.+6      	; 0x137a <getGround+0x28>
			groundSlope++;
    1374:	8f 5f       	subi	r24, 0xFF	; 255
    1376:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <groundSlope>
		}		
	}
	
	return groundSlope;
	
}
    137a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <groundSlope>
    137e:	08 95       	ret

00001380 <killPlayer>:
	
}

void killPlayer() {

	playerFrame = 0;
    1380:	10 92 26 38 	sts	0x3826, r1	; 0x803826 <playerFrame>
    1384:	10 92 27 38 	sts	0x3827, r1	; 0x803827 <playerFrame+0x1>
	playerState = playerExploding;
    1388:	80 e1       	ldi	r24, 0x10	; 16
    138a:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <playerState>
	playerTimer = 5;
    138e:	85 e0       	ldi	r24, 0x05	; 5
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <playerTimer>
    1396:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <playerTimer+0x1>
    139a:	08 95       	ret

0000139c <enemies>:
	ledState(0);
	//Roll around to the main loop which will put us to sleep

}

void enemies() {
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	cf 92       	push	r12
    13a2:	df 92       	push	r13
    13a4:	ef 92       	push	r14
    13a6:	ff 92       	push	r15
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29

	for (int g = 0 ; g < maxEnemies ; g++) {
    13b0:	e1 2c       	mov	r14, r1
    13b2:	f1 2c       	mov	r15, r1
    13b4:	4b c4       	rjmp	.+2198   	; 0x1c4c <enemies+0x8b0>

		if (enemy[g].y != spriteOff) {
    13b6:	8d e0       	ldi	r24, 0x0D	; 13
    13b8:	8e 9d       	mul	r24, r14
    13ba:	f0 01       	movw	r30, r0
    13bc:	8f 9d       	mul	r24, r15
    13be:	f0 0d       	add	r31, r0
    13c0:	11 24       	eor	r1, r1
    13c2:	e5 59       	subi	r30, 0x95	; 149
    13c4:	f2 4c       	sbci	r31, 0xC2	; 194
    13c6:	44 81       	ldd	r20, Z+4	; 0x04
    13c8:	40 38       	cpi	r20, 0x80	; 128
    13ca:	09 f4       	brne	.+2      	; 0x13ce <enemies+0x32>
    13cc:	3c c4       	rjmp	.+2168   	; 0x1c46 <enemies+0x8aa>

			drawSprite(enemy[g].gfx, enemy[g].x, enemy[g].y, enemy[g].frame, enemy[g].mirror);
    13ce:	ef 01       	movw	r28, r30
    13d0:	62 81       	ldd	r22, Z+2	; 0x02
    13d2:	06 81       	ldd	r16, Z+6	; 0x06
    13d4:	21 85       	ldd	r18, Z+9	; 0x09
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>

			int8_t xSize = pgm_read_byte(enemy[g].gfx);
    13de:	e8 81       	ld	r30, Y
    13e0:	f9 81       	ldd	r31, Y+1	; 0x01
    13e2:	04 91       	lpm	r16, Z
    13e4:	d0 2e       	mov	r13, r16
			int8_t ySize = pgm_read_byte(enemy[g].gfx + 1);
    13e6:	31 96       	adiw	r30, 0x01	; 1
    13e8:	14 91       	lpm	r17, Z
    13ea:	b1 2e       	mov	r11, r17
			
			uint8_t xCollide = 0;													//X and Y collision flags for enemy-player
			uint8_t yCollide = 0;
			uint8_t blasted = 0;													//Collision flag for enemy-blaster (horizontal shot)
			
			if (enemy[g].x < (bugX + 24) && bugX < (enemy[g].x + xSize)) {			//Check the X and Y collision flags for enemies (including shots) and Player Buggie
    13ec:	2a 81       	ldd	r18, Y+2	; 0x02
    13ee:	3b 81       	ldd	r19, Y+3	; 0x03
    13f0:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <bugX>
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	ac 01       	movw	r20, r24
    13f8:	48 5e       	subi	r20, 0xE8	; 232
    13fa:	5f 4f       	sbci	r21, 0xFF	; 255
    13fc:	24 17       	cp	r18, r20
    13fe:	35 07       	cpc	r19, r21
    1400:	4c f4       	brge	.+18     	; 0x1414 <enemies+0x78>
    1402:	20 0f       	add	r18, r16
    1404:	31 1d       	adc	r19, r1
    1406:	07 fd       	sbrc	r16, 7
    1408:	3a 95       	dec	r19
    140a:	82 17       	cp	r24, r18
    140c:	93 07       	cpc	r25, r19
    140e:	24 f0       	brlt	.+8      	; 0x1418 <enemies+0x7c>
			drawSprite(enemy[g].gfx, enemy[g].x, enemy[g].y, enemy[g].frame, enemy[g].mirror);

			int8_t xSize = pgm_read_byte(enemy[g].gfx);
			int8_t ySize = pgm_read_byte(enemy[g].gfx + 1);
			
			uint8_t xCollide = 0;													//X and Y collision flags for enemy-player
    1410:	c1 2c       	mov	r12, r1
    1412:	04 c0       	rjmp	.+8      	; 0x141c <enemies+0x80>
    1414:	c1 2c       	mov	r12, r1
    1416:	02 c0       	rjmp	.+4      	; 0x141c <enemies+0x80>
			uint8_t yCollide = 0;
			uint8_t blasted = 0;													//Collision flag for enemy-blaster (horizontal shot)
			
			if (enemy[g].x < (bugX + 24) && bugX < (enemy[g].x + xSize)) {			//Check the X and Y collision flags for enemies (including shots) and Player Buggie
				xCollide = 1;
    1418:	cc 24       	eor	r12, r12
    141a:	c3 94       	inc	r12
			}			

			if (enemy[g].y < (bugY + 8) && bugY < (enemy[g].y + ySize)) {
    141c:	8d e0       	ldi	r24, 0x0D	; 13
    141e:	8e 9d       	mul	r24, r14
    1420:	f0 01       	movw	r30, r0
    1422:	8f 9d       	mul	r24, r15
    1424:	f0 0d       	add	r31, r0
    1426:	11 24       	eor	r1, r1
    1428:	e5 59       	subi	r30, 0x95	; 149
    142a:	f2 4c       	sbci	r31, 0xC2	; 194
    142c:	84 81       	ldd	r24, Z+4	; 0x04
    142e:	08 2e       	mov	r0, r24
    1430:	00 0c       	add	r0, r0
    1432:	99 0b       	sbc	r25, r25
    1434:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <bugY>
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	48 5f       	subi	r20, 0xF8	; 248
    143e:	5f 4f       	sbci	r21, 0xFF	; 255
    1440:	84 17       	cp	r24, r20
    1442:	95 07       	cpc	r25, r21
    1444:	4c f4       	brge	.+18     	; 0x1458 <enemies+0xbc>
    1446:	81 0f       	add	r24, r17
    1448:	91 1d       	adc	r25, r1
    144a:	17 fd       	sbrc	r17, 7
    144c:	9a 95       	dec	r25
    144e:	28 17       	cp	r18, r24
    1450:	39 07       	cpc	r19, r25
    1452:	24 f0       	brlt	.+8      	; 0x145c <enemies+0xc0>

			int8_t xSize = pgm_read_byte(enemy[g].gfx);
			int8_t ySize = pgm_read_byte(enemy[g].gfx + 1);
			
			uint8_t xCollide = 0;													//X and Y collision flags for enemy-player
			uint8_t yCollide = 0;
    1454:	a1 2c       	mov	r10, r1
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <enemies+0xc4>
    1458:	a1 2c       	mov	r10, r1
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <enemies+0xc4>
			if (enemy[g].x < (bugX + 24) && bugX < (enemy[g].x + xSize)) {			//Check the X and Y collision flags for enemies (including shots) and Player Buggie
				xCollide = 1;
			}			

			if (enemy[g].y < (bugY + 8) && bugY < (enemy[g].y + ySize)) {
				yCollide = 1;
    145c:	aa 24       	eor	r10, r10
    145e:	a3 94       	inc	r10
			}	

			for (int h = 0 ; h < 3 ; h++) {											//Scan through the 3 possible hero vertical shots and check for collision against enemies
    1460:	c0 e0       	ldi	r28, 0x00	; 0
    1462:	d0 e0       	ldi	r29, 0x00	; 0
    1464:	70 c0       	rjmp	.+224    	; 0x1546 <enemies+0x1aa>
				if (heroShots[h].y != spriteOff) {
    1466:	de 01       	movw	r26, r28
    1468:	aa 0f       	add	r26, r26
    146a:	bb 1f       	adc	r27, r27
    146c:	ac 0f       	add	r26, r28
    146e:	bd 1f       	adc	r27, r29
    1470:	aa 0f       	add	r26, r26
    1472:	bb 1f       	adc	r27, r27
    1474:	a3 5b       	subi	r26, 0xB3	; 179
    1476:	b3 4c       	sbci	r27, 0xC3	; 195
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	2d 91       	ld	r18, X+
    147c:	3c 91       	ld	r19, X
    147e:	13 97       	sbiw	r26, 0x03	; 3
    1480:	20 38       	cpi	r18, 0x80	; 128
    1482:	4f ef       	ldi	r20, 0xFF	; 255
    1484:	34 07       	cpc	r19, r20
    1486:	09 f4       	brne	.+2      	; 0x148a <enemies+0xee>
    1488:	5d c0       	rjmp	.+186    	; 0x1544 <enemies+0x1a8>
					if (enemy[g].x < (heroShots[h].x + 8) && heroShots[h].x < (enemy[g].x + xSize)) {
    148a:	8d e0       	ldi	r24, 0x0D	; 13
    148c:	8e 9d       	mul	r24, r14
    148e:	f0 01       	movw	r30, r0
    1490:	8f 9d       	mul	r24, r15
    1492:	f0 0d       	add	r31, r0
    1494:	11 24       	eor	r1, r1
    1496:	e5 59       	subi	r30, 0x95	; 149
    1498:	f2 4c       	sbci	r31, 0xC2	; 194
    149a:	82 81       	ldd	r24, Z+2	; 0x02
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	fd 01       	movw	r30, r26
    14a0:	40 81       	ld	r20, Z
    14a2:	51 81       	ldd	r21, Z+1	; 0x01
    14a4:	ba 01       	movw	r22, r20
    14a6:	68 5f       	subi	r22, 0xF8	; 248
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	86 17       	cp	r24, r22
    14ac:	97 07       	cpc	r25, r23
    14ae:	0c f0       	brlt	.+2      	; 0x14b2 <enemies+0x116>
    14b0:	49 c0       	rjmp	.+146    	; 0x1544 <enemies+0x1a8>
    14b2:	8d 0d       	add	r24, r13
    14b4:	91 1d       	adc	r25, r1
    14b6:	d7 fc       	sbrc	r13, 7
    14b8:	9a 95       	dec	r25
    14ba:	48 17       	cp	r20, r24
    14bc:	59 07       	cpc	r21, r25
    14be:	0c f0       	brlt	.+2      	; 0x14c2 <enemies+0x126>
    14c0:	41 c0       	rjmp	.+130    	; 0x1544 <enemies+0x1a8>
						if (enemy[g].y < (heroShots[h].y + 8) && heroShots[h].y < (enemy[g].y + ySize)) {
    14c2:	8d e0       	ldi	r24, 0x0D	; 13
    14c4:	8e 9d       	mul	r24, r14
    14c6:	f0 01       	movw	r30, r0
    14c8:	8f 9d       	mul	r24, r15
    14ca:	f0 0d       	add	r31, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	e5 59       	subi	r30, 0x95	; 149
    14d0:	f2 4c       	sbci	r31, 0xC2	; 194
    14d2:	84 81       	ldd	r24, Z+4	; 0x04
    14d4:	08 2e       	mov	r0, r24
    14d6:	00 0c       	add	r0, r0
    14d8:	99 0b       	sbc	r25, r25
    14da:	a9 01       	movw	r20, r18
    14dc:	48 5f       	subi	r20, 0xF8	; 248
    14de:	5f 4f       	sbci	r21, 0xFF	; 255
    14e0:	84 17       	cp	r24, r20
    14e2:	95 07       	cpc	r25, r21
    14e4:	7c f5       	brge	.+94     	; 0x1544 <enemies+0x1a8>
    14e6:	8b 0d       	add	r24, r11
    14e8:	91 1d       	adc	r25, r1
    14ea:	b7 fc       	sbrc	r11, 7
    14ec:	9a 95       	dec	r25
    14ee:	28 17       	cp	r18, r24
    14f0:	39 07       	cpc	r19, r25
    14f2:	44 f5       	brge	.+80     	; 0x1544 <enemies+0x1a8>
							enemy[g].y = spriteOff;									//Kill enemy
    14f4:	8d e0       	ldi	r24, 0x0D	; 13
    14f6:	8e 9d       	mul	r24, r14
    14f8:	f0 01       	movw	r30, r0
    14fa:	8f 9d       	mul	r24, r15
    14fc:	f0 0d       	add	r31, r0
    14fe:	11 24       	eor	r1, r1
    1500:	e5 59       	subi	r30, 0x95	; 149
    1502:	f2 4c       	sbci	r31, 0xC2	; 194
    1504:	80 e8       	ldi	r24, 0x80	; 128
    1506:	84 83       	std	Z+4, r24	; 0x04
							if (enemy[g].type & skyMask) {							//Was this a sky enemy? (not a projectile)
    1508:	85 81       	ldd	r24, Z+5	; 0x05
    150a:	80 77       	andi	r24, 0x70	; 112
    150c:	29 f0       	breq	.+10     	; 0x1518 <enemies+0x17c>
								skyEnemies--;										//Decrement their counter
    150e:	80 91 4b 3c 	lds	r24, 0x3C4B	; 0x803c4b <skyEnemies>
    1512:	81 50       	subi	r24, 0x01	; 1
    1514:	80 93 4b 3c 	sts	0x3C4B, r24	; 0x803c4b <skyEnemies>
							}
							heroShots[h].y = spriteOff;								//Despawn hero shot
    1518:	fe 01       	movw	r30, r28
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	ec 0f       	add	r30, r28
    1520:	fd 1f       	adc	r31, r29
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	e3 5b       	subi	r30, 0xB3	; 179
    1528:	f3 4c       	sbci	r31, 0xC3	; 195
    152a:	80 e8       	ldi	r24, 0x80	; 128
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	82 83       	std	Z+2, r24	; 0x02
    1530:	93 83       	std	Z+3, r25	; 0x03
							tone(700, 300, 9, -1);	
    1532:	2f ef       	ldi	r18, 0xFF	; 255
    1534:	3f ef       	ldi	r19, 0xFF	; 255
    1536:	49 e0       	ldi	r20, 0x09	; 9
    1538:	6c e2       	ldi	r22, 0x2C	; 44
    153a:	71 e0       	ldi	r23, 0x01	; 1
    153c:	8c eb       	ldi	r24, 0xBC	; 188
    153e:	92 e0       	ldi	r25, 0x02	; 2
    1540:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>

			if (enemy[g].y < (bugY + 8) && bugY < (enemy[g].y + ySize)) {
				yCollide = 1;
			}	

			for (int h = 0 ; h < 3 ; h++) {											//Scan through the 3 possible hero vertical shots and check for collision against enemies
    1544:	21 96       	adiw	r28, 0x01	; 1
    1546:	c3 30       	cpi	r28, 0x03	; 3
    1548:	d1 05       	cpc	r29, r1
    154a:	0c f4       	brge	.+2      	; 0x154e <enemies+0x1b2>
    154c:	8c cf       	rjmp	.-232    	; 0x1466 <enemies+0xca>
						}
					}
				}
			}
			
			if (blasterX != spriteOff) {
    154e:	90 91 02 38 	lds	r25, 0x3802	; 0x803802 <blasterX>
    1552:	90 38       	cpi	r25, 0x80	; 128
    1554:	c1 f1       	breq	.+112    	; 0x15c6 <enemies+0x22a>
				if (enemy[g].x < (blasterX + 16) && blasterX < (enemy[g].x + xSize)) {			//Check the X and Y collision flags for enemies (including shots) and Horizontal Blaster Shot
    1556:	8d e0       	ldi	r24, 0x0D	; 13
    1558:	8e 9d       	mul	r24, r14
    155a:	f0 01       	movw	r30, r0
    155c:	8f 9d       	mul	r24, r15
    155e:	f0 0d       	add	r31, r0
    1560:	11 24       	eor	r1, r1
    1562:	e5 59       	subi	r30, 0x95	; 149
    1564:	f2 4c       	sbci	r31, 0xC2	; 194
    1566:	22 81       	ldd	r18, Z+2	; 0x02
    1568:	33 81       	ldd	r19, Z+3	; 0x03
    156a:	49 2f       	mov	r20, r25
    156c:	09 2e       	mov	r0, r25
    156e:	00 0c       	add	r0, r0
    1570:	55 0b       	sbc	r21, r21
    1572:	ba 01       	movw	r22, r20
    1574:	60 5f       	subi	r22, 0xF0	; 240
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	26 17       	cp	r18, r22
    157a:	37 07       	cpc	r19, r23
    157c:	34 f5       	brge	.+76     	; 0x15ca <enemies+0x22e>
    157e:	20 0f       	add	r18, r16
    1580:	31 1d       	adc	r19, r1
    1582:	07 fd       	sbrc	r16, 7
    1584:	3a 95       	dec	r19
    1586:	42 17       	cp	r20, r18
    1588:	53 07       	cpc	r21, r19
    158a:	0c f5       	brge	.+66     	; 0x15ce <enemies+0x232>
					if (enemy[g].y < (blasterY + 8) && blasterY < (enemy[g].y + ySize)) {
    158c:	8e 9d       	mul	r24, r14
    158e:	f0 01       	movw	r30, r0
    1590:	8f 9d       	mul	r24, r15
    1592:	f0 0d       	add	r31, r0
    1594:	11 24       	eor	r1, r1
    1596:	e5 59       	subi	r30, 0x95	; 149
    1598:	f2 4c       	sbci	r31, 0xC2	; 194
    159a:	24 81       	ldd	r18, Z+4	; 0x04
    159c:	02 2e       	mov	r0, r18
    159e:	00 0c       	add	r0, r0
    15a0:	33 0b       	sbc	r19, r19
    15a2:	40 91 1c 38 	lds	r20, 0x381C	; 0x80381c <blasterY>
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	ba 01       	movw	r22, r20
    15aa:	68 5f       	subi	r22, 0xF8	; 248
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	26 17       	cp	r18, r22
    15b0:	37 07       	cpc	r19, r23
    15b2:	7c f4       	brge	.+30     	; 0x15d2 <enemies+0x236>
    15b4:	21 0f       	add	r18, r17
    15b6:	31 1d       	adc	r19, r1
    15b8:	17 fd       	sbrc	r17, 7
    15ba:	3a 95       	dec	r19
    15bc:	42 17       	cp	r20, r18
    15be:	53 07       	cpc	r21, r19
    15c0:	54 f0       	brlt	.+20     	; 0x15d6 <enemies+0x23a>
			int8_t xSize = pgm_read_byte(enemy[g].gfx);
			int8_t ySize = pgm_read_byte(enemy[g].gfx + 1);
			
			uint8_t xCollide = 0;													//X and Y collision flags for enemy-player
			uint8_t yCollide = 0;
			uint8_t blasted = 0;													//Collision flag for enemy-blaster (horizontal shot)
    15c2:	c0 e0       	ldi	r28, 0x00	; 0
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <enemies+0x23c>
    15c6:	c0 e0       	ldi	r28, 0x00	; 0
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <enemies+0x23c>
    15ca:	c0 e0       	ldi	r28, 0x00	; 0
    15cc:	05 c0       	rjmp	.+10     	; 0x15d8 <enemies+0x23c>
    15ce:	c0 e0       	ldi	r28, 0x00	; 0
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <enemies+0x23c>
    15d2:	c0 e0       	ldi	r28, 0x00	; 0
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <enemies+0x23c>
			}
			
			if (blasterX != spriteOff) {
				if (enemy[g].x < (blasterX + 16) && blasterX < (enemy[g].x + xSize)) {			//Check the X and Y collision flags for enemies (including shots) and Horizontal Blaster Shot
					if (enemy[g].y < (blasterY + 8) && blasterY < (enemy[g].y + ySize)) {
						blasted = 1;															//Set "Blasted" flag (since effect varies by enemy)
    15d6:	c1 e0       	ldi	r28, 0x01	; 1
					}
				}				
			}

			if (enemy[g].grounded) {									//Enemy stuck to ground? Obstacle? Scroll with the BG
    15d8:	8d e0       	ldi	r24, 0x0D	; 13
    15da:	8e 9d       	mul	r24, r14
    15dc:	f0 01       	movw	r30, r0
    15de:	8f 9d       	mul	r24, r15
    15e0:	f0 0d       	add	r31, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	e5 59       	subi	r30, 0x95	; 149
    15e6:	f2 4c       	sbci	r31, 0xC2	; 194
    15e8:	82 85       	ldd	r24, Z+10	; 0x0a
    15ea:	88 23       	and	r24, r24
    15ec:	09 f1       	breq	.+66     	; 0x1630 <enemies+0x294>
				enemy[g].x -= speed;
    15ee:	8d e0       	ldi	r24, 0x0D	; 13
    15f0:	8e 9d       	mul	r24, r14
    15f2:	f0 01       	movw	r30, r0
    15f4:	8f 9d       	mul	r24, r15
    15f6:	f0 0d       	add	r31, r0
    15f8:	11 24       	eor	r1, r1
    15fa:	e5 59       	subi	r30, 0x95	; 149
    15fc:	f2 4c       	sbci	r31, 0xC2	; 194
    15fe:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <speed>
    1602:	22 81       	ldd	r18, Z+2	; 0x02
    1604:	33 81       	ldd	r19, Z+3	; 0x03
    1606:	28 1b       	sub	r18, r24
    1608:	31 09       	sbc	r19, r1
    160a:	22 83       	std	Z+2, r18	; 0x02
    160c:	33 83       	std	Z+3, r19	; 0x03

				if (enemy[g].x < (0 - xSize)) {							//Scrolled off-screen? despawn.
    160e:	11 27       	eor	r17, r17
    1610:	01 95       	neg	r16
    1612:	0c f4       	brge	.+2      	; 0x1616 <enemies+0x27a>
    1614:	10 95       	com	r17
    1616:	20 17       	cp	r18, r16
    1618:	31 07       	cpc	r19, r17
    161a:	54 f4       	brge	.+20     	; 0x1630 <enemies+0x294>
					enemy[g].y = spriteOff;
    161c:	8d e0       	ldi	r24, 0x0D	; 13
    161e:	8e 9d       	mul	r24, r14
    1620:	f0 01       	movw	r30, r0
    1622:	8f 9d       	mul	r24, r15
    1624:	f0 0d       	add	r31, r0
    1626:	11 24       	eor	r1, r1
    1628:	e5 59       	subi	r30, 0x95	; 149
    162a:	f2 4c       	sbci	r31, 0xC2	; 194
    162c:	80 e8       	ldi	r24, 0x80	; 128
    162e:	84 83       	std	Z+4, r24	; 0x04
				}	
						
			}
			
			if (enemy[g].y == spriteOff) {								//Did a check above "kill" this enemy? Skip logic checks, goto next enemy in array
    1630:	8d e0       	ldi	r24, 0x0D	; 13
    1632:	8e 9d       	mul	r24, r14
    1634:	f0 01       	movw	r30, r0
    1636:	8f 9d       	mul	r24, r15
    1638:	f0 0d       	add	r31, r0
    163a:	11 24       	eor	r1, r1
    163c:	e5 59       	subi	r30, 0x95	; 149
    163e:	f2 4c       	sbci	r31, 0xC2	; 194
    1640:	24 81       	ldd	r18, Z+4	; 0x04
    1642:	20 38       	cpi	r18, 0x80	; 128
    1644:	09 f4       	brne	.+2      	; 0x1648 <enemies+0x2ac>
    1646:	ff c2       	rjmp	.+1534   	; 0x1c46 <enemies+0x8aa>
				continue;
			}	

			switch(enemy[g].type) {
    1648:	8e 9d       	mul	r24, r14
    164a:	f0 01       	movw	r30, r0
    164c:	8f 9d       	mul	r24, r15
    164e:	f0 0d       	add	r31, r0
    1650:	11 24       	eor	r1, r1
    1652:	e5 59       	subi	r30, 0x95	; 149
    1654:	f2 4c       	sbci	r31, 0xC2	; 194
    1656:	85 81       	ldd	r24, Z+5	; 0x05
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	09 f4       	brne	.+2      	; 0x165e <enemies+0x2c2>
    165c:	ce c0       	rjmp	.+412    	; 0x17fa <enemies+0x45e>
    165e:	50 f4       	brcc	.+20     	; 0x1674 <enemies+0x2d8>
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	09 f4       	brne	.+2      	; 0x1666 <enemies+0x2ca>
    1664:	64 c0       	rjmp	.+200    	; 0x172e <enemies+0x392>
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	09 f4       	brne	.+2      	; 0x166c <enemies+0x2d0>
    166a:	b7 c0       	rjmp	.+366    	; 0x17da <enemies+0x43e>
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	09 f0       	breq	.+2      	; 0x1672 <enemies+0x2d6>
    1670:	ea c2       	rjmp	.+1492   	; 0x1c46 <enemies+0x8aa>
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <enemies+0x2f6>
    1674:	80 32       	cpi	r24, 0x20	; 32
    1676:	09 f4       	brne	.+2      	; 0x167a <enemies+0x2de>
    1678:	fa c1       	rjmp	.+1012   	; 0x1a6e <enemies+0x6d2>
    167a:	20 f4       	brcc	.+8      	; 0x1684 <enemies+0x2e8>
    167c:	80 31       	cpi	r24, 0x10	; 16
    167e:	09 f4       	brne	.+2      	; 0x1682 <enemies+0x2e6>
    1680:	63 c1       	rjmp	.+710    	; 0x1948 <enemies+0x5ac>
    1682:	e1 c2       	rjmp	.+1474   	; 0x1c46 <enemies+0x8aa>
    1684:	80 38       	cpi	r24, 0x80	; 128
    1686:	09 f4       	brne	.+2      	; 0x168a <enemies+0x2ee>
    1688:	c8 c0       	rjmp	.+400    	; 0x181a <enemies+0x47e>
    168a:	80 39       	cpi	r24, 0x90	; 144
    168c:	09 f4       	brne	.+2      	; 0x1690 <enemies+0x2f4>
    168e:	09 c1       	rjmp	.+530    	; 0x18a2 <enemies+0x506>
    1690:	da c2       	rjmp	.+1460   	; 0x1c46 <enemies+0x8aa>
			
				case enemySmallRock:			
					collide = enemy[g].x - blasterX;
    1692:	8d e0       	ldi	r24, 0x0D	; 13
    1694:	8e 9d       	mul	r24, r14
    1696:	f0 01       	movw	r30, r0
    1698:	8f 9d       	mul	r24, r15
    169a:	f0 0d       	add	r31, r0
    169c:	11 24       	eor	r1, r1
    169e:	e5 59       	subi	r30, 0x95	; 149
    16a0:	f2 4c       	sbci	r31, 0xC2	; 194
    16a2:	22 81       	ldd	r18, Z+2	; 0x02
    16a4:	33 81       	ldd	r19, Z+3	; 0x03
    16a6:	a9 01       	movw	r20, r18
    16a8:	49 1b       	sub	r20, r25
    16aa:	51 09       	sbc	r21, r1
    16ac:	97 fd       	sbrc	r25, 7
    16ae:	53 95       	inc	r21
    16b0:	40 93 23 38 	sts	0x3823, r20	; 0x803823 <collide>
    16b4:	50 93 24 38 	sts	0x3824, r21	; 0x803824 <collide+0x1>
					
					//if (collide > -1 && collide < 8 && blasterY > 44) {
					if (blasted) {	
    16b8:	cc 23       	and	r28, r28
    16ba:	49 f1       	breq	.+82     	; 0x170e <enemies+0x372>
						enemy[g].y = spriteOff;
    16bc:	8d e0       	ldi	r24, 0x0D	; 13
    16be:	8e 9d       	mul	r24, r14
    16c0:	f0 01       	movw	r30, r0
    16c2:	8f 9d       	mul	r24, r15
    16c4:	f0 0d       	add	r31, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	e5 59       	subi	r30, 0x95	; 149
    16ca:	f2 4c       	sbci	r31, 0xC2	; 194
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	84 83       	std	Z+4, r24	; 0x04
						blasterX = spriteOff;
    16d0:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
						tone(1500, 200, 10, 10);
    16d4:	2a e0       	ldi	r18, 0x0A	; 10
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a e0       	ldi	r20, 0x0A	; 10
    16da:	68 ec       	ldi	r22, 0xC8	; 200
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	8c ed       	ldi	r24, 0xDC	; 220
    16e0:	95 e0       	ldi	r25, 0x05	; 5
    16e2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
						score += 100;
    16e6:	80 91 63 3d 	lds	r24, 0x3D63	; 0x803d63 <score>
    16ea:	90 91 64 3d 	lds	r25, 0x3D64	; 0x803d64 <score+0x1>
    16ee:	a0 91 65 3d 	lds	r26, 0x3D65	; 0x803d65 <score+0x2>
    16f2:	b0 91 66 3d 	lds	r27, 0x3D66	; 0x803d66 <score+0x3>
    16f6:	8c 59       	subi	r24, 0x9C	; 156
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	af 4f       	sbci	r26, 0xFF	; 255
    16fc:	bf 4f       	sbci	r27, 0xFF	; 255
    16fe:	80 93 63 3d 	sts	0x3D63, r24	; 0x803d63 <score>
    1702:	90 93 64 3d 	sts	0x3D64, r25	; 0x803d64 <score+0x1>
    1706:	a0 93 65 3d 	sts	0x3D65, r26	; 0x803d65 <score+0x2>
    170a:	b0 93 66 3d 	sts	0x3D66, r27	; 0x803d66 <score+0x3>
					}	

					if (xCollide && (playerState & playerAlive) && bugY > 44) {
    170e:	cc 20       	and	r12, r12
    1710:	09 f4       	brne	.+2      	; 0x1714 <enemies+0x378>
    1712:	99 c2       	rjmp	.+1330   	; 0x1c46 <enemies+0x8aa>
    1714:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <playerState>
    1718:	83 70       	andi	r24, 0x03	; 3
    171a:	09 f4       	brne	.+2      	; 0x171e <enemies+0x382>
    171c:	94 c2       	rjmp	.+1320   	; 0x1c46 <enemies+0x8aa>
    171e:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    1722:	8d 32       	cpi	r24, 0x2D	; 45
    1724:	08 f4       	brcc	.+2      	; 0x1728 <enemies+0x38c>
    1726:	8f c2       	rjmp	.+1310   	; 0x1c46 <enemies+0x8aa>
						killPlayer();
    1728:	0e 94 c0 09 	call	0x1380	; 0x1380 <killPlayer>
    172c:	8c c2       	rjmp	.+1304   	; 0x1c46 <enemies+0x8aa>
											
				break;
				
				case enemyBigRock:

					collide = enemy[g].x - blasterX;
    172e:	8d e0       	ldi	r24, 0x0D	; 13
    1730:	8e 9d       	mul	r24, r14
    1732:	f0 01       	movw	r30, r0
    1734:	8f 9d       	mul	r24, r15
    1736:	f0 0d       	add	r31, r0
    1738:	11 24       	eor	r1, r1
    173a:	e5 59       	subi	r30, 0x95	; 149
    173c:	f2 4c       	sbci	r31, 0xC2	; 194
    173e:	22 81       	ldd	r18, Z+2	; 0x02
    1740:	33 81       	ldd	r19, Z+3	; 0x03
    1742:	a9 01       	movw	r20, r18
    1744:	49 1b       	sub	r20, r25
    1746:	51 09       	sbc	r21, r1
    1748:	97 fd       	sbrc	r25, 7
    174a:	53 95       	inc	r21
    174c:	40 93 23 38 	sts	0x3823, r20	; 0x803823 <collide>
    1750:	50 93 24 38 	sts	0x3824, r21	; 0x803824 <collide+0x1>
					
					//if (collide > -1 && collide < 16 && blasterY > 44) {		//Blaster hits big rock?
					if (blasted) {
    1754:	cc 23       	and	r28, r28
    1756:	89 f1       	breq	.+98     	; 0x17ba <enemies+0x41e>
						enemy[g].gfx = smallRock;							//Change the sprite graphics
    1758:	8d e0       	ldi	r24, 0x0D	; 13
    175a:	8e 9d       	mul	r24, r14
    175c:	f0 01       	movw	r30, r0
    175e:	8f 9d       	mul	r24, r15
    1760:	f0 0d       	add	r31, r0
    1762:	11 24       	eor	r1, r1
    1764:	e5 59       	subi	r30, 0x95	; 149
    1766:	f2 4c       	sbci	r31, 0xC2	; 194
    1768:	8c e1       	ldi	r24, 0x1C	; 28
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	80 83       	st	Z, r24
    176e:	91 83       	std	Z+1, r25	; 0x01
						enemy[g].type = enemySmallRock;							//It becomes SMALL ROCK
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	85 83       	std	Z+5, r24	; 0x05
						enemy[g].x += 8;										//Move 8 pix right to make gap
    1774:	28 5f       	subi	r18, 0xF8	; 248
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	22 83       	std	Z+2, r18	; 0x02
    177a:	33 83       	std	Z+3, r19	; 0x03
						blasterX = spriteOff;
    177c:	80 e8       	ldi	r24, 0x80	; 128
    177e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
						tone(400, 100, 10, 3);
    1782:	23 e0       	ldi	r18, 0x03	; 3
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a e0       	ldi	r20, 0x0A	; 10
    1788:	64 e6       	ldi	r22, 0x64	; 100
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	80 e9       	ldi	r24, 0x90	; 144
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
						score += 50;
    1794:	80 91 63 3d 	lds	r24, 0x3D63	; 0x803d63 <score>
    1798:	90 91 64 3d 	lds	r25, 0x3D64	; 0x803d64 <score+0x1>
    179c:	a0 91 65 3d 	lds	r26, 0x3D65	; 0x803d65 <score+0x2>
    17a0:	b0 91 66 3d 	lds	r27, 0x3D66	; 0x803d66 <score+0x3>
    17a4:	c2 96       	adiw	r24, 0x32	; 50
    17a6:	a1 1d       	adc	r26, r1
    17a8:	b1 1d       	adc	r27, r1
    17aa:	80 93 63 3d 	sts	0x3D63, r24	; 0x803d63 <score>
    17ae:	90 93 64 3d 	sts	0x3D64, r25	; 0x803d64 <score+0x1>
    17b2:	a0 93 65 3d 	sts	0x3D65, r26	; 0x803d65 <score+0x2>
    17b6:	b0 93 66 3d 	sts	0x3D66, r27	; 0x803d66 <score+0x3>
					}	

					if (xCollide && (playerState & playerAlive) && bugY > 44) {
    17ba:	cc 20       	and	r12, r12
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <enemies+0x424>
    17be:	43 c2       	rjmp	.+1158   	; 0x1c46 <enemies+0x8aa>
    17c0:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <playerState>
    17c4:	83 70       	andi	r24, 0x03	; 3
    17c6:	09 f4       	brne	.+2      	; 0x17ca <enemies+0x42e>
    17c8:	3e c2       	rjmp	.+1148   	; 0x1c46 <enemies+0x8aa>
    17ca:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    17ce:	8d 32       	cpi	r24, 0x2D	; 45
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <enemies+0x438>
    17d2:	39 c2       	rjmp	.+1138   	; 0x1c46 <enemies+0x8aa>
						killPlayer();
    17d4:	0e 94 c0 09 	call	0x1380	; 0x1380 <killPlayer>
    17d8:	36 c2       	rjmp	.+1132   	; 0x1c46 <enemies+0x8aa>
					}									
									
				break;
				
				case enemySmallPit:
					if (xCollide && (playerState & playerAlive) && bugY == 51) {
    17da:	cc 20       	and	r12, r12
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <enemies+0x444>
    17de:	33 c2       	rjmp	.+1126   	; 0x1c46 <enemies+0x8aa>
    17e0:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <playerState>
    17e4:	83 70       	andi	r24, 0x03	; 3
    17e6:	09 f4       	brne	.+2      	; 0x17ea <enemies+0x44e>
    17e8:	2e c2       	rjmp	.+1116   	; 0x1c46 <enemies+0x8aa>
    17ea:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    17ee:	83 33       	cpi	r24, 0x33	; 51
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <enemies+0x458>
    17f2:	29 c2       	rjmp	.+1106   	; 0x1c46 <enemies+0x8aa>
						killPlayer();
    17f4:	0e 94 c0 09 	call	0x1380	; 0x1380 <killPlayer>
    17f8:	26 c2       	rjmp	.+1100   	; 0x1c46 <enemies+0x8aa>
					}							
				break;	
				
				case enemyBigPit:
					if (xCollide && (playerState & playerAlive) && bugY == 51) {
    17fa:	cc 20       	and	r12, r12
    17fc:	09 f4       	brne	.+2      	; 0x1800 <enemies+0x464>
    17fe:	23 c2       	rjmp	.+1094   	; 0x1c46 <enemies+0x8aa>
    1800:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <playerState>
    1804:	83 70       	andi	r24, 0x03	; 3
    1806:	09 f4       	brne	.+2      	; 0x180a <enemies+0x46e>
    1808:	1e c2       	rjmp	.+1084   	; 0x1c46 <enemies+0x8aa>
    180a:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    180e:	83 33       	cpi	r24, 0x33	; 51
    1810:	09 f0       	breq	.+2      	; 0x1814 <enemies+0x478>
    1812:	19 c2       	rjmp	.+1074   	; 0x1c46 <enemies+0x8aa>
						killPlayer();	
    1814:	0e 94 c0 09 	call	0x1380	; 0x1380 <killPlayer>
    1818:	16 c2       	rjmp	.+1068   	; 0x1c46 <enemies+0x8aa>
					}		
				break;
				
				case enemyWaveShot:
					if (xCollide && yCollide && (playerState & playerAlive)) {
    181a:	cc 20       	and	r12, r12
    181c:	91 f0       	breq	.+36     	; 0x1842 <enemies+0x4a6>
    181e:	aa 20       	and	r10, r10
    1820:	81 f0       	breq	.+32     	; 0x1842 <enemies+0x4a6>
    1822:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <playerState>
    1826:	83 70       	andi	r24, 0x03	; 3
    1828:	61 f0       	breq	.+24     	; 0x1842 <enemies+0x4a6>
						killPlayer();
    182a:	0e 94 c0 09 	call	0x1380	; 0x1380 <killPlayer>
						enemy[g].y = spriteOff;
    182e:	8d e0       	ldi	r24, 0x0D	; 13
    1830:	8e 9d       	mul	r24, r14
    1832:	f0 01       	movw	r30, r0
    1834:	8f 9d       	mul	r24, r15
    1836:	f0 0d       	add	r31, r0
    1838:	11 24       	eor	r1, r1
    183a:	e5 59       	subi	r30, 0x95	; 149
    183c:	f2 4c       	sbci	r31, 0xC2	; 194
    183e:	80 e8       	ldi	r24, 0x80	; 128
    1840:	84 83       	std	Z+4, r24	; 0x04
					}
					if (++enemy[g].y > 52) {										//Despawn wave shot when it hits ground
    1842:	8d e0       	ldi	r24, 0x0D	; 13
    1844:	8e 9d       	mul	r24, r14
    1846:	f0 01       	movw	r30, r0
    1848:	8f 9d       	mul	r24, r15
    184a:	f0 0d       	add	r31, r0
    184c:	11 24       	eor	r1, r1
    184e:	e5 59       	subi	r30, 0x95	; 149
    1850:	f2 4c       	sbci	r31, 0xC2	; 194
    1852:	84 81       	ldd	r24, Z+4	; 0x04
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	84 83       	std	Z+4, r24	; 0x04
    1858:	85 33       	cpi	r24, 0x35	; 53
    185a:	54 f0       	brlt	.+20     	; 0x1870 <enemies+0x4d4>
						enemy[g].y = spriteOff;
    185c:	8d e0       	ldi	r24, 0x0D	; 13
    185e:	8e 9d       	mul	r24, r14
    1860:	f0 01       	movw	r30, r0
    1862:	8f 9d       	mul	r24, r15
    1864:	f0 0d       	add	r31, r0
    1866:	11 24       	eor	r1, r1
    1868:	e5 59       	subi	r30, 0x95	; 149
    186a:	f2 4c       	sbci	r31, 0xC2	; 194
    186c:	80 e8       	ldi	r24, 0x80	; 128
    186e:	84 83       	std	Z+4, r24	; 0x04
					}
					if (blasted) {
    1870:	cc 23       	and	r28, r28
    1872:	09 f4       	brne	.+2      	; 0x1876 <enemies+0x4da>
    1874:	e8 c1       	rjmp	.+976    	; 0x1c46 <enemies+0x8aa>
						enemy[g].y = spriteOff;										//Hori blaster hit it?
    1876:	8d e0       	ldi	r24, 0x0D	; 13
    1878:	8e 9d       	mul	r24, r14
    187a:	f0 01       	movw	r30, r0
    187c:	8f 9d       	mul	r24, r15
    187e:	f0 0d       	add	r31, r0
    1880:	11 24       	eor	r1, r1
    1882:	e5 59       	subi	r30, 0x95	; 149
    1884:	f2 4c       	sbci	r31, 0xC2	; 194
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	84 83       	std	Z+4, r24	; 0x04
						blasterX = spriteOff;
    188a:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
						tone(700, 300, 9, -1);
    188e:	2f ef       	ldi	r18, 0xFF	; 255
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	49 e0       	ldi	r20, 0x09	; 9
    1894:	6c e2       	ldi	r22, 0x2C	; 44
    1896:	71 e0       	ldi	r23, 0x01	; 1
    1898:	8c eb       	ldi	r24, 0xBC	; 188
    189a:	92 e0       	ldi	r25, 0x02	; 2
    189c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
    18a0:	d2 c1       	rjmp	.+932    	; 0x1c46 <enemies+0x8aa>
					}					
				break;
				
				case enemyBombShot:
					if (xCollide && yCollide && (playerState & playerAlive)) {
    18a2:	cc 20       	and	r12, r12
    18a4:	91 f0       	breq	.+36     	; 0x18ca <enemies+0x52e>
    18a6:	aa 20       	and	r10, r10
    18a8:	81 f0       	breq	.+32     	; 0x18ca <enemies+0x52e>
    18aa:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <playerState>
    18ae:	83 70       	andi	r24, 0x03	; 3
    18b0:	61 f0       	breq	.+24     	; 0x18ca <enemies+0x52e>
						killPlayer();
    18b2:	0e 94 c0 09 	call	0x1380	; 0x1380 <killPlayer>
						enemy[g].y = spriteOff;
    18b6:	8d e0       	ldi	r24, 0x0D	; 13
    18b8:	8e 9d       	mul	r24, r14
    18ba:	f0 01       	movw	r30, r0
    18bc:	8f 9d       	mul	r24, r15
    18be:	f0 0d       	add	r31, r0
    18c0:	11 24       	eor	r1, r1
    18c2:	e5 59       	subi	r30, 0x95	; 149
    18c4:	f2 4c       	sbci	r31, 0xC2	; 194
    18c6:	80 e8       	ldi	r24, 0x80	; 128
    18c8:	84 83       	std	Z+4, r24	; 0x04
					}
					if (++enemy[g].y > 52) {										//Bomb shot makes hole in the ground
    18ca:	8d e0       	ldi	r24, 0x0D	; 13
    18cc:	8e 9d       	mul	r24, r14
    18ce:	f0 01       	movw	r30, r0
    18d0:	8f 9d       	mul	r24, r15
    18d2:	f0 0d       	add	r31, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	e5 59       	subi	r30, 0x95	; 149
    18d8:	f2 4c       	sbci	r31, 0xC2	; 194
    18da:	84 81       	ldd	r24, Z+4	; 0x04
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	84 83       	std	Z+4, r24	; 0x04
    18e0:	85 33       	cpi	r24, 0x35	; 53
    18e2:	cc f0       	brlt	.+50     	; 0x1916 <enemies+0x57a>
						tone(2000, 300, 8, 1);
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	48 e0       	ldi	r20, 0x08	; 8
    18ea:	6c e2       	ldi	r22, 0x2C	; 44
    18ec:	71 e0       	ldi	r23, 0x01	; 1
    18ee:	80 ed       	ldi	r24, 0xD0	; 208
    18f0:	97 e0       	ldi	r25, 0x07	; 7
    18f2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
						enemy[g].y = spriteOff;
    18f6:	8d e0       	ldi	r24, 0x0D	; 13
    18f8:	8e 9d       	mul	r24, r14
    18fa:	f0 01       	movw	r30, r0
    18fc:	8f 9d       	mul	r24, r15
    18fe:	f0 0d       	add	r31, r0
    1900:	11 24       	eor	r1, r1
    1902:	e5 59       	subi	r30, 0x95	; 149
    1904:	f2 4c       	sbci	r31, 0xC2	; 194
    1906:	80 e8       	ldi	r24, 0x80	; 128
    1908:	84 83       	std	Z+4, r24	; 0x04
						spawnObstacle(enemy[g].x - 8, enemySmallPit);
    190a:	82 81       	ldd	r24, Z+2	; 0x02
    190c:	93 81       	ldd	r25, Z+3	; 0x03
    190e:	64 e0       	ldi	r22, 0x04	; 4
    1910:	08 97       	sbiw	r24, 0x08	; 8
    1912:	0e 94 8d 08 	call	0x111a	; 0x111a <spawnObstacle>
					}
					if (blasted) {
    1916:	cc 23       	and	r28, r28
    1918:	09 f4       	brne	.+2      	; 0x191c <enemies+0x580>
    191a:	95 c1       	rjmp	.+810    	; 0x1c46 <enemies+0x8aa>
						enemy[g].y = spriteOff;										//Hori blaster hit it?
    191c:	8d e0       	ldi	r24, 0x0D	; 13
    191e:	8e 9d       	mul	r24, r14
    1920:	f0 01       	movw	r30, r0
    1922:	8f 9d       	mul	r24, r15
    1924:	f0 0d       	add	r31, r0
    1926:	11 24       	eor	r1, r1
    1928:	e5 59       	subi	r30, 0x95	; 149
    192a:	f2 4c       	sbci	r31, 0xC2	; 194
    192c:	80 e8       	ldi	r24, 0x80	; 128
    192e:	84 83       	std	Z+4, r24	; 0x04
						blasterX = spriteOff;
    1930:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
						tone(700, 300, 9, -1);
    1934:	2f ef       	ldi	r18, 0xFF	; 255
    1936:	3f ef       	ldi	r19, 0xFF	; 255
    1938:	49 e0       	ldi	r20, 0x09	; 9
    193a:	6c e2       	ldi	r22, 0x2C	; 44
    193c:	71 e0       	ldi	r23, 0x01	; 1
    193e:	8c eb       	ldi	r24, 0xBC	; 188
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
    1946:	7f c1       	rjmp	.+766    	; 0x1c46 <enemies+0x8aa>
				break;	
				
				
				case enemyUFO:
				
					if (frameCounter & 0x08) {
    1948:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    194c:	83 ff       	sbrs	r24, 3
    194e:	0b c0       	rjmp	.+22     	; 0x1966 <enemies+0x5ca>
						enemy[g].mirror = 1; 
    1950:	8d e0       	ldi	r24, 0x0D	; 13
    1952:	8e 9d       	mul	r24, r14
    1954:	f0 01       	movw	r30, r0
    1956:	8f 9d       	mul	r24, r15
    1958:	f0 0d       	add	r31, r0
    195a:	11 24       	eor	r1, r1
    195c:	e5 59       	subi	r30, 0x95	; 149
    195e:	f2 4c       	sbci	r31, 0xC2	; 194
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	86 83       	std	Z+6, r24	; 0x06
    1964:	0a c0       	rjmp	.+20     	; 0x197a <enemies+0x5de>
					}
					else {
						enemy[g].mirror = -1;
    1966:	8d e0       	ldi	r24, 0x0D	; 13
    1968:	8e 9d       	mul	r24, r14
    196a:	f0 01       	movw	r30, r0
    196c:	8f 9d       	mul	r24, r15
    196e:	f0 0d       	add	r31, r0
    1970:	11 24       	eor	r1, r1
    1972:	e5 59       	subi	r30, 0x95	; 149
    1974:	f2 4c       	sbci	r31, 0xC2	; 194
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	86 83       	std	Z+6, r24	; 0x06
					}
				
					enemy[g].x += enemy[g].dir;
    197a:	8d e0       	ldi	r24, 0x0D	; 13
    197c:	8e 9d       	mul	r24, r14
    197e:	f0 01       	movw	r30, r0
    1980:	8f 9d       	mul	r24, r15
    1982:	f0 0d       	add	r31, r0
    1984:	11 24       	eor	r1, r1
    1986:	e5 59       	subi	r30, 0x95	; 149
    1988:	f2 4c       	sbci	r31, 0xC2	; 194
    198a:	37 81       	ldd	r19, Z+7	; 0x07
    198c:	82 81       	ldd	r24, Z+2	; 0x02
    198e:	93 81       	ldd	r25, Z+3	; 0x03
    1990:	83 0f       	add	r24, r19
    1992:	91 1d       	adc	r25, r1
    1994:	37 fd       	sbrc	r19, 7
    1996:	9a 95       	dec	r25
    1998:	82 83       	std	Z+2, r24	; 0x02
    199a:	93 83       	std	Z+3, r25	; 0x03
					
					if (enemy[g].x < 1) {
    199c:	18 16       	cp	r1, r24
    199e:	19 06       	cpc	r1, r25
    19a0:	54 f0       	brlt	.+20     	; 0x19b6 <enemies+0x61a>
						enemy[g].dir = 1;	
    19a2:	3d e0       	ldi	r19, 0x0D	; 13
    19a4:	3e 9d       	mul	r19, r14
    19a6:	f0 01       	movw	r30, r0
    19a8:	3f 9d       	mul	r19, r15
    19aa:	f0 0d       	add	r31, r0
    19ac:	11 24       	eor	r1, r1
    19ae:	e5 59       	subi	r30, 0x95	; 149
    19b0:	f2 4c       	sbci	r31, 0xC2	; 194
    19b2:	31 e0       	ldi	r19, 0x01	; 1
    19b4:	37 83       	std	Z+7, r19	; 0x07
					}
					if (enemy[g].x > 111) {
    19b6:	80 37       	cpi	r24, 0x70	; 112
    19b8:	91 05       	cpc	r25, r1
    19ba:	54 f0       	brlt	.+20     	; 0x19d0 <enemies+0x634>
						enemy[g].dir = -1;
    19bc:	3d e0       	ldi	r19, 0x0D	; 13
    19be:	3e 9d       	mul	r19, r14
    19c0:	f0 01       	movw	r30, r0
    19c2:	3f 9d       	mul	r19, r15
    19c4:	f0 0d       	add	r31, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	e5 59       	subi	r30, 0x95	; 149
    19ca:	f2 4c       	sbci	r31, 0xC2	; 194
    19cc:	3f ef       	ldi	r19, 0xFF	; 255
    19ce:	37 83       	std	Z+7, r19	; 0x07
					}
					
					if (enemy[g].x > bugX + 4 && enemy[g].x < bugX + 8 && !enemy[g].timer) {
    19d0:	40 91 0e 38 	lds	r20, 0x380E	; 0x80380e <bugX>
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	ba 01       	movw	r22, r20
    19d8:	6c 5f       	subi	r22, 0xFC	; 252
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	68 17       	cp	r22, r24
    19de:	79 07       	cpc	r23, r25
    19e0:	6c f5       	brge	.+90     	; 0x1a3c <enemies+0x6a0>
    19e2:	48 5f       	subi	r20, 0xF8	; 248
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255
    19e6:	84 17       	cp	r24, r20
    19e8:	95 07       	cpc	r25, r21
    19ea:	44 f5       	brge	.+80     	; 0x1a3c <enemies+0x6a0>
    19ec:	3d e0       	ldi	r19, 0x0D	; 13
    19ee:	3e 9d       	mul	r19, r14
    19f0:	f0 01       	movw	r30, r0
    19f2:	3f 9d       	mul	r19, r15
    19f4:	f0 0d       	add	r31, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	e5 59       	subi	r30, 0x95	; 149
    19fa:	f2 4c       	sbci	r31, 0xC2	; 194
    19fc:	43 85       	ldd	r20, Z+11	; 0x0b
    19fe:	54 85       	ldd	r21, Z+12	; 0x0c
    1a00:	45 2b       	or	r20, r21
    1a02:	e1 f4       	brne	.+56     	; 0x1a3c <enemies+0x6a0>
						enemy[g].timer = attackSpeed;
    1a04:	9d e0       	ldi	r25, 0x0D	; 13
    1a06:	9e 9d       	mul	r25, r14
    1a08:	f0 01       	movw	r30, r0
    1a0a:	9f 9d       	mul	r25, r15
    1a0c:	f0 0d       	add	r31, r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	e5 59       	subi	r30, 0x95	; 149
    1a12:	f2 4c       	sbci	r31, 0xC2	; 194
    1a14:	40 91 0f 38 	lds	r20, 0x380F	; 0x80380f <attackSpeed>
    1a18:	50 e0       	ldi	r21, 0x00	; 0
    1a1a:	43 87       	std	Z+11, r20	; 0x0b
    1a1c:	54 87       	std	Z+12, r21	; 0x0c
						spawnShot(enemy[g].x + 4, enemy[g].y + 8, enemyWaveShot);
    1a1e:	68 e0       	ldi	r22, 0x08	; 8
    1a20:	62 0f       	add	r22, r18
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	8c 5f       	subi	r24, 0xFC	; 252
    1a26:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <spawnShot>
						tone(400, 100, 10, -1);					
    1a2a:	2f ef       	ldi	r18, 0xFF	; 255
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4a e0       	ldi	r20, 0x0A	; 10
    1a30:	64 e6       	ldi	r22, 0x64	; 100
    1a32:	70 e0       	ldi	r23, 0x00	; 0
    1a34:	80 e9       	ldi	r24, 0x90	; 144
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
					}
					if (enemy[g].timer) {
    1a3c:	8d e0       	ldi	r24, 0x0D	; 13
    1a3e:	8e 9d       	mul	r24, r14
    1a40:	f0 01       	movw	r30, r0
    1a42:	8f 9d       	mul	r24, r15
    1a44:	f0 0d       	add	r31, r0
    1a46:	11 24       	eor	r1, r1
    1a48:	e5 59       	subi	r30, 0x95	; 149
    1a4a:	f2 4c       	sbci	r31, 0xC2	; 194
    1a4c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a4e:	94 85       	ldd	r25, Z+12	; 0x0c
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <enemies+0x6ba>
    1a54:	f8 c0       	rjmp	.+496    	; 0x1c46 <enemies+0x8aa>
						enemy[g].timer--;
    1a56:	2d e0       	ldi	r18, 0x0D	; 13
    1a58:	2e 9d       	mul	r18, r14
    1a5a:	f0 01       	movw	r30, r0
    1a5c:	2f 9d       	mul	r18, r15
    1a5e:	f0 0d       	add	r31, r0
    1a60:	11 24       	eor	r1, r1
    1a62:	e5 59       	subi	r30, 0x95	; 149
    1a64:	f2 4c       	sbci	r31, 0xC2	; 194
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	83 87       	std	Z+11, r24	; 0x0b
    1a6a:	94 87       	std	Z+12, r25	; 0x0c
    1a6c:	ec c0       	rjmp	.+472    	; 0x1c46 <enemies+0x8aa>
					}				
				
				break;	
				
				case enemyBalls:
					if (frameCounter & 0x08) {
    1a6e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    1a72:	83 ff       	sbrs	r24, 3
    1a74:	0b c0       	rjmp	.+22     	; 0x1a8c <enemies+0x6f0>
						enemy[g].mirror = 1;
    1a76:	8d e0       	ldi	r24, 0x0D	; 13
    1a78:	8e 9d       	mul	r24, r14
    1a7a:	f0 01       	movw	r30, r0
    1a7c:	8f 9d       	mul	r24, r15
    1a7e:	f0 0d       	add	r31, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	e5 59       	subi	r30, 0x95	; 149
    1a84:	f2 4c       	sbci	r31, 0xC2	; 194
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	86 83       	std	Z+6, r24	; 0x06
    1a8a:	0a c0       	rjmp	.+20     	; 0x1aa0 <enemies+0x704>
					}
					else {
						enemy[g].mirror = -1;
    1a8c:	8d e0       	ldi	r24, 0x0D	; 13
    1a8e:	8e 9d       	mul	r24, r14
    1a90:	f0 01       	movw	r30, r0
    1a92:	8f 9d       	mul	r24, r15
    1a94:	f0 0d       	add	r31, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	e5 59       	subi	r30, 0x95	; 149
    1a9a:	f2 4c       	sbci	r31, 0xC2	; 194
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	86 83       	std	Z+6, r24	; 0x06
					}
					
					enemy[g].x += enemy[g].dir;
    1aa0:	8d e0       	ldi	r24, 0x0D	; 13
    1aa2:	8e 9d       	mul	r24, r14
    1aa4:	f0 01       	movw	r30, r0
    1aa6:	8f 9d       	mul	r24, r15
    1aa8:	f0 0d       	add	r31, r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	e5 59       	subi	r30, 0x95	; 149
    1aae:	f2 4c       	sbci	r31, 0xC2	; 194
    1ab0:	37 81       	ldd	r19, Z+7	; 0x07
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	83 0f       	add	r24, r19
    1ab8:	91 1d       	adc	r25, r1
    1aba:	37 fd       	sbrc	r19, 7
    1abc:	9a 95       	dec	r25
    1abe:	82 83       	std	Z+2, r24	; 0x02
    1ac0:	93 83       	std	Z+3, r25	; 0x03
					
					if (enemy[g].x < 1) {
    1ac2:	18 16       	cp	r1, r24
    1ac4:	19 06       	cpc	r1, r25
    1ac6:	54 f0       	brlt	.+20     	; 0x1adc <enemies+0x740>
						enemy[g].dir = 1;
    1ac8:	3d e0       	ldi	r19, 0x0D	; 13
    1aca:	3e 9d       	mul	r19, r14
    1acc:	f0 01       	movw	r30, r0
    1ace:	3f 9d       	mul	r19, r15
    1ad0:	f0 0d       	add	r31, r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	e5 59       	subi	r30, 0x95	; 149
    1ad6:	f2 4c       	sbci	r31, 0xC2	; 194
    1ad8:	31 e0       	ldi	r19, 0x01	; 1
    1ada:	37 83       	std	Z+7, r19	; 0x07
					}
					if (enemy[g].x > 111) {
    1adc:	80 37       	cpi	r24, 0x70	; 112
    1ade:	91 05       	cpc	r25, r1
    1ae0:	54 f0       	brlt	.+20     	; 0x1af6 <enemies+0x75a>
						enemy[g].dir = -1;
    1ae2:	3d e0       	ldi	r19, 0x0D	; 13
    1ae4:	3e 9d       	mul	r19, r14
    1ae6:	f0 01       	movw	r30, r0
    1ae8:	3f 9d       	mul	r19, r15
    1aea:	f0 0d       	add	r31, r0
    1aec:	11 24       	eor	r1, r1
    1aee:	e5 59       	subi	r30, 0x95	; 149
    1af0:	f2 4c       	sbci	r31, 0xC2	; 194
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	37 83       	std	Z+7, r19	; 0x07
					}
					
					if (!enemy[g].timer) {			//Eligible to take a shot?
    1af6:	3d e0       	ldi	r19, 0x0D	; 13
    1af8:	3e 9d       	mul	r19, r14
    1afa:	f0 01       	movw	r30, r0
    1afc:	3f 9d       	mul	r19, r15
    1afe:	f0 0d       	add	r31, r0
    1b00:	11 24       	eor	r1, r1
    1b02:	e5 59       	subi	r30, 0x95	; 149
    1b04:	f2 4c       	sbci	r31, 0xC2	; 194
    1b06:	43 85       	ldd	r20, Z+11	; 0x0b
    1b08:	54 85       	ldd	r21, Z+12	; 0x0c
    1b0a:	45 2b       	or	r20, r21
    1b0c:	09 f0       	breq	.+2      	; 0x1b10 <enemies+0x774>
    1b0e:	4a c0       	rjmp	.+148    	; 0x1ba4 <enemies+0x808>
						if (bugX > 86) {				//Player near right side of screen, and we can't drop a bomb in front of him? OR HER! #PC
    1b10:	40 91 0e 38 	lds	r20, 0x380E	; 0x80380e <bugX>
    1b14:	47 35       	cpi	r20, 0x57	; 87
    1b16:	20 f1       	brcs	.+72     	; 0x1b60 <enemies+0x7c4>
							if (enemy[g].x == bugX + 4) {			//Drop bomb right onto player instead. TIME 2 DIE!
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	4c 5f       	subi	r20, 0xFC	; 252
    1b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b1e:	84 17       	cp	r24, r20
    1b20:	95 07       	cpc	r25, r21
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <enemies+0x78a>
    1b24:	3f c0       	rjmp	.+126    	; 0x1ba4 <enemies+0x808>
								enemy[g].timer = attackSpeed;
    1b26:	9d e0       	ldi	r25, 0x0D	; 13
    1b28:	9e 9d       	mul	r25, r14
    1b2a:	f0 01       	movw	r30, r0
    1b2c:	9f 9d       	mul	r25, r15
    1b2e:	f0 0d       	add	r31, r0
    1b30:	11 24       	eor	r1, r1
    1b32:	e5 59       	subi	r30, 0x95	; 149
    1b34:	f2 4c       	sbci	r31, 0xC2	; 194
    1b36:	40 91 0f 38 	lds	r20, 0x380F	; 0x80380f <attackSpeed>
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	43 87       	std	Z+11, r20	; 0x0b
    1b3e:	54 87       	std	Z+12, r21	; 0x0c
								spawnShot(enemy[g].x + 4, enemy[g].y + 8, enemyBombShot);
    1b40:	68 e0       	ldi	r22, 0x08	; 8
    1b42:	62 0f       	add	r22, r18
    1b44:	40 e9       	ldi	r20, 0x90	; 144
    1b46:	8c 5f       	subi	r24, 0xFC	; 252
    1b48:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <spawnShot>
								tone(600, 100, 10, -1);
    1b4c:	2f ef       	ldi	r18, 0xFF	; 255
    1b4e:	3f ef       	ldi	r19, 0xFF	; 255
    1b50:	4a e0       	ldi	r20, 0x0A	; 10
    1b52:	64 e6       	ldi	r22, 0x64	; 100
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	88 e5       	ldi	r24, 0x58	; 88
    1b58:	92 e0       	ldi	r25, 0x02	; 2
    1b5a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
    1b5e:	22 c0       	rjmp	.+68     	; 0x1ba4 <enemies+0x808>
							}							
						}
						else {
							if (enemy[g].x == bugX + 40) {
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	48 5d       	subi	r20, 0xD8	; 216
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	84 17       	cp	r24, r20
    1b68:	95 07       	cpc	r25, r21
    1b6a:	e1 f4       	brne	.+56     	; 0x1ba4 <enemies+0x808>
								enemy[g].timer = attackSpeed;
    1b6c:	9d e0       	ldi	r25, 0x0D	; 13
    1b6e:	9e 9d       	mul	r25, r14
    1b70:	f0 01       	movw	r30, r0
    1b72:	9f 9d       	mul	r25, r15
    1b74:	f0 0d       	add	r31, r0
    1b76:	11 24       	eor	r1, r1
    1b78:	e5 59       	subi	r30, 0x95	; 149
    1b7a:	f2 4c       	sbci	r31, 0xC2	; 194
    1b7c:	40 91 0f 38 	lds	r20, 0x380F	; 0x80380f <attackSpeed>
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	43 87       	std	Z+11, r20	; 0x0b
    1b84:	54 87       	std	Z+12, r21	; 0x0c
								spawnShot(enemy[g].x + 4, enemy[g].y + 8, enemyBombShot);
    1b86:	68 e0       	ldi	r22, 0x08	; 8
    1b88:	62 0f       	add	r22, r18
    1b8a:	40 e9       	ldi	r20, 0x90	; 144
    1b8c:	8c 5f       	subi	r24, 0xFC	; 252
    1b8e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <spawnShot>
								tone(600, 100, 10, -1);
    1b92:	2f ef       	ldi	r18, 0xFF	; 255
    1b94:	3f ef       	ldi	r19, 0xFF	; 255
    1b96:	4a e0       	ldi	r20, 0x0A	; 10
    1b98:	64 e6       	ldi	r22, 0x64	; 100
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	88 e5       	ldi	r24, 0x58	; 88
    1b9e:	92 e0       	ldi	r25, 0x02	; 2
    1ba0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
							}							
						}						
					}
					
					
					if (enemy[g].x == bugX + 40 && !enemy[g].timer) {
    1ba4:	8d e0       	ldi	r24, 0x0D	; 13
    1ba6:	8e 9d       	mul	r24, r14
    1ba8:	f0 01       	movw	r30, r0
    1baa:	8f 9d       	mul	r24, r15
    1bac:	f0 0d       	add	r31, r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	e5 59       	subi	r30, 0x95	; 149
    1bb2:	f2 4c       	sbci	r31, 0xC2	; 194
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <bugX>
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	28 5d       	subi	r18, 0xD8	; 216
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	82 17       	cp	r24, r18
    1bc4:	93 07       	cpc	r25, r19
    1bc6:	41 f5       	brne	.+80     	; 0x1c18 <enemies+0x87c>
    1bc8:	2d e0       	ldi	r18, 0x0D	; 13
    1bca:	2e 9d       	mul	r18, r14
    1bcc:	f0 01       	movw	r30, r0
    1bce:	2f 9d       	mul	r18, r15
    1bd0:	f0 0d       	add	r31, r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	e5 59       	subi	r30, 0x95	; 149
    1bd6:	f2 4c       	sbci	r31, 0xC2	; 194
    1bd8:	23 85       	ldd	r18, Z+11	; 0x0b
    1bda:	34 85       	ldd	r19, Z+12	; 0x0c
    1bdc:	23 2b       	or	r18, r19
    1bde:	e1 f4       	brne	.+56     	; 0x1c18 <enemies+0x87c>
						enemy[g].timer = attackSpeed;
    1be0:	9d e0       	ldi	r25, 0x0D	; 13
    1be2:	9e 9d       	mul	r25, r14
    1be4:	f0 01       	movw	r30, r0
    1be6:	9f 9d       	mul	r25, r15
    1be8:	f0 0d       	add	r31, r0
    1bea:	11 24       	eor	r1, r1
    1bec:	e5 59       	subi	r30, 0x95	; 149
    1bee:	f2 4c       	sbci	r31, 0xC2	; 194
    1bf0:	20 91 0f 38 	lds	r18, 0x380F	; 0x80380f <attackSpeed>
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	23 87       	std	Z+11, r18	; 0x0b
    1bf8:	34 87       	std	Z+12, r19	; 0x0c
						spawnShot(enemy[g].x + 4, enemy[g].y + 8, enemyBombShot);
    1bfa:	64 81       	ldd	r22, Z+4	; 0x04
    1bfc:	68 5f       	subi	r22, 0xF8	; 248
    1bfe:	40 e9       	ldi	r20, 0x90	; 144
    1c00:	8c 5f       	subi	r24, 0xFC	; 252
    1c02:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <spawnShot>
						tone(600, 100, 10, -1);
    1c06:	2f ef       	ldi	r18, 0xFF	; 255
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4a e0       	ldi	r20, 0x0A	; 10
    1c0c:	64 e6       	ldi	r22, 0x64	; 100
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	88 e5       	ldi	r24, 0x58	; 88
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
					}
					if (enemy[g].timer) {
    1c18:	8d e0       	ldi	r24, 0x0D	; 13
    1c1a:	8e 9d       	mul	r24, r14
    1c1c:	f0 01       	movw	r30, r0
    1c1e:	8f 9d       	mul	r24, r15
    1c20:	f0 0d       	add	r31, r0
    1c22:	11 24       	eor	r1, r1
    1c24:	e5 59       	subi	r30, 0x95	; 149
    1c26:	f2 4c       	sbci	r31, 0xC2	; 194
    1c28:	83 85       	ldd	r24, Z+11	; 0x0b
    1c2a:	94 85       	ldd	r25, Z+12	; 0x0c
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	59 f0       	breq	.+22     	; 0x1c46 <enemies+0x8aa>
						enemy[g].timer--;
    1c30:	2d e0       	ldi	r18, 0x0D	; 13
    1c32:	2e 9d       	mul	r18, r14
    1c34:	f0 01       	movw	r30, r0
    1c36:	2f 9d       	mul	r18, r15
    1c38:	f0 0d       	add	r31, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	e5 59       	subi	r30, 0x95	; 149
    1c3e:	f2 4c       	sbci	r31, 0xC2	; 194
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	83 87       	std	Z+11, r24	; 0x0b
    1c44:	94 87       	std	Z+12, r25	; 0x0c

}

void enemies() {

	for (int g = 0 ; g < maxEnemies ; g++) {
    1c46:	5f ef       	ldi	r21, 0xFF	; 255
    1c48:	e5 1a       	sub	r14, r21
    1c4a:	f5 0a       	sbc	r15, r21
    1c4c:	80 e1       	ldi	r24, 0x10	; 16
    1c4e:	e8 16       	cp	r14, r24
    1c50:	f1 04       	cpc	r15, r1
    1c52:	0c f4       	brge	.+2      	; 0x1c56 <enemies+0x8ba>
    1c54:	b0 cb       	rjmp	.-2208   	; 0x13b6 <enemies+0x1a>
						
			}		
		}	
	}

}
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	bf 90       	pop	r11
    1c68:	af 90       	pop	r10
    1c6a:	08 95       	ret

00001c6c <clearObjects>:
	
}

void clearObjects() {
	
	for (int g = 0 ; g < 3 ; g++) {
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e c0       	rjmp	.+28     	; 0x1c8e <clearObjects+0x22>
		heroShots[g].y = spriteOff;
    1c72:	fc 01       	movw	r30, r24
    1c74:	ee 0f       	add	r30, r30
    1c76:	ff 1f       	adc	r31, r31
    1c78:	e8 0f       	add	r30, r24
    1c7a:	f9 1f       	adc	r31, r25
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	e3 5b       	subi	r30, 0xB3	; 179
    1c82:	f3 4c       	sbci	r31, 0xC3	; 195
    1c84:	20 e8       	ldi	r18, 0x80	; 128
    1c86:	3f ef       	ldi	r19, 0xFF	; 255
    1c88:	22 83       	std	Z+2, r18	; 0x02
    1c8a:	33 83       	std	Z+3, r19	; 0x03
	
}

void clearObjects() {
	
	for (int g = 0 ; g < 3 ; g++) {
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	83 30       	cpi	r24, 0x03	; 3
    1c90:	91 05       	cpc	r25, r1
    1c92:	7c f3       	brlt	.-34     	; 0x1c72 <clearObjects+0x6>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e c0       	rjmp	.+28     	; 0x1cb6 <clearObjects+0x4a>
		heroShots[g].y = spriteOff;
	}	
	
	for (int g = 0 ; g < maxEnemies ; g++) {
		enemy[g].y = spriteOff;
    1c9a:	2d e0       	ldi	r18, 0x0D	; 13
    1c9c:	28 9f       	mul	r18, r24
    1c9e:	f0 01       	movw	r30, r0
    1ca0:	29 9f       	mul	r18, r25
    1ca2:	f0 0d       	add	r31, r0
    1ca4:	11 24       	eor	r1, r1
    1ca6:	e5 59       	subi	r30, 0x95	; 149
    1ca8:	f2 4c       	sbci	r31, 0xC2	; 194
    1caa:	20 e8       	ldi	r18, 0x80	; 128
    1cac:	24 83       	std	Z+4, r18	; 0x04
		enemy[g].mirror = 1;
    1cae:	21 e0       	ldi	r18, 0x01	; 1
    1cb0:	26 83       	std	Z+6, r18	; 0x06
		enemy[g].grounded = 0;
    1cb2:	12 86       	std	Z+10, r1	; 0x0a
	
	for (int g = 0 ; g < 3 ; g++) {
		heroShots[g].y = spriteOff;
	}	
	
	for (int g = 0 ; g < maxEnemies ; g++) {
    1cb4:	01 96       	adiw	r24, 0x01	; 1
    1cb6:	80 31       	cpi	r24, 0x10	; 16
    1cb8:	91 05       	cpc	r25, r1
    1cba:	7c f3       	brlt	.-34     	; 0x1c9a <clearObjects+0x2e>
		enemy[g].y = spriteOff;
		enemy[g].mirror = 1;
		enemy[g].grounded = 0;
	}
		
}
    1cbc:	08 95       	ret

00001cbe <startNewLife>:
	
}

void startNewLife() {

	distance = 0;			//How many screens to the next goal
    1cbe:	10 92 5f 3d 	sts	0x3D5F, r1	; 0x803d5f <distance>
	frameCounter = 0;
    1cc2:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <frameCounter>
    1cc6:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <frameCounter+0x1>
	gameState = stateGetReady;
    1cca:	89 e0       	ldi	r24, 0x09	; 9
    1ccc:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <gameState>
	playerState = playerDriving;	
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <playerState>

	frameCounter = 0;

	spawnPointer = 224 + 20;
    1cd6:	84 ef       	ldi	r24, 0xF4	; 244
    1cd8:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <spawnPointer>

	bugX = 16;
    1cdc:	80 e1       	ldi	r24, 0x10	; 16
    1cde:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <bugX>
	bugY = 51;
    1ce2:	83 e3       	ldi	r24, 0x33	; 51
    1ce4:	80 93 0d 38 	sts	0x380D, r24	; 0x80380d <bugY>
	blasterX = spriteOff;						//Disabled state
    1ce8:	80 e8       	ldi	r24, 0x80	; 128
    1cea:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
	
	clearObjects();
    1cee:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <clearObjects>
    1cf2:	08 95       	ret

00001cf4 <playerLogic>:
	distanceGoal = theGoal;
	byDistance = 1;
	
}

void playerLogic() {
    1cf4:	0f 93       	push	r16
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
	
	xWindowCoarse = (xWindow + bugX) >> 3;
    1cfa:	60 91 0e 38 	lds	r22, 0x380E	; 0x80380e <bugX>
    1cfe:	20 91 31 38 	lds	r18, 0x3831	; 0x803831 <xWindow>
    1d02:	86 2f       	mov	r24, r22
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	82 0f       	add	r24, r18
    1d08:	91 1d       	adc	r25, r1
    1d0a:	95 95       	asr	r25
    1d0c:	87 95       	ror	r24
    1d0e:	95 95       	asr	r25
    1d10:	87 95       	ror	r24
    1d12:	95 95       	asr	r25
    1d14:	87 95       	ror	r24
    1d16:	80 93 2f 38 	sts	0x382F, r24	; 0x80382f <xWindowCoarse>
    1d1a:	90 93 30 38 	sts	0x3830, r25	; 0x803830 <xWindowCoarse+0x1>
	
	uint8_t suspension = 0;

	switch(playerState) {
    1d1e:	20 91 2a 38 	lds	r18, 0x382A	; 0x80382a <playerState>
    1d22:	22 30       	cpi	r18, 0x02	; 2
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <playerLogic+0x34>
    1d26:	79 c0       	rjmp	.+242    	; 0x1e1a <playerLogic+0x126>
    1d28:	18 f4       	brcc	.+6      	; 0x1d30 <playerLogic+0x3c>
    1d2a:	21 30       	cpi	r18, 0x01	; 1
    1d2c:	11 f1       	breq	.+68     	; 0x1d72 <playerLogic+0x7e>
    1d2e:	09 c1       	rjmp	.+530    	; 0x1f42 <playerLogic+0x24e>
    1d30:	20 31       	cpi	r18, 0x10	; 16
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <playerLogic+0x42>
    1d34:	a3 c0       	rjmp	.+326    	; 0x1e7c <playerLogic+0x188>
    1d36:	20 32       	cpi	r18, 0x20	; 32
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <playerLogic+0x48>
    1d3a:	ea c0       	rjmp	.+468    	; 0x1f10 <playerLogic+0x21c>
    1d3c:	02 c1       	rjmp	.+516    	; 0x1f42 <playerLogic+0x24e>
		
		case playerDriving:
			for (int x = 0 ; x < 3 ; x++) {
				wheelXcoarseTile[x] = 225 + xWindowCoarse + x;
    1d3e:	58 2f       	mov	r21, r24
    1d40:	52 0f       	add	r21, r18
    1d42:	5f 51       	subi	r21, 0x1F	; 31
    1d44:	f9 01       	movw	r30, r18
    1d46:	e6 5f       	subi	r30, 0xF6	; 246
    1d48:	f7 4c       	sbci	r31, 0xC7	; 199
    1d4a:	50 83       	st	Z, r21
				if (wheelXcoarseTile[x] < 225) {
    1d4c:	51 3e       	cpi	r21, 0xE1	; 225
    1d4e:	28 f4       	brcc	.+10     	; 0x1d5a <playerLogic+0x66>
					wheelXcoarseTile[x] -= 32;
    1d50:	f9 01       	movw	r30, r18
    1d52:	e6 5f       	subi	r30, 0xF6	; 246
    1d54:	f7 4c       	sbci	r31, 0xC7	; 199
    1d56:	50 52       	subi	r21, 0x20	; 32
    1d58:	50 83       	st	Z, r21
				}
				suspension += tileMap[wheelXcoarseTile[x]];
    1d5a:	f9 01       	movw	r30, r18
    1d5c:	e6 5f       	subi	r30, 0xF6	; 246
    1d5e:	f7 4c       	sbci	r31, 0xC7	; 199
    1d60:	e0 81       	ld	r30, Z
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	e1 5a       	subi	r30, 0xA1	; 161
    1d66:	f3 4c       	sbci	r31, 0xC3	; 195
    1d68:	50 81       	ld	r21, Z
    1d6a:	45 0f       	add	r20, r21
	uint8_t suspension = 0;

	switch(playerState) {
		
		case playerDriving:
			for (int x = 0 ; x < 3 ; x++) {
    1d6c:	2f 5f       	subi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <playerLogic+0x84>
	
	xWindowCoarse = (xWindow + bugX) >> 3;
	
	uint8_t suspension = 0;

	switch(playerState) {
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
		
		case playerDriving:
			for (int x = 0 ; x < 3 ; x++) {
    1d78:	23 30       	cpi	r18, 0x03	; 3
    1d7a:	31 05       	cpc	r19, r1
    1d7c:	04 f3       	brlt	.-64     	; 0x1d3e <playerLogic+0x4a>
					wheelXcoarseTile[x] -= 32;
				}
				suspension += tileMap[wheelXcoarseTile[x]];
			}
			
			if (frameCounter & 1) {
    1d7e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    1d82:	80 ff       	sbrs	r24, 0
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <playerLogic+0x9a>
				wheelSpin = -1;
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <wheelSpin>
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <playerLogic+0xa0>
			}
			else {
				wheelSpin = 1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <wheelSpin>
			}

			drawSprite(buggie, bugX, bugY - (6 - (suspension >> 1)), 0, 1);
    1d94:	46 95       	lsr	r20
    1d96:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    1d9a:	48 0f       	add	r20, r24
    1d9c:	46 50       	subi	r20, 0x06	; 6
    1d9e:	01 e0       	ldi	r16, 0x01	; 1
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	82 e9       	ldi	r24, 0x92	; 146
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			drawSprite(wheel, bugX, bugY + tileMap[wheelXcoarseTile[0]], 0, wheelSpin);
    1daa:	ca e0       	ldi	r28, 0x0A	; 10
    1dac:	d8 e3       	ldi	r29, 0x38	; 56
    1dae:	e8 81       	ld	r30, Y
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	e1 5a       	subi	r30, 0xA1	; 161
    1db4:	f3 4c       	sbci	r31, 0xC3	; 195
    1db6:	40 81       	ld	r20, Z
    1db8:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    1dbc:	48 0f       	add	r20, r24
    1dbe:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <wheelSpin>
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	60 91 0e 38 	lds	r22, 0x380E	; 0x80380e <bugX>
    1dc8:	84 ec       	ldi	r24, 0xC4	; 196
    1dca:	93 e0       	ldi	r25, 0x03	; 3
    1dcc:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			drawSprite(wheel, bugX + 8, bugY + tileMap[wheelXcoarseTile[1]], 0, wheelSpin);
    1dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	e1 5a       	subi	r30, 0xA1	; 161
    1dd6:	f3 4c       	sbci	r31, 0xC3	; 195
    1dd8:	40 81       	ld	r20, Z
    1dda:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    1dde:	48 0f       	add	r20, r24
    1de0:	60 91 0e 38 	lds	r22, 0x380E	; 0x80380e <bugX>
    1de4:	68 5f       	subi	r22, 0xF8	; 248
    1de6:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <wheelSpin>
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	84 ec       	ldi	r24, 0xC4	; 196
    1dee:	93 e0       	ldi	r25, 0x03	; 3
    1df0:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			drawSprite(wheel, bugX + 16, bugY + tileMap[wheelXcoarseTile[2]], 0, wheelSpin);		
    1df4:	ea 81       	ldd	r30, Y+2	; 0x02
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	e1 5a       	subi	r30, 0xA1	; 161
    1dfa:	f3 4c       	sbci	r31, 0xC3	; 195
    1dfc:	40 81       	ld	r20, Z
    1dfe:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    1e02:	48 0f       	add	r20, r24
    1e04:	60 91 0e 38 	lds	r22, 0x380E	; 0x80380e <bugX>
    1e08:	60 5f       	subi	r22, 0xF0	; 240
    1e0a:	00 91 09 38 	lds	r16, 0x3809	; 0x803809 <wheelSpin>
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	84 ec       	ldi	r24, 0xC4	; 196
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
		break;
    1e18:	94 c0       	rjmp	.+296    	; 0x1f42 <playerLogic+0x24e>
		
		case playerJumping:
			drawSprite(buggie, bugX, bugY, 0, 1);
    1e1a:	01 e0       	ldi	r16, 0x01	; 1
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	40 91 0d 38 	lds	r20, 0x380D	; 0x80380d <bugY>
    1e22:	82 e9       	ldi	r24, 0x92	; 146
    1e24:	93 e0       	ldi	r25, 0x03	; 3
    1e26:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			uint8_t wheelOffset = 6;
			if (jump > 24) {
    1e2a:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <jump>
    1e2e:	89 31       	cpi	r24, 0x19	; 25
    1e30:	10 f4       	brcc	.+4      	; 0x1e36 <playerLogic+0x142>
			drawSprite(wheel, bugX + 16, bugY + tileMap[wheelXcoarseTile[2]], 0, wheelSpin);		
		break;
		
		case playerJumping:
			drawSprite(buggie, bugX, bugY, 0, 1);
			uint8_t wheelOffset = 6;
    1e32:	c6 e0       	ldi	r28, 0x06	; 6
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <playerLogic+0x144>
			if (jump > 24) {
				wheelOffset = 4;
    1e36:	c4 e0       	ldi	r28, 0x04	; 4
			}
			drawSprite(wheel, bugX, bugY + wheelOffset, 0, 1);
    1e38:	40 91 0d 38 	lds	r20, 0x380D	; 0x80380d <bugY>
    1e3c:	4c 0f       	add	r20, r28
    1e3e:	01 e0       	ldi	r16, 0x01	; 1
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	60 91 0e 38 	lds	r22, 0x380E	; 0x80380e <bugX>
    1e46:	84 ec       	ldi	r24, 0xC4	; 196
    1e48:	93 e0       	ldi	r25, 0x03	; 3
    1e4a:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			drawSprite(wheel, bugX + 8, bugY + wheelOffset, 0, 1);
    1e4e:	40 91 0d 38 	lds	r20, 0x380D	; 0x80380d <bugY>
    1e52:	4c 0f       	add	r20, r28
    1e54:	60 91 0e 38 	lds	r22, 0x380E	; 0x80380e <bugX>
    1e58:	68 5f       	subi	r22, 0xF8	; 248
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	84 ec       	ldi	r24, 0xC4	; 196
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			drawSprite(wheel, bugX + 16, bugY + wheelOffset, 0, 1);		
    1e64:	40 91 0d 38 	lds	r20, 0x380D	; 0x80380d <bugY>
    1e68:	4c 0f       	add	r20, r28
    1e6a:	60 91 0e 38 	lds	r22, 0x380E	; 0x80380e <bugX>
    1e6e:	60 5f       	subi	r22, 0xF0	; 240
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	84 ec       	ldi	r24, 0xC4	; 196
    1e74:	93 e0       	ldi	r25, 0x03	; 3
    1e76:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
		break;
    1e7a:	63 c0       	rjmp	.+198    	; 0x1f42 <playerLogic+0x24e>

		case playerExploding:
			bugX--;
    1e7c:	8f ef       	ldi	r24, 0xFF	; 255
    1e7e:	86 0f       	add	r24, r22
    1e80:	80 93 0e 38 	sts	0x380E, r24	; 0x80380e <bugX>
			drawSprite(vertExplode, bugX + 4, bugY - 16, playerFrame, 1);
    1e84:	40 91 0d 38 	lds	r20, 0x380D	; 0x80380d <bugY>
    1e88:	40 51       	subi	r20, 0x10	; 16
    1e8a:	6d 5f       	subi	r22, 0xFD	; 253
    1e8c:	01 e0       	ldi	r16, 0x01	; 1
    1e8e:	20 91 26 38 	lds	r18, 0x3826	; 0x803826 <playerFrame>
    1e92:	8c e7       	ldi	r24, 0x7C	; 124
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
			tone(playerTimer * 300, 20, 10, 5);
    1e9a:	e0 91 28 38 	lds	r30, 0x3828	; 0x803828 <playerTimer>
    1e9e:	f0 91 29 38 	lds	r31, 0x3829	; 0x803829 <playerTimer+0x1>
    1ea2:	25 e0       	ldi	r18, 0x05	; 5
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a e0       	ldi	r20, 0x0A	; 10
    1ea8:	64 e1       	ldi	r22, 0x14	; 20
    1eaa:	70 e0       	ldi	r23, 0x00	; 0
    1eac:	8c e2       	ldi	r24, 0x2C	; 44
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	ea 9f       	mul	r30, r26
    1eb4:	c0 01       	movw	r24, r0
    1eb6:	eb 9f       	mul	r30, r27
    1eb8:	90 0d       	add	r25, r0
    1eba:	fa 9f       	mul	r31, r26
    1ebc:	90 0d       	add	r25, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
			if (--playerTimer == 0) {
    1ec4:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <playerTimer>
    1ec8:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <playerTimer+0x1>
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <playerTimer>
    1ed2:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <playerTimer+0x1>
    1ed6:	89 2b       	or	r24, r25
    1ed8:	a1 f5       	brne	.+104    	; 0x1f42 <playerLogic+0x24e>
				playerTimer = 5;
    1eda:	85 e0       	ldi	r24, 0x05	; 5
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <playerTimer>
    1ee2:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <playerTimer+0x1>
				if (++playerFrame == 4) {
    1ee6:	80 91 26 38 	lds	r24, 0x3826	; 0x803826 <playerFrame>
    1eea:	90 91 27 38 	lds	r25, 0x3827	; 0x803827 <playerFrame+0x1>
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	80 93 26 38 	sts	0x3826, r24	; 0x803826 <playerFrame>
    1ef4:	90 93 27 38 	sts	0x3827, r25	; 0x803827 <playerFrame+0x1>
    1ef8:	04 97       	sbiw	r24, 0x04	; 4
    1efa:	19 f5       	brne	.+70     	; 0x1f42 <playerLogic+0x24e>
					playerState = playerDead;
    1efc:	80 e2       	ldi	r24, 0x20	; 32
    1efe:	80 93 2a 38 	sts	0x382A, r24	; 0x80382a <playerState>
					playerTimer = 60;
    1f02:	8c e3       	ldi	r24, 0x3C	; 60
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <playerTimer>
    1f0a:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <playerTimer+0x1>
    1f0e:	19 c0       	rjmp	.+50     	; 0x1f42 <playerLogic+0x24e>
				}
			}
		break;
		
		case playerDead:	
			if (--playerTimer == 0) {
    1f10:	80 91 28 38 	lds	r24, 0x3828	; 0x803828 <playerTimer>
    1f14:	90 91 29 38 	lds	r25, 0x3829	; 0x803829 <playerTimer+0x1>
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	80 93 28 38 	sts	0x3828, r24	; 0x803828 <playerTimer>
    1f1e:	90 93 29 38 	sts	0x3829, r25	; 0x803829 <playerTimer+0x1>
    1f22:	89 2b       	or	r24, r25
    1f24:	71 f4       	brne	.+28     	; 0x1f42 <playerLogic+0x24e>
				if (lives == 255) {				//Rolls under from to 255?
    1f26:	80 91 6a 3d 	lds	r24, 0x3D6A	; 0x803d6a <lives>
    1f2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2c:	41 f4       	brne	.+16     	; 0x1f3e <playerLogic+0x24a>
				//if (--lives == 255) {				//Rolls under from to 255?
					gameState = stateGameOver;
    1f2e:	88 e0       	ldi	r24, 0x08	; 8
    1f30:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <gameState>
					frameCounter = 0;									
    1f34:	10 92 2d 38 	sts	0x382D, r1	; 0x80382d <frameCounter>
    1f38:	10 92 2e 38 	sts	0x382E, r1	; 0x80382e <frameCounter+0x1>
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <playerLogic+0x24e>
				}
				else {
					startNewLife();	
    1f3e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <startNewLife>
			}				
		break;
	
	}

	shotLogic();
    1f42:	0e 94 5e 09 	call	0x12bc	; 0x12bc <shotLogic>
	
	if (blasterX != spriteOff) {							//Blaster shot active? (the front shot)
    1f46:	60 91 02 38 	lds	r22, 0x3802	; 0x803802 <blasterX>
    1f4a:	60 38       	cpi	r22, 0x80	; 128
    1f4c:	d1 f0       	breq	.+52     	; 0x1f82 <playerLogic+0x28e>
		drawSprite(blaster, blasterX, blasterY, (frameCounter >> 2) & 1, 1);
    1f4e:	20 91 2d 38 	lds	r18, 0x382D	; 0x80382d <frameCounter>
    1f52:	30 91 2e 38 	lds	r19, 0x382E	; 0x80382e <frameCounter+0x1>
    1f56:	36 95       	lsr	r19
    1f58:	27 95       	ror	r18
    1f5a:	36 95       	lsr	r19
    1f5c:	27 95       	ror	r18
    1f5e:	21 70       	andi	r18, 0x01	; 1
    1f60:	01 e0       	ldi	r16, 0x01	; 1
    1f62:	40 91 1c 38 	lds	r20, 0x381C	; 0x80381c <blasterY>
    1f66:	80 e5       	ldi	r24, 0x50	; 80
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	0e 94 42 05 	call	0xa84	; 0xa84 <drawSprite>
		blasterX += 2;
    1f6e:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <blasterX>
    1f72:	8e 5f       	subi	r24, 0xFE	; 254
    1f74:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
		if (blasterX > 125) {								//Shot at edge of screen? Despawn it
    1f78:	8e 37       	cpi	r24, 0x7E	; 126
    1f7a:	1c f0       	brlt	.+6      	; 0x1f82 <playerLogic+0x28e>
			blasterX = spriteOff;
    1f7c:	80 e8       	ldi	r24, 0x80	; 128
    1f7e:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
		}			
	}
	
	if (jump) {
    1f82:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <jump>
    1f86:	88 23       	and	r24, r24
    1f88:	79 f1       	breq	.+94     	; 0x1fe8 <playerLogic+0x2f4>
		bugY += jumpVelocity[(jump - 1) >> 1];
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	31 97       	sbiw	r30, 0x01	; 1
    1f90:	ee 7f       	andi	r30, 0xFE	; 254
    1f92:	e8 57       	subi	r30, 0x78	; 120
    1f94:	f1 45       	sbci	r31, 0x51	; 81
    1f96:	20 81       	ld	r18, Z
    1f98:	30 91 0d 38 	lds	r19, 0x380D	; 0x80380d <bugY>
    1f9c:	23 0f       	add	r18, r19
    1f9e:	20 93 0d 38 	sts	0x380D, r18	; 0x80380d <bugY>
			
		tone(jump * 500, 20, 8, 0);
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	48 e0       	ldi	r20, 0x08	; 8
    1fa8:	64 e1       	ldi	r22, 0x14	; 20
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	e4 ef       	ldi	r30, 0xF4	; 244
    1fae:	f1 e0       	ldi	r31, 0x01	; 1
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	ae 9f       	mul	r26, r30
    1fb4:	c0 01       	movw	r24, r0
    1fb6:	af 9f       	mul	r26, r31
    1fb8:	90 0d       	add	r25, r0
    1fba:	be 9f       	mul	r27, r30
    1fbc:	90 0d       	add	r25, r0
    1fbe:	11 24       	eor	r1, r1
    1fc0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
			
		if (++jump == 33) {
    1fc4:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <jump>
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	80 93 2b 38 	sts	0x382B, r24	; 0x80382b <jump>
    1fce:	81 32       	cpi	r24, 0x21	; 33
    1fd0:	59 f4       	brne	.+22     	; 0x1fe8 <playerLogic+0x2f4>
			jump = 0;
    1fd2:	10 92 2b 38 	sts	0x382B, r1	; 0x80382b <jump>
			tone(10000, 200, 8, 0);
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	48 e0       	ldi	r20, 0x08	; 8
    1fdc:	68 ec       	ldi	r22, 0xC8	; 200
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	80 e1       	ldi	r24, 0x10	; 16
    1fe2:	97 e2       	ldi	r25, 0x27	; 39
    1fe4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
		}
			
	}	

	if (playerState & playerAlive) {				//Controls don't work if you're DEAD!
    1fe8:	80 91 2a 38 	lds	r24, 0x382A	; 0x80382a <playerState>
    1fec:	83 70       	andi	r24, 0x03	; 3
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <playerLogic+0x2fe>
    1ff0:	c5 c0       	rjmp	.+394    	; 0x217c <playerLogic+0x488>
		if (gamePad & dLeft) {
    1ff2:	80 91 60 3d 	lds	r24, 0x3D60	; 0x803d60 <gamePad>
    1ff6:	82 ff       	sbrs	r24, 2
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <playerLogic+0x314>
			if (bugX > 0) {
    1ffa:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <bugX>
    1ffe:	99 23       	and	r25, r25
    2000:	19 f0       	breq	.+6      	; 0x2008 <playerLogic+0x314>
				bugX--;
    2002:	91 50       	subi	r25, 0x01	; 1
    2004:	90 93 0e 38 	sts	0x380E, r25	; 0x80380e <bugX>
			}
		}
		if (gamePad & dRight) {
    2008:	83 ff       	sbrs	r24, 3
    200a:	07 c0       	rjmp	.+14     	; 0x201a <playerLogic+0x326>
			if (bugX < 103) {
    200c:	90 91 0e 38 	lds	r25, 0x380E	; 0x80380e <bugX>
    2010:	97 36       	cpi	r25, 0x67	; 103
    2012:	18 f4       	brcc	.+6      	; 0x201a <playerLogic+0x326>
				bugX++;
    2014:	9f 5f       	subi	r25, 0xFF	; 255
    2016:	90 93 0e 38 	sts	0x380E, r25	; 0x80380e <bugX>
			}
		}
	
		if (gamePad & dDown) {
    201a:	81 ff       	sbrs	r24, 1
    201c:	27 c0       	rjmp	.+78     	; 0x206c <playerLogic+0x378>
			if (buttonFire & dDown) {			//Bit set saying we can jump because we released the button?
    201e:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <buttonFire>
    2022:	81 ff       	sbrs	r24, 1
    2024:	28 c0       	rjmp	.+80     	; 0x2076 <playerLogic+0x382>
				buttonFire &= !dDown;			//Clear bit
    2026:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <buttonFire>
				if (getRandom(0x01)) {
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    2030:	88 23       	and	r24, r24
    2032:	71 f0       	breq	.+28     	; 0x2050 <playerLogic+0x35c>
					spawnEnemy(-16, getRandom(0x01) * 8, 1, enemyUFO);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    203a:	68 2f       	mov	r22, r24
    203c:	66 0f       	add	r22, r22
    203e:	66 0f       	add	r22, r22
    2040:	66 0f       	add	r22, r22
    2042:	20 e1       	ldi	r18, 0x10	; 16
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	80 ef       	ldi	r24, 0xF0	; 240
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	0e 94 1f 09 	call	0x123e	; 0x123e <spawnEnemy>
    204e:	13 c0       	rjmp	.+38     	; 0x2076 <playerLogic+0x382>
				}
				else {
					spawnEnemy(128, getRandom(0x01) * 8, -1, enemyBalls);
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    2056:	68 2f       	mov	r22, r24
    2058:	66 0f       	add	r22, r22
    205a:	66 0f       	add	r22, r22
    205c:	66 0f       	add	r22, r22
    205e:	20 e2       	ldi	r18, 0x20	; 32
    2060:	4f ef       	ldi	r20, 0xFF	; 255
    2062:	80 e8       	ldi	r24, 0x80	; 128
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 1f 09 	call	0x123e	; 0x123e <spawnEnemy>
    206a:	05 c0       	rjmp	.+10     	; 0x2076 <playerLogic+0x382>
				}
			
			}
		}
		else {
			buttonFire |= dDown;
    206c:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <buttonFire>
    2070:	82 60       	ori	r24, 0x02	; 2
    2072:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <buttonFire>
		}

		if (gamePad & dA) {
    2076:	80 91 60 3d 	lds	r24, 0x3D60	; 0x803d60 <gamePad>
    207a:	88 23       	and	r24, r24
    207c:	74 f4       	brge	.+28     	; 0x209a <playerLogic+0x3a6>
			if (buttonFire & dA) {			//Bit set saying we can jump because we released the button?
    207e:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <buttonFire>
    2082:	99 23       	and	r25, r25
    2084:	7c f4       	brge	.+30     	; 0x20a4 <playerLogic+0x3b0>
				buttonFire &= !dA;			//Clear bit
    2086:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <buttonFire>
				if (jump == 0) {			//Jump!
    208a:	90 91 2b 38 	lds	r25, 0x382B	; 0x80382b <jump>
    208e:	91 11       	cpse	r25, r1
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <playerLogic+0x3b0>
					jump = 1;
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	90 93 2b 38 	sts	0x382B, r25	; 0x80382b <jump>
    2098:	05 c0       	rjmp	.+10     	; 0x20a4 <playerLogic+0x3b0>
				}
			}
		}
		else {
			buttonFire |= dA;
    209a:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <buttonFire>
    209e:	90 68       	ori	r25, 0x80	; 128
    20a0:	90 93 1b 38 	sts	0x381B, r25	; 0x80381b <buttonFire>
		}



		if (gamePad & dB) {
    20a4:	86 ff       	sbrs	r24, 6
    20a6:	65 c0       	rjmp	.+202    	; 0x2172 <playerLogic+0x47e>
			if (buttonFire & dB) {			//Bit set saying we can fire because we released the button?
    20a8:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <buttonFire>
    20ac:	86 ff       	sbrs	r24, 6
    20ae:	66 c0       	rjmp	.+204    	; 0x217c <playerLogic+0x488>
				buttonFire &= !dB;			//Clear bit
    20b0:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <buttonFire>

				//spawnShot(64, 0, enemyWaveShot);
				//spawnShot(115, 0, enemyBombShot);
			
				if (heroShots[shotPointer].y == spriteOff) {		//This sprite is eligible to be spawn
    20b4:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <shotPointer>
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	fc 01       	movw	r30, r24
    20bc:	ee 0f       	add	r30, r30
    20be:	ff 1f       	adc	r31, r31
    20c0:	e8 0f       	add	r30, r24
    20c2:	f9 1f       	adc	r31, r25
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	e3 5b       	subi	r30, 0xB3	; 179
    20ca:	f3 4c       	sbci	r31, 0xC3	; 195
    20cc:	22 81       	ldd	r18, Z+2	; 0x02
    20ce:	33 81       	ldd	r19, Z+3	; 0x03
    20d0:	20 38       	cpi	r18, 0x80	; 128
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	61 f5       	brne	.+88     	; 0x212e <playerLogic+0x43a>
					heroShots[shotPointer].x = bugX + 2;			//X position
    20d6:	20 91 0e 38 	lds	r18, 0x380E	; 0x80380e <bugX>
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	2e 5f       	subi	r18, 0xFE	; 254
    20de:	3f 4f       	sbci	r19, 0xFF	; 255
    20e0:	fc 01       	movw	r30, r24
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	df 01       	movw	r26, r30
    20e8:	a8 0f       	add	r26, r24
    20ea:	b9 1f       	adc	r27, r25
    20ec:	aa 0f       	add	r26, r26
    20ee:	bb 1f       	adc	r27, r27
    20f0:	a3 5b       	subi	r26, 0xB3	; 179
    20f2:	b3 4c       	sbci	r27, 0xC3	; 195
    20f4:	2d 93       	st	X+, r18
    20f6:	3c 93       	st	X, r19
    20f8:	11 97       	sbiw	r26, 0x01	; 1
					heroShots[shotPointer].y = bugY - 8;
    20fa:	20 91 0d 38 	lds	r18, 0x380D	; 0x80380d <bugY>
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	28 50       	subi	r18, 0x08	; 8
    2102:	31 09       	sbc	r19, r1
    2104:	fd 01       	movw	r30, r26
    2106:	22 83       	std	Z+2, r18	; 0x02
    2108:	33 83       	std	Z+3, r19	; 0x03
				
					tone(800, 100, 10, 10);
    210a:	2a e0       	ldi	r18, 0x0A	; 10
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a e0       	ldi	r20, 0x0A	; 10
    2110:	64 e6       	ldi	r22, 0x64	; 100
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	80 e2       	ldi	r24, 0x20	; 32
    2116:	93 e0       	ldi	r25, 0x03	; 3
    2118:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
				
					if (++shotPointer > 1) {
    211c:	80 91 1e 38 	lds	r24, 0x381E	; 0x80381e <shotPointer>
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	80 93 1e 38 	sts	0x381E, r24	; 0x80381e <shotPointer>
    2126:	82 30       	cpi	r24, 0x02	; 2
    2128:	10 f0       	brcs	.+4      	; 0x212e <playerLogic+0x43a>
						shotPointer = 0;
    212a:	10 92 1e 38 	sts	0x381E, r1	; 0x80381e <shotPointer>
					}
				}
			
				if (blasterX == spriteOff) {			//Can fire hori shot?
    212e:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <blasterX>
    2132:	80 38       	cpi	r24, 0x80	; 128
    2134:	19 f5       	brne	.+70     	; 0x217c <playerLogic+0x488>
					blasterX = bugX + 16;				//Blaster in front of buggie
    2136:	80 91 0e 38 	lds	r24, 0x380E	; 0x80380e <bugX>
    213a:	80 5f       	subi	r24, 0xF0	; 240
    213c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <blasterX>
					tone(800, 100, 10, 10);
    2140:	2a e0       	ldi	r18, 0x0A	; 10
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a e0       	ldi	r20, 0x0A	; 10
    2146:	64 e6       	ldi	r22, 0x64	; 100
    2148:	70 e0       	ldi	r23, 0x00	; 0
    214a:	80 e2       	ldi	r24, 0x20	; 32
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <tone>
					if (jump) {
    2152:	80 91 2b 38 	lds	r24, 0x382B	; 0x80382b <jump>
    2156:	88 23       	and	r24, r24
    2158:	31 f0       	breq	.+12     	; 0x2166 <playerLogic+0x472>
						blasterY = bugY + 2;
    215a:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    215e:	8e 5f       	subi	r24, 0xFE	; 254
    2160:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <blasterY>
    2164:	0b c0       	rjmp	.+22     	; 0x217c <playerLogic+0x488>
					}
					else {
						blasterY = bugY - 3;
    2166:	80 91 0d 38 	lds	r24, 0x380D	; 0x80380d <bugY>
    216a:	83 50       	subi	r24, 0x03	; 3
    216c:	80 93 1c 38 	sts	0x381C, r24	; 0x80381c <blasterY>
    2170:	05 c0       	rjmp	.+10     	; 0x217c <playerLogic+0x488>
				}

			}
		}
		else {
			buttonFire |= dB;
    2172:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <buttonFire>
    2176:	80 64       	ori	r24, 0x40	; 64
    2178:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <buttonFire>
	


	//addSeed(gamePad);			//Use controls to help random seed
	
}
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	0f 91       	pop	r16
    2182:	08 95       	ret

00002184 <startNewGame>:
		
}

void startNewGame() {

	stage = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	80 93 62 3d 	sts	0x3D62, r24	; 0x803d62 <stage>
	checkPoint = 4;			//Which goal you've reached (0=A, 5=F)
    218a:	84 e0       	ldi	r24, 0x04	; 4
    218c:	80 93 3d 3e 	sts	0x3E3D, r24	; 0x803e3d <checkPoint>
	score = 0;
    2190:	10 92 63 3d 	sts	0x3D63, r1	; 0x803d63 <score>
    2194:	10 92 64 3d 	sts	0x3D64, r1	; 0x803d64 <score+0x1>
    2198:	10 92 65 3d 	sts	0x3D65, r1	; 0x803d65 <score+0x2>
    219c:	10 92 66 3d 	sts	0x3D66, r1	; 0x803d66 <score+0x3>
	lives = 2;
    21a0:	82 e0       	ldi	r24, 0x02	; 2
    21a2:	80 93 6a 3d 	sts	0x3D6A, r24	; 0x803d6a <lives>
	
	startNewLife();
    21a6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <startNewLife>
    21aa:	08 95       	ret

000021ac <fillTiles>:
	
}

void fillTiles(uint8_t location, uint8_t startingTile, uint8_t howMany) {
	
	for (int x = location ; x < location + howMany ; x++) {
    21ac:	a8 2f       	mov	r26, r24
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	cd 01       	movw	r24, r26
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <fillTiles+0x14>
		tileMap[x] = startingTile++;
    21b4:	fc 01       	movw	r30, r24
    21b6:	e1 5a       	subi	r30, 0xA1	; 161
    21b8:	f3 4c       	sbci	r31, 0xC3	; 195
    21ba:	60 83       	st	Z, r22
	
}

void fillTiles(uint8_t location, uint8_t startingTile, uint8_t howMany) {
	
	for (int x = location ; x < location + howMany ; x++) {
    21bc:	01 96       	adiw	r24, 0x01	; 1
		tileMap[x] = startingTile++;
    21be:	6f 5f       	subi	r22, 0xFF	; 255
	
}

void fillTiles(uint8_t location, uint8_t startingTile, uint8_t howMany) {
	
	for (int x = location ; x < location + howMany ; x++) {
    21c0:	9d 01       	movw	r18, r26
    21c2:	24 0f       	add	r18, r20
    21c4:	31 1d       	adc	r19, r1
    21c6:	82 17       	cp	r24, r18
    21c8:	93 07       	cpc	r25, r19
    21ca:	a4 f3       	brlt	.-24     	; 0x21b4 <fillTiles+0x8>
		tileMap[x] = startingTile++;
	}
	
}
    21cc:	08 95       	ret

000021ce <drawMountains2>:
	tileMap[192 + 30] = checkPoint + 65;
	messageFlash = 0;
	
}

void drawMountains2(uint8_t vertRow) {
    21ce:	cf 93       	push	r28

	vertRow *= 32;
    21d0:	c8 2f       	mov	r28, r24
    21d2:	c2 95       	swap	r28
    21d4:	cc 0f       	add	r28, r28
    21d6:	c0 7e       	andi	r28, 0xE0	; 224

	fillTiles(vertRow, 8 * 16, 16);				//Draw background mountains
    21d8:	40 e1       	ldi	r20, 0x10	; 16
    21da:	60 e8       	ldi	r22, 0x80	; 128
    21dc:	8c 2f       	mov	r24, r28
    21de:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
	fillTiles(vertRow + 16, 8 * 16, 16);
    21e2:	40 e1       	ldi	r20, 0x10	; 16
    21e4:	60 e8       	ldi	r22, 0x80	; 128
    21e6:	80 e1       	ldi	r24, 0x10	; 16
    21e8:	8c 0f       	add	r24, r28
    21ea:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
	
	tileMap[vertRow + 6] = 32;					//Erase random stars from BG mountains memory
    21ee:	8c 2f       	mov	r24, r28
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	fc 01       	movw	r30, r24
    21f4:	eb 59       	subi	r30, 0x9B	; 155
    21f6:	f3 4c       	sbci	r31, 0xC3	; 195
    21f8:	20 e2       	ldi	r18, 0x20	; 32
    21fa:	20 83       	st	Z, r18
	tileMap[vertRow + 9] = 32;
    21fc:	fc 01       	movw	r30, r24
    21fe:	e8 59       	subi	r30, 0x98	; 152
    2200:	f3 4c       	sbci	r31, 0xC3	; 195
    2202:	20 83       	st	Z, r18
	tileMap[vertRow + 10] = 32;
    2204:	fc 01       	movw	r30, r24
    2206:	e7 59       	subi	r30, 0x97	; 151
    2208:	f3 4c       	sbci	r31, 0xC3	; 195
    220a:	20 83       	st	Z, r18
	
	tileMap[vertRow + 6 + 16] = 32;				//Erase random stars from BG mountains memory
    220c:	fc 01       	movw	r30, r24
    220e:	eb 58       	subi	r30, 0x8B	; 139
    2210:	f3 4c       	sbci	r31, 0xC3	; 195
    2212:	20 83       	st	Z, r18
	tileMap[vertRow + 9 + 16] = 32;
    2214:	fc 01       	movw	r30, r24
    2216:	e8 58       	subi	r30, 0x88	; 136
    2218:	f3 4c       	sbci	r31, 0xC3	; 195
    221a:	20 83       	st	Z, r18
	tileMap[vertRow + 10 + 16] = 32;
    221c:	fc 01       	movw	r30, r24
    221e:	e7 58       	subi	r30, 0x87	; 135
    2220:	f3 4c       	sbci	r31, 0xC3	; 195
    2222:	20 83       	st	Z, r18

	vertRow += 32;
	
	fillTiles(vertRow, 9 * 16, 16);				//Draw lower portion of rear mountains
    2224:	40 e1       	ldi	r20, 0x10	; 16
    2226:	60 e9       	ldi	r22, 0x90	; 144
    2228:	80 e2       	ldi	r24, 0x20	; 32
    222a:	8c 0f       	add	r24, r28
    222c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
	fillTiles(vertRow + 16, 9 * 16, 16);
    2230:	40 e1       	ldi	r20, 0x10	; 16
    2232:	60 e9       	ldi	r22, 0x90	; 144
    2234:	80 e3       	ldi	r24, 0x30	; 48
    2236:	8c 0f       	add	r24, r28
    2238:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
	
}
    223c:	cf 91       	pop	r28
    223e:	08 95       	ret

00002240 <drawDecimal>:
		tileMap[x] = startingTile++;
	}
	
}

void drawDecimal(int32_t theValue, uint8_t *rowRAM) {			//Send up to a 9 digit decimal value to memory
    2240:	4f 92       	push	r4
    2242:	5f 92       	push	r5
    2244:	6f 92       	push	r6
    2246:	7f 92       	push	r7
    2248:	af 92       	push	r10
    224a:	bf 92       	push	r11
    224c:	cf 92       	push	r12
    224e:	df 92       	push	r13
    2250:	ef 92       	push	r14
    2252:	ff 92       	push	r15
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	6b 01       	movw	r12, r22
    225e:	7c 01       	movw	r14, r24
    2260:	8a 01       	movw	r16, r20

	int zPad = 0;							//Flag for zero padding
	uint32_t divider = 100000000;			//Divider starts at 900 million

	for (int xx = 0 ; xx < 9 ; xx++) {		//9 digit number
    2262:	c0 e0       	ldi	r28, 0x00	; 0
    2264:	d0 e0       	ldi	r29, 0x00	; 0
}

void drawDecimal(int32_t theValue, uint8_t *rowRAM) {			//Send up to a 9 digit decimal value to memory

	int zPad = 0;							//Flag for zero padding
	uint32_t divider = 100000000;			//Divider starts at 900 million
    2266:	0f 2e       	mov	r0, r31
    2268:	41 2c       	mov	r4, r1
    226a:	f1 ee       	ldi	r31, 0xE1	; 225
    226c:	5f 2e       	mov	r5, r31
    226e:	f5 ef       	ldi	r31, 0xF5	; 245
    2270:	6f 2e       	mov	r6, r31
    2272:	f5 e0       	ldi	r31, 0x05	; 5
    2274:	7f 2e       	mov	r7, r31
    2276:	f0 2d       	mov	r31, r0
	
}

void drawDecimal(int32_t theValue, uint8_t *rowRAM) {			//Send up to a 9 digit decimal value to memory

	int zPad = 0;							//Flag for zero padding
    2278:	a1 2c       	mov	r10, r1
    227a:	b1 2c       	mov	r11, r1
	uint32_t divider = 100000000;			//Divider starts at 900 million

	for (int xx = 0 ; xx < 9 ; xx++) {		//9 digit number
    227c:	33 c0       	rjmp	.+102    	; 0x22e4 <drawDecimal+0xa4>
		if (theValue >= divider) {
    227e:	6c 2d       	mov	r22, r12
    2280:	7d 2d       	mov	r23, r13
    2282:	8e 2d       	mov	r24, r14
    2284:	9f 2d       	mov	r25, r15
    2286:	c4 14       	cp	r12, r4
    2288:	d5 04       	cpc	r13, r5
    228a:	e6 04       	cpc	r14, r6
    228c:	f7 04       	cpc	r15, r7
    228e:	88 f0       	brcs	.+34     	; 0x22b2 <drawDecimal+0x72>
			*rowRAM++ = '0' + (theValue / divider);
    2290:	a3 01       	movw	r20, r6
    2292:	92 01       	movw	r18, r4
    2294:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodsi4>
    2298:	20 5d       	subi	r18, 0xD0	; 208
    229a:	f8 01       	movw	r30, r16
    229c:	20 83       	st	Z, r18
			theValue %= divider;
    229e:	c6 2e       	mov	r12, r22
    22a0:	d7 2e       	mov	r13, r23
    22a2:	e8 2e       	mov	r14, r24
    22a4:	f9 2e       	mov	r15, r25
	int zPad = 0;							//Flag for zero padding
	uint32_t divider = 100000000;			//Divider starts at 900 million

	for (int xx = 0 ; xx < 9 ; xx++) {		//9 digit number
		if (theValue >= divider) {
			*rowRAM++ = '0' + (theValue / divider);
    22a6:	0f 5f       	subi	r16, 0xFF	; 255
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
			theValue %= divider;
			zPad = 1;
    22aa:	aa 24       	eor	r10, r10
    22ac:	a3 94       	inc	r10
    22ae:	b1 2c       	mov	r11, r1
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <drawDecimal+0x8e>
		}
		else if (zPad || divider == 1) {			
    22b2:	a1 14       	cp	r10, r1
    22b4:	b1 04       	cpc	r11, r1
    22b6:	31 f4       	brne	.+12     	; 0x22c4 <drawDecimal+0x84>
    22b8:	f1 e0       	ldi	r31, 0x01	; 1
    22ba:	4f 16       	cp	r4, r31
    22bc:	51 04       	cpc	r5, r1
    22be:	61 04       	cpc	r6, r1
    22c0:	71 04       	cpc	r7, r1
    22c2:	29 f4       	brne	.+10     	; 0x22ce <drawDecimal+0x8e>
			*rowRAM++ = '0';
    22c4:	80 e3       	ldi	r24, 0x30	; 48
    22c6:	f8 01       	movw	r30, r16
    22c8:	80 83       	st	Z, r24
    22ca:	0f 5f       	subi	r16, 0xFF	; 255
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		divider /= 10;
    22ce:	c3 01       	movw	r24, r6
    22d0:	b2 01       	movw	r22, r4
    22d2:	2a e0       	ldi	r18, 0x0A	; 10
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__udivmodsi4>
    22de:	29 01       	movw	r4, r18
    22e0:	3a 01       	movw	r6, r20
void drawDecimal(int32_t theValue, uint8_t *rowRAM) {			//Send up to a 9 digit decimal value to memory

	int zPad = 0;							//Flag for zero padding
	uint32_t divider = 100000000;			//Divider starts at 900 million

	for (int xx = 0 ; xx < 9 ; xx++) {		//9 digit number
    22e2:	21 96       	adiw	r28, 0x01	; 1
    22e4:	c9 30       	cpi	r28, 0x09	; 9
    22e6:	d1 05       	cpc	r29, r1
    22e8:	54 f2       	brlt	.-108    	; 0x227e <drawDecimal+0x3e>
		else if (zPad || divider == 1) {			
			*rowRAM++ = '0';
		}
		divider /= 10;
	}
}
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	df 90       	pop	r13
    22f8:	cf 90       	pop	r12
    22fa:	bf 90       	pop	r11
    22fc:	af 90       	pop	r10
    22fe:	7f 90       	pop	r7
    2300:	6f 90       	pop	r6
    2302:	5f 90       	pop	r5
    2304:	4f 90       	pop	r4
    2306:	08 95       	ret

00002308 <drawText>:

void drawText(const char *text, uint8_t *rowRAM) {
    2308:	fc 01       	movw	r30, r24
    230a:	db 01       	movw	r26, r22

	while(*text) {
    230c:	03 c0       	rjmp	.+6      	; 0x2314 <drawText+0xc>
		*rowRAM++ = *text++;		
    230e:	31 96       	adiw	r30, 0x01	; 1
    2310:	8c 93       	st	X, r24
    2312:	11 96       	adiw	r26, 0x01	; 1
	}
}

void drawText(const char *text, uint8_t *rowRAM) {

	while(*text) {
    2314:	80 81       	ld	r24, Z
    2316:	81 11       	cpse	r24, r1
    2318:	fa cf       	rjmp	.-12     	; 0x230e <drawText+0x6>
		*rowRAM++ = *text++;		
	}
	
}
    231a:	08 95       	ret

0000231c <gameStatus>:
	
	}

}

void gameStatus(uint8_t type) {				//Draw status screen. Type 0 = READY, 1 = PAUSE screen
    231c:	cf 93       	push	r28
    231e:	c8 2f       	mov	r28, r24

	csLow();
    2320:	0e 94 2d 06 	call	0xc5a	; 0xc5a <csLow>

	frameCounter++;
    2324:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    2328:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <frameCounter+0x1>
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <frameCounter>
    2332:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <frameCounter+0x1>
	
	if ((frameCounter & 0x20) && type == 0) {
    2336:	85 ff       	sbrs	r24, 5
    2338:	08 c0       	rjmp	.+16     	; 0x234a <gameStatus+0x2e>
    233a:	c1 11       	cpse	r28, r1
    233c:	06 c0       	rjmp	.+12     	; 0x234a <gameStatus+0x2e>
		drawText("PAUSED", tileMap + 26);	
    233e:	69 e7       	ldi	r22, 0x79	; 121
    2340:	7c e3       	ldi	r23, 0x3C	; 60
    2342:	80 ec       	ldi	r24, 0xC0	; 192
    2344:	9d ea       	ldi	r25, 0xAD	; 173
    2346:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	}

	nextRow();
    234a:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
	drawText("STAGE:", tileMap + 16);
    234e:	6f e6       	ldi	r22, 0x6F	; 111
    2350:	7c e3       	ldi	r23, 0x3C	; 60
    2352:	87 ec       	ldi	r24, 0xC7	; 199
    2354:	9d ea       	ldi	r25, 0xAD	; 173
    2356:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	drawDecimal(stage, tileMap + 22);	
    235a:	60 91 62 3d 	lds	r22, 0x3D62	; 0x803d62 <stage>
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	45 e7       	ldi	r20, 0x75	; 117
    2366:	5c e3       	ldi	r21, 0x3C	; 60
    2368:	0e 94 20 11 	call	0x2240	; 0x2240 <drawDecimal>
	nextRow();									//Blank row
    236c:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
	drawText("SCORE:", tileMap + 16);
    2370:	6f e6       	ldi	r22, 0x6F	; 111
    2372:	7c e3       	ldi	r23, 0x3C	; 60
    2374:	8e ec       	ldi	r24, 0xCE	; 206
    2376:	9d ea       	ldi	r25, 0xAD	; 173
    2378:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	drawDecimal(score, tileMap + 22);
    237c:	60 91 63 3d 	lds	r22, 0x3D63	; 0x803d63 <score>
    2380:	70 91 64 3d 	lds	r23, 0x3D64	; 0x803d64 <score+0x1>
    2384:	80 91 65 3d 	lds	r24, 0x3D65	; 0x803d65 <score+0x2>
    2388:	90 91 66 3d 	lds	r25, 0x3D66	; 0x803d66 <score+0x3>
    238c:	45 e7       	ldi	r20, 0x75	; 117
    238e:	5c e3       	ldi	r21, 0x3C	; 60
    2390:	0e 94 20 11 	call	0x2240	; 0x2240 <drawDecimal>
	nextRow();
    2394:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
	drawText("LIVES:", tileMap + 16);
    2398:	6f e6       	ldi	r22, 0x6F	; 111
    239a:	7c e3       	ldi	r23, 0x3C	; 60
    239c:	85 ed       	ldi	r24, 0xD5	; 213
    239e:	9d ea       	ldi	r25, 0xAD	; 173
    23a0:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	if (lives < 255) {
    23a4:	60 91 6a 3d 	lds	r22, 0x3D6A	; 0x803d6a <lives>
    23a8:	6f 3f       	cpi	r22, 0xFF	; 255
    23aa:	39 f0       	breq	.+14     	; 0x23ba <gameStatus+0x9e>
		drawDecimal(lives, tileMap + 22);
    23ac:	70 e0       	ldi	r23, 0x00	; 0
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	45 e7       	ldi	r20, 0x75	; 117
    23b4:	5c e3       	ldi	r21, 0x3C	; 60
    23b6:	0e 94 20 11 	call	0x2240	; 0x2240 <drawDecimal>
	}
	nextRow();
    23ba:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
	drawText("A  B  C  D  E  F", tileMap + 16);		//Map
    23be:	6f e6       	ldi	r22, 0x6F	; 111
    23c0:	7c e3       	ldi	r23, 0x3C	; 60
    23c2:	8c ed       	ldi	r24, 0xDC	; 220
    23c4:	9d ea       	ldi	r25, 0xAD	; 173
    23c6:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	nextRow();
    23ca:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
	drawText("m~~n~~n~~n~~n~~o", tileMap + 16);
    23ce:	6f e6       	ldi	r22, 0x6F	; 111
    23d0:	7c e3       	ldi	r23, 0x3C	; 60
    23d2:	8d ee       	ldi	r24, 0xED	; 237
    23d4:	9d ea       	ldi	r25, 0xAD	; 173
    23d6:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	uint8_t subDistance = 0;
	if (messageFlash == 0xFFFF) {
    23da:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <messageFlash>
    23de:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <messageFlash+0x1>
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	11 f0       	breq	.+4      	; 0x23ea <gameStatus+0xce>
	}
	nextRow();
	drawText("A  B  C  D  E  F", tileMap + 16);		//Map
	nextRow();
	drawText("m~~n~~n~~n~~n~~o", tileMap + 16);
	uint8_t subDistance = 0;
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <gameStatus+0xd0>
	if (messageFlash == 0xFFFF) {
		subDistance = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
	}
	int8_t buggyPosX = 15 + (checkPoint * 3) + subDistance;
    23ec:	e0 91 3d 3e 	lds	r30, 0x3E3D	; 0x803e3d <checkPoint>
    23f0:	9e 2f       	mov	r25, r30
    23f2:	99 0f       	add	r25, r25
    23f4:	e9 0f       	add	r30, r25
    23f6:	e8 0f       	add	r30, r24
    23f8:	e1 5f       	subi	r30, 0xF1	; 241
	
	if (frameCounter & 0x08) {						//Animated buggie on map (cuuuuuuuuuuuuuuuute!)
    23fa:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    23fe:	83 ff       	sbrs	r24, 3
    2400:	08 c0       	rjmp	.+16     	; 0x2412 <gameStatus+0xf6>
		tileMap[buggyPosX] = 125;
    2402:	0e 2e       	mov	r0, r30
    2404:	00 0c       	add	r0, r0
    2406:	ff 0b       	sbc	r31, r31
    2408:	e1 5a       	subi	r30, 0xA1	; 161
    240a:	f3 4c       	sbci	r31, 0xC3	; 195
    240c:	8d e7       	ldi	r24, 0x7D	; 125
    240e:	80 83       	st	Z, r24
    2410:	07 c0       	rjmp	.+14     	; 0x2420 <gameStatus+0x104>
	}	
	else {
		tileMap[buggyPosX] = 127;
    2412:	0e 2e       	mov	r0, r30
    2414:	00 0c       	add	r0, r0
    2416:	ff 0b       	sbc	r31, r31
    2418:	e1 5a       	subi	r30, 0xA1	; 161
    241a:	f3 4c       	sbci	r31, 0xC3	; 195
    241c:	8f e7       	ldi	r24, 0x7F	; 127
    241e:	80 83       	st	Z, r24
	}
	nextRow();
    2420:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
		
	if (type) {								//Pause screen?
    2424:	cc 23       	and	r28, r28
    2426:	b1 f0       	breq	.+44     	; 0x2454 <gameStatus+0x138>
		nextRow();
    2428:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
		if (type == 2) {
    242c:	c2 30       	cpi	r28, 0x02	; 2
    242e:	39 f4       	brne	.+14     	; 0x243e <gameStatus+0x122>
			drawText("GAME OVER", tileMap + 20);	
    2430:	63 e7       	ldi	r22, 0x73	; 115
    2432:	7c e3       	ldi	r23, 0x3C	; 60
    2434:	8e ef       	ldi	r24, 0xFE	; 254
    2436:	9d ea       	ldi	r25, 0xAD	; 173
    2438:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
    243c:	19 c0       	rjmp	.+50     	; 0x2470 <gameStatus+0x154>
		}
		else {
			if (frameCounter & 0x08) {						//Animated buggie on map (cuuuuuuuuuuuuuuuute!)
    243e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    2442:	83 ff       	sbrs	r24, 3
    2444:	15 c0       	rjmp	.+42     	; 0x2470 <gameStatus+0x154>
				drawText("GET  READY", tileMap + 19);
    2446:	62 e7       	ldi	r22, 0x72	; 114
    2448:	7c e3       	ldi	r23, 0x3C	; 60
    244a:	88 e0       	ldi	r24, 0x08	; 8
    244c:	9e ea       	ldi	r25, 0xAE	; 174
    244e:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
    2452:	0e c0       	rjmp	.+28     	; 0x2470 <gameStatus+0x154>
			}			
		}		
	}
	else {
		drawText("B+A = SLEEP", tileMap + 21);
    2454:	64 e7       	ldi	r22, 0x74	; 116
    2456:	7c e3       	ldi	r23, 0x3C	; 60
    2458:	83 e1       	ldi	r24, 0x13	; 19
    245a:	9e ea       	ldi	r25, 0xAE	; 174
    245c:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
		nextRow();
    2460:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
		drawText("MENU = WAKE", tileMap + 21);				
    2464:	64 e7       	ldi	r22, 0x74	; 116
    2466:	7c e3       	ldi	r23, 0x3C	; 60
    2468:	8f e1       	ldi	r24, 0x1F	; 31
    246a:	9e ea       	ldi	r25, 0xAE	; 174
    246c:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	}

	nextRow();					
    2470:	0e 94 f6 07 	call	0xfec	; 0xfec <nextRow>
	csHigh();
    2474:	0e 94 29 06 	call	0xc52	; 0xc52 <csHigh>
	
	if (gamePad & dB && gamePad & dA && type == 0) {
    2478:	80 91 60 3d 	lds	r24, 0x3D60	; 0x803d60 <gamePad>
    247c:	86 ff       	sbrs	r24, 6
    247e:	09 c0       	rjmp	.+18     	; 0x2492 <gameStatus+0x176>
    2480:	88 23       	and	r24, r24
    2482:	3c f4       	brge	.+14     	; 0x2492 <gameStatus+0x176>
    2484:	c1 11       	cpse	r28, r1
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <gameStatus+0x176>
		buttonFire = dMenu;						//Clear this bit so pressing Menu doesn't exit PAUSE when we awaken from our dark, deep slumber
    2488:	80 e2       	ldi	r24, 0x20	; 32
    248a:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <buttonFire>
		gotoSleep();
    248e:	0e 94 9f 09 	call	0x133e	; 0x133e <gotoSleep>
	}
	
}
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <gameAction>:
	rowLoad(tileData, tileMap + 16, draw);
	memset(&tileMap[16], ' ', 16);
	
}

void gameAction() {
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	cf 93       	push	r28

	screenLoad();							//Dump the frame buffer to the OLED
    249c:	0e 94 31 06 	call	0xc62	; 0xc62 <screenLoad>
	frameCounter++;							//Increment counter
    24a0:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    24a4:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <frameCounter+0x1>
    24a8:	01 96       	adiw	r24, 0x01	; 1
    24aa:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <frameCounter>
    24ae:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <frameCounter+0x1>
	drawTiles(tileData, tileMap);			//Draw background tiles
    24b2:	6f e5       	ldi	r22, 0x5F	; 95
    24b4:	7c e3       	ldi	r23, 0x3C	; 60
    24b6:	86 ed       	ldi	r24, 0xD6	; 214
    24b8:	93 e0       	ldi	r25, 0x03	; 3
    24ba:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <drawTiles>

	uint8_t distanceCheck = 0;				//Flag if we should check for checkpoint distance (allows 2 ways of triggering a checkpoint, event or # of window scrolls)
	
	playerLogic();
    24be:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <playerLogic>
	enemies();
    24c2:	0e 94 ce 09 	call	0x139c	; 0x139c <enemies>

	if (messageFlash == 0xFFFF) {			//Can spawn stuff?
    24c6:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <messageFlash>
    24ca:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <messageFlash+0x1>
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	09 f0       	breq	.+2      	; 0x24d4 <gameAction+0x3e>
    24d2:	f4 c0       	rjmp	.+488    	; 0x26bc <gameAction+0x226>
		
		if (stagePhase & phaseSkyMask) {	//Sky enemies active?
    24d4:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <stagePhase>
    24d8:	8f 70       	andi	r24, 0x0F	; 15
    24da:	09 f4       	brne	.+2      	; 0x24de <gameAction+0x48>
    24dc:	ba c0       	rjmp	.+372    	; 0x2652 <gameAction+0x1bc>

			if (numberSpawned != spawnPerWave) {		//Haven't spawned them all yet?
    24de:	90 91 61 3d 	lds	r25, 0x3D61	; 0x803d61 <numberSpawned>
    24e2:	20 91 40 3e 	lds	r18, 0x3E40	; 0x803e40 <spawnPerWave>
    24e6:	92 17       	cp	r25, r18
    24e8:	09 f4       	brne	.+2      	; 0x24ec <gameAction+0x56>
    24ea:	98 c0       	rjmp	.+304    	; 0x261c <gameAction+0x186>
				if (eventTimer) {						//Remove?
    24ec:	20 91 21 38 	lds	r18, 0x3821	; 0x803821 <eventTimer>
    24f0:	30 91 22 38 	lds	r19, 0x3822	; 0x803822 <eventTimer+0x1>
    24f4:	21 15       	cp	r18, r1
    24f6:	31 05       	cpc	r19, r1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <gameAction+0x66>
    24fa:	ad c0       	rjmp	.+346    	; 0x2656 <gameAction+0x1c0>
					if (--eventTimer == 0) {			//Time to spawn
    24fc:	21 50       	subi	r18, 0x01	; 1
    24fe:	31 09       	sbc	r19, r1
    2500:	20 93 21 38 	sts	0x3821, r18	; 0x803821 <eventTimer>
    2504:	30 93 22 38 	sts	0x3822, r19	; 0x803822 <eventTimer+0x1>
    2508:	23 2b       	or	r18, r19
    250a:	09 f0       	breq	.+2      	; 0x250e <gameAction+0x78>
    250c:	a6 c0       	rjmp	.+332    	; 0x265a <gameAction+0x1c4>
							numberSpawned++;
    250e:	9f 5f       	subi	r25, 0xFF	; 255
    2510:	90 93 61 3d 	sts	0x3D61, r25	; 0x803d61 <numberSpawned>
							
							switch(stagePhase & phaseSkyMask) {
    2514:	82 30       	cpi	r24, 0x02	; 2
    2516:	e1 f0       	breq	.+56     	; 0x2550 <gameAction+0xba>
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	91 f1       	breq	.+100    	; 0x2580 <gameAction+0xea>
    251c:	81 30       	cpi	r24, 0x01	; 1
    251e:	09 f0       	breq	.+2      	; 0x2522 <gameAction+0x8c>
    2520:	63 c0       	rjmp	.+198    	; 0x25e8 <gameAction+0x152>
								
								case phaseUFOs:
									spawnEnemy(enemySpawnSide[getRandom(0x01)], getRandom(0x01) * 8, 1, enemyUFO);
    2522:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    2526:	c8 2f       	mov	r28, r24
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    252e:	6c 2f       	mov	r22, r28
    2530:	66 0f       	add	r22, r22
    2532:	66 0f       	add	r22, r22
    2534:	66 0f       	add	r22, r22
    2536:	e8 2f       	mov	r30, r24
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	ee 0f       	add	r30, r30
    253c:	ff 1f       	adc	r31, r31
    253e:	ec 57       	subi	r30, 0x7C	; 124
    2540:	f1 45       	sbci	r31, 0x51	; 81
    2542:	20 e1       	ldi	r18, 0x10	; 16
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	0e 94 1f 09 	call	0x123e	; 0x123e <spawnEnemy>
								break;
    254e:	4c c0       	rjmp	.+152    	; 0x25e8 <gameAction+0x152>
								
								case phaseBalls:
									spawnEnemy(enemySpawnSide[getRandom(0x01)], getRandom(0x01) * 8, 1, enemyBalls);
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    2556:	c8 2f       	mov	r28, r24
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    255e:	6c 2f       	mov	r22, r28
    2560:	66 0f       	add	r22, r22
    2562:	66 0f       	add	r22, r22
    2564:	66 0f       	add	r22, r22
    2566:	e8 2f       	mov	r30, r24
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	ec 57       	subi	r30, 0x7C	; 124
    2570:	f1 45       	sbci	r31, 0x51	; 81
    2572:	20 e2       	ldi	r18, 0x20	; 32
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	0e 94 1f 09 	call	0x123e	; 0x123e <spawnEnemy>
								break;
    257e:	34 c0       	rjmp	.+104    	; 0x25e8 <gameAction+0x152>
								
								case phaseUFOs | phaseBalls:;				//Spawn both at once, different sides of screen
									uint8_t whichSide = getRandom(0x01);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    2586:	c8 2f       	mov	r28, r24
									spawnEnemy(enemySpawnSide[whichSide], getRandom(0x01) * 8, 1, enemyUFO);
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    258e:	68 2f       	mov	r22, r24
    2590:	66 0f       	add	r22, r22
    2592:	66 0f       	add	r22, r22
    2594:	66 0f       	add	r22, r22
    2596:	ec 2f       	mov	r30, r28
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ec 57       	subi	r30, 0x7C	; 124
    25a0:	f1 45       	sbci	r31, 0x51	; 81
    25a2:	20 e1       	ldi	r18, 0x10	; 16
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	0e 94 1f 09 	call	0x123e	; 0x123e <spawnEnemy>
									spawnEnemy(enemySpawnSide[!whichSide & 0x01], getRandom(0x01) * 8, 1, enemyBalls);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    25b4:	21 e0       	ldi	r18, 0x01	; 1
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	cc 23       	and	r28, r28
    25ba:	11 f0       	breq	.+4      	; 0x25c0 <gameAction+0x12a>
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	68 2f       	mov	r22, r24
    25c2:	66 0f       	add	r22, r22
    25c4:	66 0f       	add	r22, r22
    25c6:	66 0f       	add	r22, r22
    25c8:	22 0f       	add	r18, r18
    25ca:	33 1f       	adc	r19, r19
    25cc:	f9 01       	movw	r30, r18
    25ce:	ec 57       	subi	r30, 0x7C	; 124
    25d0:	f1 45       	sbci	r31, 0x51	; 81
    25d2:	20 e2       	ldi	r18, 0x20	; 32
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	0e 94 1f 09 	call	0x123e	; 0x123e <spawnEnemy>
									skyEnemies += 1;
    25de:	80 91 4b 3c 	lds	r24, 0x3C4B	; 0x803c4b <skyEnemies>
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	80 93 4b 3c 	sts	0x3C4B, r24	; 0x803c4b <skyEnemies>
								break;
		
							}
							//spawnEnemy(enemySpawnSide[getRandom(0x01)], getRandom(0x03) * 8, 1, enemyUFO); 0x03 makes them low enough to hit you in a jump, should save that for later levels
							eventTimer = eventGoal + (getRandom(0x07) * 3);
    25e8:	87 e0       	ldi	r24, 0x07	; 7
    25ea:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9c 01       	movw	r18, r24
    25f2:	22 0f       	add	r18, r18
    25f4:	33 1f       	adc	r19, r19
    25f6:	82 0f       	add	r24, r18
    25f8:	93 1f       	adc	r25, r19
    25fa:	20 91 1f 38 	lds	r18, 0x381F	; 0x80381f <eventGoal>
    25fe:	30 91 20 38 	lds	r19, 0x3820	; 0x803820 <eventGoal+0x1>
    2602:	82 0f       	add	r24, r18
    2604:	93 1f       	adc	r25, r19
    2606:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <eventTimer>
    260a:	90 93 22 38 	sts	0x3822, r25	; 0x803822 <eventTimer+0x1>
							skyEnemies += 1;
    260e:	80 91 4b 3c 	lds	r24, 0x3C4B	; 0x803c4b <skyEnemies>
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	80 93 4b 3c 	sts	0x3C4B, r24	; 0x803c4b <skyEnemies>

	screenLoad();							//Dump the frame buffer to the OLED
	frameCounter++;							//Increment counter
	drawTiles(tileData, tileMap);			//Draw background tiles

	uint8_t distanceCheck = 0;				//Flag if we should check for checkpoint distance (allows 2 ways of triggering a checkpoint, event or # of window scrolls)
    2618:	c0 e0       	ldi	r28, 0x00	; 0
    261a:	22 c0       	rjmp	.+68     	; 0x2660 <gameAction+0x1ca>
							skyEnemies += 1;
					}
				}			
			}
			else {										//OK so they have all spawned
				if (!skyEnemies) {					//Did we spawn them all and player killed them all? Next wave
    261c:	80 91 4b 3c 	lds	r24, 0x3C4B	; 0x803c4b <skyEnemies>
    2620:	81 11       	cpse	r24, r1
    2622:	1d c0       	rjmp	.+58     	; 0x265e <gameAction+0x1c8>
					numberSpawned = 0;				//Clear the spawned count
    2624:	10 92 61 3d 	sts	0x3D61, r1	; 0x803d61 <numberSpawned>
					if (--numberOfWaves) {
    2628:	80 91 69 3d 	lds	r24, 0x3D69	; 0x803d69 <numberOfWaves>
    262c:	81 50       	subi	r24, 0x01	; 1
    262e:	80 93 69 3d 	sts	0x3D69, r24	; 0x803d69 <numberOfWaves>
    2632:	88 23       	and	r24, r24
    2634:	41 f0       	breq	.+16     	; 0x2646 <gameAction+0x1b0>
						eventTimer = 80;			//Frames before next wave
    2636:	80 e5       	ldi	r24, 0x50	; 80
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	80 93 21 38 	sts	0x3821, r24	; 0x803821 <eventTimer>
    263e:	90 93 22 38 	sts	0x3822, r25	; 0x803822 <eventTimer+0x1>

	screenLoad();							//Dump the frame buffer to the OLED
	frameCounter++;							//Increment counter
	drawTiles(tileData, tileMap);			//Draw background tiles

	uint8_t distanceCheck = 0;				//Flag if we should check for checkpoint distance (allows 2 ways of triggering a checkpoint, event or # of window scrolls)
    2642:	c0 e0       	ldi	r28, 0x00	; 0
    2644:	0d c0       	rjmp	.+26     	; 0x2660 <gameAction+0x1ca>
					numberSpawned = 0;				//Clear the spawned count
					if (--numberOfWaves) {
						eventTimer = 80;			//Frames before next wave
					}
					else {
						distance = distanceGoal;		//Set goal as REACHED
    2646:	80 91 3f 3e 	lds	r24, 0x3E3F	; 0x803e3f <distanceGoal>
    264a:	80 93 5f 3d 	sts	0x3D5F, r24	; 0x803d5f <distance>
						distanceCheck = 1;				//Set flag for check
    264e:	c1 e0       	ldi	r28, 0x01	; 1
    2650:	07 c0       	rjmp	.+14     	; 0x2660 <gameAction+0x1ca>

	screenLoad();							//Dump the frame buffer to the OLED
	frameCounter++;							//Increment counter
	drawTiles(tileData, tileMap);			//Draw background tiles

	uint8_t distanceCheck = 0;				//Flag if we should check for checkpoint distance (allows 2 ways of triggering a checkpoint, event or # of window scrolls)
    2652:	c0 e0       	ldi	r28, 0x00	; 0
    2654:	05 c0       	rjmp	.+10     	; 0x2660 <gameAction+0x1ca>
    2656:	c0 e0       	ldi	r28, 0x00	; 0
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <gameAction+0x1ca>
    265a:	c0 e0       	ldi	r28, 0x00	; 0
    265c:	01 c0       	rjmp	.+2      	; 0x2660 <gameAction+0x1ca>
    265e:	c0 e0       	ldi	r28, 0x00	; 0
			//drawDecimal(numberOfWaves, tileMap + 32);
			//drawDecimal(numberSpawned, tileMap + 4);									
		}

		
		if (stagePhase & phaseGroundMask) {			//An obstacle phase, and we can spawn them?
    2660:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <stagePhase>
    2664:	80 7f       	andi	r24, 0xF0	; 240
    2666:	59 f1       	breq	.+86     	; 0x26be <gameAction+0x228>
			if (--obstacleTimer == 0) {											//Time to spawn?
    2668:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <obstacleTimer>
    266c:	81 50       	subi	r24, 0x01	; 1
    266e:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <obstacleTimer>
    2672:	81 11       	cpse	r24, r1
    2674:	19 c0       	rjmp	.+50     	; 0x26a8 <gameAction+0x212>
				obstacleTimer = obstacleTimerBase + (getRandom(0x07) * 16);		//Reset spawn timer + random (work on scaling difficulty)
    2676:	87 e0       	ldi	r24, 0x07	; 7
    2678:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    267c:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <__DATA_REGION_ORIGIN__>
    2680:	20 e1       	ldi	r18, 0x10	; 16
    2682:	82 9f       	mul	r24, r18
    2684:	90 0d       	add	r25, r0
    2686:	11 24       	eor	r1, r1
    2688:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <obstacleTimer>
				spawnObstacle(127, 1 << getRandom(0x03));							//Spawn obstacle
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	0e 94 02 05 	call	0xa04	; 0xa04 <getRandom>
    2692:	61 e0       	ldi	r22, 0x01	; 1
    2694:	70 e0       	ldi	r23, 0x00	; 0
    2696:	02 c0       	rjmp	.+4      	; 0x269c <gameAction+0x206>
    2698:	66 0f       	add	r22, r22
    269a:	77 1f       	adc	r23, r23
    269c:	8a 95       	dec	r24
    269e:	e2 f7       	brpl	.-8      	; 0x2698 <gameAction+0x202>
    26a0:	8f e7       	ldi	r24, 0x7F	; 127
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 8d 08 	call	0x111a	; 0x111a <spawnObstacle>
			}
			drawDecimal(obstacleTimer, tileMap);
    26a8:	60 91 01 38 	lds	r22, 0x3801	; 0x803801 <obstacleTimer>
    26ac:	70 e0       	ldi	r23, 0x00	; 0
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	4f e5       	ldi	r20, 0x5F	; 95
    26b4:	5c e3       	ldi	r21, 0x3C	; 60
    26b6:	0e 94 20 11 	call	0x2240	; 0x2240 <drawDecimal>
    26ba:	01 c0       	rjmp	.+2      	; 0x26be <gameAction+0x228>

	screenLoad();							//Dump the frame buffer to the OLED
	frameCounter++;							//Increment counter
	drawTiles(tileData, tileMap);			//Draw background tiles

	uint8_t distanceCheck = 0;				//Flag if we should check for checkpoint distance (allows 2 ways of triggering a checkpoint, event or # of window scrolls)
    26bc:	c0 e0       	ldi	r28, 0x00	; 0
		}			
	}


		
	xWindow += speed;
    26be:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <xWindow>
    26c2:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <speed>
    26c6:	89 0f       	add	r24, r25
    26c8:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <xWindow>

	if (messageFlash != 0xFFFF) {			//Checkpoint message active?		
    26cc:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <messageFlash>
    26d0:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <messageFlash+0x1>
    26d4:	8f 3f       	cpi	r24, 0xFF	; 255
    26d6:	2f ef       	ldi	r18, 0xFF	; 255
    26d8:	92 07       	cpc	r25, r18
    26da:	d9 f0       	breq	.+54     	; 0x2712 <gameAction+0x27c>
		setRowScroll(messageFlash, 6);		//Scroll past it
    26dc:	66 e0       	ldi	r22, 0x06	; 6
    26de:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
		messageFlash += speed;
    26e2:	20 91 06 38 	lds	r18, 0x3806	; 0x803806 <speed>
    26e6:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <messageFlash>
    26ea:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <messageFlash+0x1>
    26ee:	82 0f       	add	r24, r18
    26f0:	91 1d       	adc	r25, r1
    26f2:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <messageFlash>
    26f6:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <messageFlash+0x1>
			
		if (messageFlash > 255) {			//Disable message
    26fa:	8f 3f       	cpi	r24, 0xFF	; 255
    26fc:	91 05       	cpc	r25, r1
    26fe:	49 f0       	breq	.+18     	; 0x2712 <gameAction+0x27c>
    2700:	40 f0       	brcs	.+16     	; 0x2712 <gameAction+0x27c>
			phaseStart();					//Decide what to do in this phase
    2702:	0e 94 0e 08 	call	0x101c	; 0x101c <phaseStart>
			messageFlash = 0xFFFF;			//This can act as a flag to allow enemy spawn
    2706:	8f ef       	ldi	r24, 0xFF	; 255
    2708:	9f ef       	ldi	r25, 0xFF	; 255
    270a:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <messageFlash>
    270e:	90 93 04 38 	sts	0x3804, r25	; 0x803804 <messageFlash+0x1>
		}		
	}

	
	if ((xWindow & 0x07) == 0x07) {
    2712:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <xWindow>
    2716:	87 70       	andi	r24, 0x07	; 7
    2718:	87 30       	cpi	r24, 0x07	; 7
    271a:	a9 f4       	brne	.+42     	; 0x2746 <gameAction+0x2b0>
		spawnFineCounter = 0;
    271c:	10 92 25 38 	sts	0x3825, r1	; 0x803825 <spawnFineCounter>
		if (++spawnPointer == 0) {
    2720:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <spawnPointer>
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <spawnPointer>
    272a:	81 11       	cpse	r24, r1
    272c:	03 c0       	rjmp	.+6      	; 0x2734 <gameAction+0x29e>
			spawnPointer = 224;
    272e:	80 ee       	ldi	r24, 0xE0	; 224
    2730:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <spawnPointer>
		}
		tileMap[spawnPointer] = getGround();
    2734:	00 91 08 38 	lds	r16, 0x3808	; 0x803808 <spawnPointer>
    2738:	10 e0       	ldi	r17, 0x00	; 0
    273a:	0e 94 a9 09 	call	0x1352	; 0x1352 <getGround>
    273e:	f8 01       	movw	r30, r16
    2740:	e1 5a       	subi	r30, 0xA1	; 161
    2742:	f3 4c       	sbci	r31, 0xC3	; 195
    2744:	80 83       	st	Z, r24

	}	
	
	if (xWindow == 255 && messageFlash == 0xFFFF) {
    2746:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <xWindow>
    274a:	8f 3f       	cpi	r24, 0xFF	; 255
    274c:	39 f4       	brne	.+14     	; 0x275c <gameAction+0x2c6>
    274e:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <messageFlash>
    2752:	90 91 04 38 	lds	r25, 0x3804	; 0x803804 <messageFlash+0x1>
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	09 f4       	brne	.+2      	; 0x275c <gameAction+0x2c6>
		
		distanceCheck = 1;
    275a:	c1 e0       	ldi	r28, 0x01	; 1
		
		//drawDecimal(distance, tileMap);
		//drawDecimal(distanceGoal, tileMap + 32);		
	}
	
	if (distanceCheck) {
    275c:	cc 23       	and	r28, r28
    275e:	09 f1       	breq	.+66     	; 0x27a2 <gameAction+0x30c>
		
		distance += byDistance;					//Does simply scrolling the screen advance you?
    2760:	90 91 5f 3d 	lds	r25, 0x3D5F	; 0x803d5f <distance>
    2764:	80 91 3b 3e 	lds	r24, 0x3E3B	; 0x803e3b <byDistance>
    2768:	89 0f       	add	r24, r25
    276a:	80 93 5f 3d 	sts	0x3D5F, r24	; 0x803d5f <distance>
		
		if (distance == distanceGoal) {
    276e:	90 91 3f 3e 	lds	r25, 0x3E3F	; 0x803e3f <distanceGoal>
    2772:	89 13       	cpse	r24, r25
    2774:	16 c0       	rjmp	.+44     	; 0x27a2 <gameAction+0x30c>
			distance = 0;
    2776:	10 92 5f 3d 	sts	0x3D5F, r1	; 0x803d5f <distance>
			checkPoint++;
    277a:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <checkPoint>
    277e:	8f 5f       	subi	r24, 0xFF	; 255
    2780:	80 93 3d 3e 	sts	0x3E3D, r24	; 0x803e3d <checkPoint>
			drawText("CHECKPOINT", tileMap + 192 + 18);
    2784:	61 e3       	ldi	r22, 0x31	; 49
    2786:	7d e3       	ldi	r23, 0x3D	; 61
    2788:	8b e2       	ldi	r24, 0x2B	; 43
    278a:	9e ea       	ldi	r25, 0xAE	; 174
    278c:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
			tileMap[192 + 30] = checkPoint + 65;
    2790:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <checkPoint>
    2794:	8f 5b       	subi	r24, 0xBF	; 191
    2796:	80 93 3d 3d 	sts	0x3D3D, r24	; 0x803d3d <tileMap+0xde>
			messageFlash = 0;
    279a:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <messageFlash>
    279e:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <messageFlash+0x1>
		}	
			
	}

	bgScroll += (frameCounter & 1);
    27a2:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    27a6:	81 70       	andi	r24, 0x01	; 1
    27a8:	90 91 2c 38 	lds	r25, 0x382C	; 0x80382c <bgScroll>
    27ac:	89 0f       	add	r24, r25
    27ae:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <bgScroll>

	setRowScroll(0, 0);
    27b2:	60 e0       	ldi	r22, 0x00	; 0
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
	setRowScroll(0, 1);
    27ba:	61 e0       	ldi	r22, 0x01	; 1
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
	setRowScroll(bgScroll >> 1, 2);
    27c2:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <bgScroll>
    27c6:	62 e0       	ldi	r22, 0x02	; 2
    27c8:	86 95       	lsr	r24
    27ca:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
	setRowScroll(bgScroll >> 1, 3);
    27ce:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <bgScroll>
    27d2:	63 e0       	ldi	r22, 0x03	; 3
    27d4:	86 95       	lsr	r24
    27d6:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
	setRowScroll(bgScroll, 4);
    27da:	64 e0       	ldi	r22, 0x04	; 4
    27dc:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <bgScroll>
    27e0:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
	setRowScroll(bgScroll, 5);
    27e4:	65 e0       	ldi	r22, 0x05	; 5
    27e6:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <bgScroll>
    27ea:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
	//setRowScroll(xWindow, 6);
	setRowScroll(xWindow, 7);
    27ee:	67 e0       	ldi	r22, 0x07	; 7
    27f0:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <xWindow>
    27f4:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
	
	
}
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	08 95       	ret

00002800 <cls>:
	
}

void cls() {

	memset(tileMap, 32, 256);					//Erase tiles to the blank space character	
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	51 e0       	ldi	r21, 0x01	; 1
    2804:	60 e2       	ldi	r22, 0x20	; 32
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	8f e5       	ldi	r24, 0x5F	; 95
    280a:	9c e3       	ldi	r25, 0x3C	; 60
    280c:	0e 94 d7 16 	call	0x2dae	; 0x2dae <memset>
    2810:	08 95       	ret

00002812 <drawTitle>:
	
}

void drawTitle() {
	
	cls();
    2812:	0e 94 00 14 	call	0x2800	; 0x2800 <cls>

	drawMountains2(5);
    2816:	85 e0       	ldi	r24, 0x05	; 5
    2818:	0e 94 e7 10 	call	0x21ce	; 0x21ce <drawMountains2>
	setWindow(0, 0);	
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	0e 94 12 05 	call	0xa24	; 0xa24 <setWindow>
	
	drawText("MOON FORCE", tileMap + 3);	
    2824:	62 e6       	ldi	r22, 0x62	; 98
    2826:	7c e3       	ldi	r23, 0x3C	; 60
    2828:	86 e3       	ldi	r24, 0x36	; 54
    282a:	9e ea       	ldi	r25, 0xAE	; 174
    282c:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	
	drawText("B = HIGH SCORES", tileMap + (2 * 32));	
    2830:	6f e9       	ldi	r22, 0x9F	; 159
    2832:	7c e3       	ldi	r23, 0x3C	; 60
    2834:	81 e4       	ldi	r24, 0x41	; 65
    2836:	9e ea       	ldi	r25, 0xAE	; 174
    2838:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	drawText("A = START GAME", tileMap + (3 * 32));
    283c:	6f eb       	ldi	r22, 0xBF	; 191
    283e:	7c e3       	ldi	r23, 0x3C	; 60
    2840:	81 e5       	ldi	r24, 0x51	; 81
    2842:	9e ea       	ldi	r25, 0xAE	; 174
    2844:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>

	drawText("MGC 2021", tileMap + (7 * 32) + 5);
    2848:	64 e4       	ldi	r22, 0x44	; 68
    284a:	7d e3       	ldi	r23, 0x3D	; 61
    284c:	80 e6       	ldi	r24, 0x60	; 96
    284e:	9e ea       	ldi	r25, 0xAE	; 174
    2850:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	drawText("BY BEN HECK", tileMap + (7 * 32) + 21);
    2854:	64 e5       	ldi	r22, 0x54	; 84
    2856:	7d e3       	ldi	r23, 0x3D	; 61
    2858:	89 e6       	ldi	r24, 0x69	; 105
    285a:	9e ea       	ldi	r25, 0xAE	; 174
    285c:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
		
	isDrawn = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	80 93 3e 3e 	sts	0x3E3E, r24	; 0x803e3e <isDrawn>
    2866:	08 95       	ret

00002868 <drawMoonscape>:
		enemy[g].grounded = 0;
	}
		
}

void drawMoonscape() {
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29

	cls();
    2870:	0e 94 00 14 	call	0x2800	; 0x2800 <cls>
	
	tileMap[0] = 11;					//Draw stars
    2874:	ef e5       	ldi	r30, 0x5F	; 95
    2876:	fc e3       	ldi	r31, 0x3C	; 60
    2878:	2b e0       	ldi	r18, 0x0B	; 11
    287a:	20 83       	st	Z, r18
	tileMap[5] = 137;
    287c:	99 e8       	ldi	r25, 0x89	; 137
    287e:	95 83       	std	Z+5, r25	; 0x05
	tileMap[7] = 134;	
    2880:	86 e8       	ldi	r24, 0x86	; 134
    2882:	87 83       	std	Z+7, r24	; 0x07
	tileMap[12 + 32] = 134;
    2884:	84 a7       	std	Z+44, r24	; 0x2c
		
	tileMap[34] = 11;
    2886:	22 a3       	std	Z+34, r18	; 0x22
	tileMap[38] = 137;
    2888:	96 a3       	std	Z+38, r25	; 0x26
	tileMap[41] = 134;
    288a:	81 a7       	std	Z+41, r24	; 0x29
	
	tileMap[11] = 'l';					//Draw the SUN. My favorite planet			
    288c:	8c e6       	ldi	r24, 0x6C	; 108
    288e:	83 87       	std	Z+11, r24	; 0x0b
			
	fillTiles(14 - stage, 26, 3);						//Draw Earthrise
    2890:	90 91 62 3d 	lds	r25, 0x3D62	; 0x803d62 <stage>
    2894:	43 e0       	ldi	r20, 0x03	; 3
    2896:	6a e1       	ldi	r22, 0x1A	; 26
    2898:	8e e0       	ldi	r24, 0x0E	; 14
    289a:	89 1b       	sub	r24, r25
    289c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
	fillTiles(14 - stage + 32, 29, 3);
    28a0:	90 91 62 3d 	lds	r25, 0x3D62	; 0x803d62 <stage>
    28a4:	43 e0       	ldi	r20, 0x03	; 3
    28a6:	6d e1       	ldi	r22, 0x1D	; 29
    28a8:	8e e2       	ldi	r24, 0x2E	; 46
    28aa:	89 1b       	sub	r24, r25
    28ac:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>

	
	drawMountains2(2);
    28b0:	82 e0       	ldi	r24, 0x02	; 2
    28b2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <drawMountains2>

	//Draw near mountains or moon city

	if (stage & 1) {								//1 (odd) = Mountains
    28b6:	80 91 62 3d 	lds	r24, 0x3D62	; 0x803d62 <stage>
    28ba:	80 ff       	sbrs	r24, 0
    28bc:	1e c0       	rjmp	.+60     	; 0x28fa <drawMoonscape+0x92>

		fillTiles(5 * 32, 3, 13);					//Foreground mountains
    28be:	4d e0       	ldi	r20, 0x0D	; 13
    28c0:	63 e0       	ldi	r22, 0x03	; 3
    28c2:	80 ea       	ldi	r24, 0xA0	; 160
    28c4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles(4 * 32, 17, 2);
    28c8:	42 e0       	ldi	r20, 0x02	; 2
    28ca:	61 e1       	ldi	r22, 0x11	; 17
    28cc:	80 e8       	ldi	r24, 0x80	; 128
    28ce:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles((4 * 32) + 7, 19, 2);
    28d2:	42 e0       	ldi	r20, 0x02	; 2
    28d4:	63 e1       	ldi	r22, 0x13	; 19
    28d6:	87 e8       	ldi	r24, 0x87	; 135
    28d8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles((4 * 32) + 11, 21, 5);
    28dc:	45 e0       	ldi	r20, 0x05	; 5
    28de:	65 e1       	ldi	r22, 0x15	; 21
    28e0:	8b e8       	ldi	r24, 0x8B	; 139
    28e2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
    28e6:	80 e8       	ldi	r24, 0x80	; 128
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	50 c0       	rjmp	.+160    	; 0x298c <drawMoonscape+0x124>
			
	}
	else {											//0 (even) = Moon City		
		for (int x = 160 ; x < 192 ; x++) {
			tileMap[x] = 124;
    28ec:	fc 01       	movw	r30, r24
    28ee:	e1 5a       	subi	r30, 0xA1	; 161
    28f0:	f3 4c       	sbci	r31, 0xC3	; 195
    28f2:	2c e7       	ldi	r18, 0x7C	; 124
    28f4:	20 83       	st	Z, r18
		fillTiles((4 * 32) + 7, 19, 2);
		fillTiles((4 * 32) + 11, 21, 5);
			
	}
	else {											//0 (even) = Moon City		
		for (int x = 160 ; x < 192 ; x++) {
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <drawMoonscape+0x96>
    28fa:	80 ea       	ldi	r24, 0xA0	; 160
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	80 3c       	cpi	r24, 0xC0	; 192
    2900:	91 05       	cpc	r25, r1
    2902:	a4 f3       	brlt	.-24     	; 0x28ec <drawMoonscape+0x84>
			tileMap[x] = 124;
		}
		fillTiles(4 * 32, 96, 3);
    2904:	43 e0       	ldi	r20, 0x03	; 3
    2906:	60 e6       	ldi	r22, 0x60	; 96
    2908:	80 e8       	ldi	r24, 0x80	; 128
    290a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles((5 * 32), 96 + 16, 3);
    290e:	43 e0       	ldi	r20, 0x03	; 3
    2910:	60 e7       	ldi	r22, 0x70	; 112
    2912:	80 ea       	ldi	r24, 0xA0	; 160
    2914:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		
		fillTiles((4 * 32) + 4, 99, 2);
    2918:	42 e0       	ldi	r20, 0x02	; 2
    291a:	63 e6       	ldi	r22, 0x63	; 99
    291c:	84 e8       	ldi	r24, 0x84	; 132
    291e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles((5 * 32) + 4, 99 + 16, 2);
    2922:	42 e0       	ldi	r20, 0x02	; 2
    2924:	63 e7       	ldi	r22, 0x73	; 115
    2926:	84 ea       	ldi	r24, 0xA4	; 164
    2928:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		
		fillTiles((4 * 32) + 7, 101, 2);
    292c:	42 e0       	ldi	r20, 0x02	; 2
    292e:	65 e6       	ldi	r22, 0x65	; 101
    2930:	87 e8       	ldi	r24, 0x87	; 135
    2932:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles((5 * 32) + 7, 101 + 16, 2);
    2936:	42 e0       	ldi	r20, 0x02	; 2
    2938:	65 e7       	ldi	r22, 0x75	; 117
    293a:	87 ea       	ldi	r24, 0xA7	; 167
    293c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>

		fillTiles((4 * 32) + 10, 103, 3);
    2940:	43 e0       	ldi	r20, 0x03	; 3
    2942:	67 e6       	ldi	r22, 0x67	; 103
    2944:	8a e8       	ldi	r24, 0x8A	; 138
    2946:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles((5 * 32) + 10, 103 + 16, 3);
    294a:	43 e0       	ldi	r20, 0x03	; 3
    294c:	67 e7       	ldi	r22, 0x77	; 119
    294e:	8a ea       	ldi	r24, 0xAA	; 170
    2950:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		
		fillTiles((4 * 32) + 13, 106, 2);
    2954:	42 e0       	ldi	r20, 0x02	; 2
    2956:	6a e6       	ldi	r22, 0x6A	; 106
    2958:	8d e8       	ldi	r24, 0x8D	; 141
    295a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
		fillTiles((5 * 32) + 13, 106 + 16, 2);
    295e:	42 e0       	ldi	r20, 0x02	; 2
    2960:	6a e7       	ldi	r22, 0x7A	; 122
    2962:	8d ea       	ldi	r24, 0xAD	; 173
    2964:	0e 94 d6 10 	call	0x21ac	; 0x21ac <fillTiles>
    2968:	be cf       	rjmp	.-132    	; 0x28e6 <drawMoonscape+0x7e>
		
		
	}

	for (int x = 128 ; x < 144 ; x++) {				//Dupe background to other screen
		tileMap[x + 16] = tileMap[x];
    296a:	fc 01       	movw	r30, r24
    296c:	e1 5a       	subi	r30, 0xA1	; 161
    296e:	f3 4c       	sbci	r31, 0xC3	; 195
    2970:	20 81       	ld	r18, Z
    2972:	fc 01       	movw	r30, r24
    2974:	e1 59       	subi	r30, 0x91	; 145
    2976:	f3 4c       	sbci	r31, 0xC3	; 195
    2978:	20 83       	st	Z, r18
		tileMap[x + 48] = tileMap[x + 32];
    297a:	fc 01       	movw	r30, r24
    297c:	e1 58       	subi	r30, 0x81	; 129
    297e:	f3 4c       	sbci	r31, 0xC3	; 195
    2980:	20 81       	ld	r18, Z
    2982:	fc 01       	movw	r30, r24
    2984:	e1 57       	subi	r30, 0x71	; 113
    2986:	f3 4c       	sbci	r31, 0xC3	; 195
    2988:	20 83       	st	Z, r18
		fillTiles((5 * 32) + 13, 106 + 16, 2);
		
		
	}

	for (int x = 128 ; x < 144 ; x++) {				//Dupe background to other screen
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	80 39       	cpi	r24, 0x90	; 144
    298e:	91 05       	cpc	r25, r1
    2990:	64 f3       	brlt	.-40     	; 0x296a <drawMoonscape+0x102>
    2992:	c0 e0       	ldi	r28, 0x00	; 0
    2994:	d0 e0       	ldi	r29, 0x00	; 0
    2996:	0a c0       	rjmp	.+20     	; 0x29ac <drawMoonscape+0x144>
		tileMap[x + 16] = tileMap[x];
		tileMap[x + 48] = tileMap[x + 32];
	}

	for (int x = 0 ; x < 32 ; x++) {
		tileMap[(7 * 32) + x] = getGround();
    2998:	8e 01       	movw	r16, r28
    299a:	00 52       	subi	r16, 0x20	; 32
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	0e 94 a9 09 	call	0x1352	; 0x1352 <getGround>
    29a2:	f8 01       	movw	r30, r16
    29a4:	e1 5a       	subi	r30, 0xA1	; 161
    29a6:	f3 4c       	sbci	r31, 0xC3	; 195
    29a8:	80 83       	st	Z, r24
	for (int x = 128 ; x < 144 ; x++) {				//Dupe background to other screen
		tileMap[x + 16] = tileMap[x];
		tileMap[x + 48] = tileMap[x + 32];
	}

	for (int x = 0 ; x < 32 ; x++) {
    29aa:	21 96       	adiw	r28, 0x01	; 1
    29ac:	c0 32       	cpi	r28, 0x20	; 32
    29ae:	d1 05       	cpc	r29, r1
    29b0:	9c f3       	brlt	.-26     	; 0x2998 <drawMoonscape+0x130>
		tileMap[(7 * 32) + x] = getGround();
	}
	
	xWindow = 0;
    29b2:	10 92 31 38 	sts	0x3831, r1	; 0x803831 <xWindow>
	
	clearObjects();
    29b6:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <clearObjects>

	drawText("CHECKPOINT (0)", tileMap + 192 + 18);
    29ba:	61 e3       	ldi	r22, 0x31	; 49
    29bc:	7d e3       	ldi	r23, 0x3D	; 61
    29be:	85 e7       	ldi	r24, 0x75	; 117
    29c0:	9e ea       	ldi	r25, 0xAE	; 174
    29c2:	0e 94 84 11 	call	0x2308	; 0x2308 <drawText>
	tileMap[192 + 30] = checkPoint + 65;
    29c6:	80 91 3d 3e 	lds	r24, 0x3E3D	; 0x803e3d <checkPoint>
    29ca:	8f 5b       	subi	r24, 0xBF	; 191
    29cc:	80 93 3d 3d 	sts	0x3D3D, r24	; 0x803d3d <tileMap+0xde>
	messageFlash = 0;
    29d0:	10 92 03 38 	sts	0x3803, r1	; 0x803803 <messageFlash>
    29d4:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <messageFlash+0x1>
	
}
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	08 95       	ret

000029e2 <gameFrame>:
	
}

void gameFrame() {							//This function is called at 60-ish Hz

	gamePad = getButtons();					//Get controls into local var
    29e2:	0e 94 b6 04 	call	0x96c	; 0x96c <getButtons>
    29e6:	80 93 60 3d 	sts	0x3D60, r24	; 0x803d60 <gamePad>

	if ((gamePad & dMenu) && gameState & canPauseMask) {		//MENU to pause/unpause?
    29ea:	85 ff       	sbrs	r24, 5
    29ec:	1a c0       	rjmp	.+52     	; 0x2a22 <gameFrame+0x40>
    29ee:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <gameState>
    29f2:	88 23       	and	r24, r24
    29f4:	b4 f4       	brge	.+44     	; 0x2a22 <gameFrame+0x40>
		if (buttonFire & dMenu) {			//Bit set saying we can press this button again?
    29f6:	90 91 1b 38 	lds	r25, 0x381B	; 0x80381b <buttonFire>
    29fa:	95 ff       	sbrs	r25, 5
    29fc:	17 c0       	rjmp	.+46     	; 0x2a2c <gameFrame+0x4a>
			buttonFire &= !dMenu;			//Clear bit
    29fe:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <buttonFire>
			if (gameState == statePaused) {	//Change state
    2a02:	8f 38       	cpi	r24, 0x8F	; 143
    2a04:	21 f4       	brne	.+8      	; 0x2a0e <gameFrame+0x2c>
				gameState = stateRunning;
    2a06:	80 e8       	ldi	r24, 0x80	; 128
    2a08:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <gameState>
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <gameFrame+0x4a>
			}
			else {
				gameState = statePaused;
    2a0e:	8f e8       	ldi	r24, 0x8F	; 143
    2a10:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <gameState>
				frameCounter = 0x20;			//Clean transition to blinking PAUSED (pedantic, I know)
    2a14:	80 e2       	ldi	r24, 0x20	; 32
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <frameCounter>
    2a1c:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <frameCounter+0x1>
    2a20:	05 c0       	rjmp	.+10     	; 0x2a2c <gameFrame+0x4a>
			}
		}
	}
	else {
		buttonFire |= dMenu;
    2a22:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <buttonFire>
    2a26:	80 62       	ori	r24, 0x20	; 32
    2a28:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <buttonFire>
	}

	switch(gameState) {
    2a2c:	80 91 4c 3c 	lds	r24, 0x3C4C	; 0x803c4c <gameState>
    2a30:	89 30       	cpi	r24, 0x09	; 9
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <gameFrame+0x54>
    2a34:	50 c0       	rjmp	.+160    	; 0x2ad6 <gameFrame+0xf4>
    2a36:	30 f4       	brcc	.+12     	; 0x2a44 <gameFrame+0x62>
    2a38:	88 23       	and	r24, r24
    2a3a:	59 f0       	breq	.+22     	; 0x2a52 <gameFrame+0x70>
    2a3c:	88 30       	cpi	r24, 0x08	; 8
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <gameFrame+0x60>
    2a40:	61 c0       	rjmp	.+194    	; 0x2b04 <gameFrame+0x122>
    2a42:	08 95       	ret
    2a44:	80 38       	cpi	r24, 0x80	; 128
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <gameFrame+0x68>
    2a48:	5a c0       	rjmp	.+180    	; 0x2afe <gameFrame+0x11c>
    2a4a:	8f 38       	cpi	r24, 0x8F	; 143
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <gameFrame+0x6e>
    2a4e:	53 c0       	rjmp	.+166    	; 0x2af6 <gameFrame+0x114>
    2a50:	08 95       	ret

		case stateTitle:
			if (!isDrawn) {							//First time here? Draw the title screen
    2a52:	80 91 3e 3e 	lds	r24, 0x3E3E	; 0x803e3e <isDrawn>
    2a56:	81 11       	cpse	r24, r1
    2a58:	02 c0       	rjmp	.+4      	; 0x2a5e <gameFrame+0x7c>
				drawTitle();
    2a5a:	0e 94 09 14 	call	0x2812	; 0x2812 <drawTitle>
			}			
			screenLoad();							//Dump the frame buffer to the OLED
    2a5e:	0e 94 31 06 	call	0xc62	; 0xc62 <screenLoad>
			drawTiles(tileData, tileMap);			//Draw background tiles
    2a62:	6f e5       	ldi	r22, 0x5F	; 95
    2a64:	7c e3       	ldi	r23, 0x3C	; 60
    2a66:	86 ed       	ldi	r24, 0xD6	; 214
    2a68:	93 e0       	ldi	r25, 0x03	; 3
    2a6a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <drawTiles>
			
			if (++frameCounter & 1) {
    2a6e:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    2a72:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <frameCounter+0x1>
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <frameCounter>
    2a7c:	90 93 2e 38 	sts	0x382E, r25	; 0x80382e <frameCounter+0x1>
    2a80:	80 ff       	sbrs	r24, 0
    2a82:	05 c0       	rjmp	.+10     	; 0x2a8e <gameFrame+0xac>
				xWindow++;						
    2a84:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <xWindow>
    2a88:	8f 5f       	subi	r24, 0xFF	; 255
    2a8a:	80 93 31 38 	sts	0x3831, r24	; 0x803831 <xWindow>
			}						
			setRowScroll(xWindow >> 1, 5);		//WE SCROLL THE MOON!
    2a8e:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <xWindow>
    2a92:	65 e0       	ldi	r22, 0x05	; 5
    2a94:	86 95       	lsr	r24
    2a96:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
			setRowScroll(xWindow >> 1, 6);		//BECAUSE IT IS CLOSE TO US!
    2a9a:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <xWindow>
    2a9e:	66 e0       	ldi	r22, 0x06	; 6
    2aa0:	86 95       	lsr	r24
    2aa2:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
			setRowScroll(xWindow, 7);			//WE SCROLL THE MOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOON!
    2aa6:	67 e0       	ldi	r22, 0x07	; 7
    2aa8:	80 91 31 38 	lds	r24, 0x3831	; 0x803831 <xWindow>
    2aac:	0e 94 33 05 	call	0xa66	; 0xa66 <setRowScroll>
			
			if (gamePad & dA) {
    2ab0:	80 91 60 3d 	lds	r24, 0x3D60	; 0x803d60 <gamePad>
    2ab4:	88 23       	and	r24, r24
    2ab6:	4c f4       	brge	.+18     	; 0x2aca <gameFrame+0xe8>
				if (buttonFire & dA) {			//Start game?
    2ab8:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <buttonFire>
    2abc:	88 23       	and	r24, r24
    2abe:	94 f5       	brge	.+100    	; 0x2b24 <gameFrame+0x142>
					buttonFire &= !dA;			//Clear bit
    2ac0:	10 92 1b 38 	sts	0x381B, r1	; 0x80381b <buttonFire>
					startNewGame();			
    2ac4:	0e 94 c2 10 	call	0x2184	; 0x2184 <startNewGame>
    2ac8:	08 95       	ret
				}
			}
			else {
				buttonFire |= dA;
    2aca:	80 91 1b 38 	lds	r24, 0x381B	; 0x80381b <buttonFire>
    2ace:	80 68       	ori	r24, 0x80	; 128
    2ad0:	80 93 1b 38 	sts	0x381B, r24	; 0x80381b <buttonFire>
    2ad4:	08 95       	ret
			}	
					
		break;
		
		case stateGetReady:
			gameStatus(1);						//Draw status display
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	0e 94 8e 11 	call	0x231c	; 0x231c <gameStatus>
			if (frameCounter == 120) {			//2 seconds of GET READY splash
    2adc:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    2ae0:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <frameCounter+0x1>
    2ae4:	88 37       	cpi	r24, 0x78	; 120
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	e9 f4       	brne	.+58     	; 0x2b24 <gameFrame+0x142>
				gameState = stateRunning;
    2aea:	80 e8       	ldi	r24, 0x80	; 128
    2aec:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <gameState>
				drawMoonscape();
    2af0:	0e 94 34 14 	call	0x2868	; 0x2868 <drawMoonscape>
    2af4:	08 95       	ret
			}
		break;
		
		case statePaused:
			gameStatus(0);
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	0e 94 8e 11 	call	0x231c	; 0x231c <gameStatus>
		break;
    2afc:	08 95       	ret
		
		case stateRunning:
			gameAction();
    2afe:	0e 94 4b 12 	call	0x2496	; 0x2496 <gameAction>
		break;
    2b02:	08 95       	ret
		
		case stateGameOver:
			gameStatus(2);						//Draw status display with GAME OVER
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	0e 94 8e 11 	call	0x231c	; 0x231c <gameStatus>
			if (frameCounter == 180) {			//2 seconds of GET READY splash
    2b0a:	80 91 2d 38 	lds	r24, 0x382D	; 0x80382d <frameCounter>
    2b0e:	90 91 2e 38 	lds	r25, 0x382E	; 0x80382e <frameCounter+0x1>
    2b12:	84 3b       	cpi	r24, 0xB4	; 180
    2b14:	91 05       	cpc	r25, r1
    2b16:	31 f4       	brne	.+12     	; 0x2b24 <gameFrame+0x142>
				cls();
    2b18:	0e 94 00 14 	call	0x2800	; 0x2800 <cls>
				gameState = stateTitle;
    2b1c:	10 92 4c 3c 	sts	0x3C4C, r1	; 0x803c4c <gameState>
				isDrawn = 0;
    2b20:	10 92 3e 3e 	sts	0x3E3E, r1	; 0x803e3e <isDrawn>
    2b24:	08 95       	ret

00002b26 <systemLoop>:
}

void systemLoop() {

    while (1) {
		if (sleepState) {
    2b26:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <sleepState>
    2b2a:	88 23       	and	r24, r24
    2b2c:	11 f0       	breq	.+4      	; 0x2b32 <systemLoop+0xc>
			sleep_cpu();
    2b2e:	88 95       	sleep
    2b30:	fa cf       	rjmp	.-12     	; 0x2b26 <systemLoop>
		}				
		else {
			if (frameFlag == 16) {		//Time to draw a frame? (60-ish Hz)
    2b32:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <frameFlag>
    2b36:	80 31       	cpi	r24, 0x10	; 16
    2b38:	b1 f7       	brne	.-20     	; 0x2b26 <systemLoop>
				frameFlag = 0;			//Reset ms counter
    2b3a:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <frameFlag>
				ledState(1);			//LED is "on" for the frame
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <ledState>
				gameFrame();			//New frame of game logic
    2b44:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <gameFrame>
				ledState(0);			//connect scope to this line to see frame time
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <ledState>
    2b4e:	eb cf       	rjmp	.-42     	; 0x2b26 <systemLoop>

00002b50 <__vector_13>:

	memset(tileMap, 32, 256);					//Erase tiles to the blank space character	
	
}

ISR(TCB0_INT_vect) {				//Timer trips? (This timer is disabled in Power-Down sleep mode)
    2b50:	1f 92       	push	r1
    2b52:	0f 92       	push	r0
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	0f 92       	push	r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	2f 93       	push	r18
    2b5c:	3f 93       	push	r19
    2b5e:	4f 93       	push	r20
    2b60:	5f 93       	push	r21
    2b62:	6f 93       	push	r22
    2b64:	7f 93       	push	r23
    2b66:	8f 93       	push	r24
    2b68:	9f 93       	push	r25
    2b6a:	af 93       	push	r26
    2b6c:	bf 93       	push	r27
    2b6e:	ef 93       	push	r30
    2b70:	ff 93       	push	r31

	frameFlag++;					//Once 16 ms has passed, run frame (60 FPS... ish)
    2b72:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <frameFlag>
    2b76:	8f 5f       	subi	r24, 0xFF	; 255
    2b78:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <frameFlag>
	toneLogic();					//Sound checks
    2b7c:	0e 94 be 04 	call	0x97c	; 0x97c <toneLogic>
	TCB0_INTFLAGS = 1;				//Clear flag
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	80 93 46 0a 	sts	0x0A46, r24	; 0x800a46 <jumpVelocity+0x7f5bbe>
	
}
    2b86:	ff 91       	pop	r31
    2b88:	ef 91       	pop	r30
    2b8a:	bf 91       	pop	r27
    2b8c:	af 91       	pop	r26
    2b8e:	9f 91       	pop	r25
    2b90:	8f 91       	pop	r24
    2b92:	7f 91       	pop	r23
    2b94:	6f 91       	pop	r22
    2b96:	5f 91       	pop	r21
    2b98:	4f 91       	pop	r20
    2b9a:	3f 91       	pop	r19
    2b9c:	2f 91       	pop	r18
    2b9e:	0f 90       	pop	r0
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	0f 90       	pop	r0
    2ba4:	1f 90       	pop	r1
    2ba6:	18 95       	reti

00002ba8 <__vector_3>:

ISR(PORTA_PORT_vect) {				//PORTA ISR tied to Menu button for sleep wake-up
    2ba8:	1f 92       	push	r1
    2baa:	0f 92       	push	r0
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	0f 92       	push	r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	2f 93       	push	r18
    2bb4:	3f 93       	push	r19
    2bb6:	4f 93       	push	r20
    2bb8:	5f 93       	push	r21
    2bba:	6f 93       	push	r22
    2bbc:	7f 93       	push	r23
    2bbe:	8f 93       	push	r24
    2bc0:	9f 93       	push	r25
    2bc2:	af 93       	push	r26
    2bc4:	bf 93       	push	r27
    2bc6:	ef 93       	push	r30
    2bc8:	ff 93       	push	r31

	if (sleepState) {				//Button change state with sleep mode enabled? WAKE UP! 
    2bca:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <sleepState>
    2bce:	88 23       	and	r24, r24
    2bd0:	41 f0       	breq	.+16     	; 0x2be2 <__vector_3+0x3a>
		sleepState = 0;
    2bd2:	10 92 36 38 	sts	0x3836, r1	; 0x803836 <sleepState>
		displayOnOff(1);			//Turn display back on
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	0e 94 dd 07 	call	0xfba	; 0xfba <displayOnOff>
		gameState = stateRunning;
    2bdc:	80 e8       	ldi	r24, 0x80	; 128
    2bde:	80 93 4c 3c 	sts	0x3C4C, r24	; 0x803c4c <gameState>
	}
	
	PORTA.INTFLAGS = 0x20;			//Clear interrupt flag
    2be2:	80 e2       	ldi	r24, 0x20	; 32
    2be4:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <jumpVelocity+0x7f5581>

}
    2be8:	ff 91       	pop	r31
    2bea:	ef 91       	pop	r30
    2bec:	bf 91       	pop	r27
    2bee:	af 91       	pop	r26
    2bf0:	9f 91       	pop	r25
    2bf2:	8f 91       	pop	r24
    2bf4:	7f 91       	pop	r23
    2bf6:	6f 91       	pop	r22
    2bf8:	5f 91       	pop	r21
    2bfa:	4f 91       	pop	r20
    2bfc:	3f 91       	pop	r19
    2bfe:	2f 91       	pop	r18
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <__vector_7>:

ISR(RTC_PIT_vect) {						//ISR called every second
    2c0a:	1f 92       	push	r1
    2c0c:	0f 92       	push	r0
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	0f 92       	push	r0
    2c12:	11 24       	eor	r1, r1
    2c14:	8f 93       	push	r24

	if (++seconds == 60) {				//time lord stuff
    2c16:	80 91 32 38 	lds	r24, 0x3832	; 0x803832 <seconds>
    2c1a:	8f 5f       	subi	r24, 0xFF	; 255
    2c1c:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <seconds>
    2c20:	8c 33       	cpi	r24, 0x3C	; 60
    2c22:	01 f5       	brne	.+64     	; 0x2c64 <__vector_7+0x5a>
		seconds = 0;
    2c24:	10 92 32 38 	sts	0x3832, r1	; 0x803832 <seconds>
		if (++minutes == 60) {
    2c28:	80 91 10 38 	lds	r24, 0x3810	; 0x803810 <minutes>
    2c2c:	8f 5f       	subi	r24, 0xFF	; 255
    2c2e:	80 93 10 38 	sts	0x3810, r24	; 0x803810 <minutes>
    2c32:	8c 33       	cpi	r24, 0x3C	; 60
    2c34:	b9 f4       	brne	.+46     	; 0x2c64 <__vector_7+0x5a>
			minutes = 0;
    2c36:	10 92 10 38 	sts	0x3810, r1	; 0x803810 <minutes>
			++hours;
    2c3a:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <hours>
    2c3e:	8f 5f       	subi	r24, 0xFF	; 255
    2c40:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <hours>
			if (hours == 12) {
    2c44:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <hours>
    2c48:	8c 30       	cpi	r24, 0x0C	; 12
    2c4a:	29 f4       	brne	.+10     	; 0x2c56 <__vector_7+0x4c>
				amPM++;					//amPM & 0x01 -> 0 = AM 1 = PM
    2c4c:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <amPM>
    2c50:	8f 5f       	subi	r24, 0xFF	; 255
    2c52:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <amPM>
			}
			if (hours == 13) {			//Time is so stupid. It's a bunch of rocks spinning around a star.
    2c56:	80 91 11 38 	lds	r24, 0x3811	; 0x803811 <hours>
    2c5a:	8d 30       	cpi	r24, 0x0D	; 13
    2c5c:	19 f4       	brne	.+6      	; 0x2c64 <__vector_7+0x5a>
				hours = 1;
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	80 93 11 38 	sts	0x3811, r24	; 0x803811 <hours>
			}
		}
	}

	if (!sleepState) {					//If awake, change flag to indicate the seconds changed (for the display)
    2c64:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <sleepState>
    2c68:	81 11       	cpse	r24, r1
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <__vector_7+0x68>
		secFlag = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <secFlag>
	}

	RTC.PITINTFLAGS = RTC_PI_bm;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <jumpVelocity+0x7f52cb>

    2c78:	8f 91       	pop	r24
    2c7a:	0f 90       	pop	r0
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	0f 90       	pop	r0
    2c80:	1f 90       	pop	r1
    2c82:	18 95       	reti

00002c84 <main>:

#define F_CPU 20000000UL
#include "drivers/gameBadge.h"
#include "game.h"

int main(void) {
    2c84:	cf 93       	push	r28
	
	CCP = 0xD8;
    2c86:	88 ed       	ldi	r24, 0xD8	; 216
    2c88:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = 0;							//Run CPU at full speed, disregarding speed considerings of the datasheet
    2c8a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <jumpVelocity+0x7f51d9>
	//CLKCTRL.MCLKCTRLB = 1;							//Enable prescaler for 10MHz / 2 (10MHz) required for 3.3v operation
	while(!(CLKCTRL.MCLKSTATUS & 0x10)) {}			//Sync
    2c8e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <jumpVelocity+0x7f51db>
    2c92:	84 ff       	sbrs	r24, 4
    2c94:	fc cf       	rjmp	.-8      	; 0x2c8e <main+0xa>

	//--Setup Real Time Counter (RTC) for clock use-----------------------------------------------

	CCP = 0xD8;
    2c96:	88 ed       	ldi	r24, 0xD8	; 216
    2c98:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSC32KCTRLA = CLKCTRL_ENABLE_bm;		//Enable the external crystal
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <jumpVelocity+0x7f51f4>
	while (RTC.STATUS > 0) {} /* Wait for all register to be synchronized */
    2ca0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <jumpVelocity+0x7f52b9>
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	fc cf       	rjmp	.-8      	; 0x2ca0 <main+0x1c>
	
	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    2ca8:	e0 e4       	ldi	r30, 0x40	; 64
    2caa:	f1 e0       	ldi	r31, 0x01	; 1
    2cac:	80 e8       	ldi	r24, 0x80	; 128
    2cae:	80 83       	st	Z, r24
	| 0 << RTC_RTCEN_bp     /* Enable: disabled */
	| 1 << RTC_RUNSTDBY_bp; /* Run In Standby: enabled */

	RTC.CLKSEL = RTC_CLKSEL_TOSC32K_gc; /* 32.768kHz External Crystal Oscillator (XOSC32K) */
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	87 83       	std	Z+7, r24	; 0x07
	while (RTC.PITSTATUS > 0) {} /* Wait for all register to be synchronized */
    2cb4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <jumpVelocity+0x7f52c9>
    2cb8:	81 11       	cpse	r24, r1
    2cba:	fc cf       	rjmp	.-8      	; 0x2cb4 <main+0x30>

	RTC.PITCTRLA = RTC_PERIOD_CYC32768_gc /* RTC Clock Cycles 32768 */
    2cbc:	e0 e4       	ldi	r30, 0x40	; 64
    2cbe:	f1 e0       	ldi	r31, 0x01	; 1
    2cc0:	81 e7       	ldi	r24, 0x71	; 113
    2cc2:	80 8b       	std	Z+16, r24	; 0x10
	| 1 << RTC_PITEN_bp;   /* Enable: enabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: enabled */
    2cc4:	c1 e0       	ldi	r28, 0x01	; 1
    2cc6:	c2 8b       	std	Z+18, r28	; 0x12
	
	//--Setup IO direction--------------------------------------------------------------------------
	
	PORTA_DIR = 0b00011010;							//Set pin directions
    2cc8:	8a e1       	ldi	r24, 0x1A	; 26
    2cca:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <jumpVelocity+0x7f5578>
	PORTB_DIR = 0b00110011;							//Speaker and LED out
    2cce:	83 e3       	ldi	r24, 0x33	; 51
    2cd0:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <jumpVelocity+0x7f5598>
	PORTC_DIR = 0b00000000;
    2cd4:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <jumpVelocity+0x7f55b8>

	PORTC_PIN0CTRL = 0x88;							//Set pullups for control buttons, with inverse output (easier logic)
    2cd8:	88 e8       	ldi	r24, 0x88	; 136
    2cda:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <jumpVelocity+0x7f55c8>
	PORTC_PIN1CTRL = 0x88;
    2cde:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <jumpVelocity+0x7f55c9>
	PORTC_PIN2CTRL = 0x88;
    2ce2:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <jumpVelocity+0x7f55ca>
	PORTC_PIN3CTRL = 0x88;
    2ce6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <jumpVelocity+0x7f55cb>
	PORTA_PIN5CTRL = 0x88 | 0x01;					//Menu button, can also wake from sleep (ISR on either edge)
    2cea:	99 e8       	ldi	r25, 0x89	; 137
    2cec:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <jumpVelocity+0x7f558d>
	PORTA_PIN6CTRL = 0x88;
    2cf0:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <jumpVelocity+0x7f558e>
	PORTA_PIN7CTRL = 0x88;
    2cf4:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <jumpVelocity+0x7f558f>

	//--Setup SPI bus and intialize OLED display----------------------------------------------------
	SPI0.CTRLA = SPI_MASTER_bm | SPI_ENABLE_bm | SPI_CLK2X_bm;	//Start SPI bus
    2cf8:	81 e3       	ldi	r24, 0x31	; 49
    2cfa:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <jumpVelocity+0x7f5998>

	displayInit(0);									//Setup display
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	0e 94 88 07 	call	0xf10	; 0xf10 <displayInit>
	
	SPI0_CTRLB = SPI_BUFEN_bm;						//Set high speed buffer SPI mode now that the OLED is set up
    2d06:	80 e8       	ldi	r24, 0x80	; 128
    2d08:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <jumpVelocity+0x7f5999>

	//--Setup FRAMERATE TIMER (eat this PS5!)------------------------------------------------------
	TCB0.INTCTRL = TCB_CAPT_bm;						//Setup Timer B as compare capture mode that will trigger an interrupt
    2d0c:	e0 e4       	ldi	r30, 0x40	; 64
    2d0e:	fa e0       	ldi	r31, 0x0A	; 10
    2d10:	c5 83       	std	Z+5, r28	; 0x05
	TCB0_CCMP = 10000;								//CLK   (20MHz, 3.3 less safe mode) -> DIV2 prescaler = 10000 ticks/ms
    2d12:	80 e1       	ldi	r24, 0x10	; 16
    2d14:	97 e2       	ldi	r25, 0x27	; 39
    2d16:	80 93 4c 0a 	sts	0x0A4C, r24	; 0x800a4c <jumpVelocity+0x7f5bc4>
    2d1a:	90 93 4d 0a 	sts	0x0A4D, r25	; 0x800a4d <jumpVelocity+0x7f5bc5>
	//TCB0_CCMP = 5000;								//CLK/2 (10MHz, 3.3 safe mode) -> DIV2 prescaler = 5000 ticks/ms
	TCB0_CTRLA = (1 << 1) | TCB_ENABLE_bm;
    2d1e:	83 e0       	ldi	r24, 0x03	; 3
    2d20:	80 83       	st	Z, r24

	//--Setup PIEZO SOUND (the new Dolby Atmos)---------------------------------------------------
	TCA0.SINGLE.CTRLB =
    2d22:	e0 e0       	ldi	r30, 0x00	; 0
    2d24:	fa e0       	ldi	r31, 0x0A	; 10
    2d26:	81 e4       	ldi	r24, 0x41	; 65
    2d28:	81 83       	std	Z+1, r24	; 0x01
	TCA_SINGLE_CMP2EN_bm |							// Enables Compare Channel 2 (output port WO2 (alt pin per PORTMUX below) = PB5)
	TCA_SINGLE_WGMODE_FRQ_gc;						// FRQ Waveform Generation
	
	TCA0.SINGLE.CMP0 = 0;
    2d2a:	10 a6       	std	Z+40, r1	; 0x28
    2d2c:	11 a6       	std	Z+41, r1	; 0x29
	//TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV8_gc;	//10MHz mode
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV16_gc;		//20MHz mode
    2d2e:	88 e0       	ldi	r24, 0x08	; 8
    2d30:	80 83       	st	Z, r24
	
	PORTMUX_CTRLC = 0x04;							//Write this bit to '1' to select the alternative output pin for TCA0 waveform output 2.
    2d32:	84 e0       	ldi	r24, 0x04	; 4
    2d34:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <jumpVelocity+0x7f537a>

	//--Setup ADC for random number generator-----------------------------------------------------
	
	ADC0.CTRLA = 0b00000001;						//Enable ADC0
    2d38:	e0 e0       	ldi	r30, 0x00	; 0
    2d3a:	f6 e0       	ldi	r31, 0x06	; 6
    2d3c:	c0 83       	st	Z, r28
	ADC0.CTRLC = 0b00010011;						//VDD reference, clk/16
    2d3e:	83 e1       	ldi	r24, 0x13	; 19
    2d40:	82 83       	std	Z+2, r24	; 0x02
	ADC0.MUXPOS = 0x02;								//ADC on AIN2 (PA2)
    2d42:	92 e0       	ldi	r25, 0x02	; 2
    2d44:	96 83       	std	Z+6, r25	; 0x06
	
	ADC1.CTRLA = 0b00000001;						//Enable ADC1
    2d46:	e0 e4       	ldi	r30, 0x40	; 64
    2d48:	f6 e0       	ldi	r31, 0x06	; 6
    2d4a:	c0 83       	st	Z, r28
	ADC1.CTRLC = 0b00010011;						//VDD reference, clk/16
    2d4c:	82 83       	std	Z+2, r24	; 0x02
	ADC1.MUXPOS = 0x06;								//ADC on AIN2 (PC0)
    2d4e:	86 e0       	ldi	r24, 0x06	; 6
    2d50:	86 83       	std	Z+6, r24	; 0x06
	
	//--Setup deep sleep mode---------------------------------------------------------------------

	SLPCTRL.CTRLA = (0x02 << 1) | 1;				//Set sleep mode (enabled, power-down mode, deepest sleep mode)
    2d52:	85 e0       	ldi	r24, 0x05	; 5
    2d54:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <jumpVelocity+0x7f51c8>

	//--Game Start and Main Loop------------------------------------------------------------------

	sei();							//Enable interrupts
    2d58:	78 94       	sei
	
	gameSetup();					//One-time user game setup code
    2d5a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <gameSetup>

	systemLoop();					//Jump to the main loop in the code
    2d5e:	0e 94 93 15 	call	0x2b26	; 0x2b26 <systemLoop>

}
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret

00002d6a <__udivmodsi4>:
    2d6a:	a1 e2       	ldi	r26, 0x21	; 33
    2d6c:	1a 2e       	mov	r1, r26
    2d6e:	aa 1b       	sub	r26, r26
    2d70:	bb 1b       	sub	r27, r27
    2d72:	fd 01       	movw	r30, r26
    2d74:	0d c0       	rjmp	.+26     	; 0x2d90 <__udivmodsi4_ep>

00002d76 <__udivmodsi4_loop>:
    2d76:	aa 1f       	adc	r26, r26
    2d78:	bb 1f       	adc	r27, r27
    2d7a:	ee 1f       	adc	r30, r30
    2d7c:	ff 1f       	adc	r31, r31
    2d7e:	a2 17       	cp	r26, r18
    2d80:	b3 07       	cpc	r27, r19
    2d82:	e4 07       	cpc	r30, r20
    2d84:	f5 07       	cpc	r31, r21
    2d86:	20 f0       	brcs	.+8      	; 0x2d90 <__udivmodsi4_ep>
    2d88:	a2 1b       	sub	r26, r18
    2d8a:	b3 0b       	sbc	r27, r19
    2d8c:	e4 0b       	sbc	r30, r20
    2d8e:	f5 0b       	sbc	r31, r21

00002d90 <__udivmodsi4_ep>:
    2d90:	66 1f       	adc	r22, r22
    2d92:	77 1f       	adc	r23, r23
    2d94:	88 1f       	adc	r24, r24
    2d96:	99 1f       	adc	r25, r25
    2d98:	1a 94       	dec	r1
    2d9a:	69 f7       	brne	.-38     	; 0x2d76 <__udivmodsi4_loop>
    2d9c:	60 95       	com	r22
    2d9e:	70 95       	com	r23
    2da0:	80 95       	com	r24
    2da2:	90 95       	com	r25
    2da4:	9b 01       	movw	r18, r22
    2da6:	ac 01       	movw	r20, r24
    2da8:	bd 01       	movw	r22, r26
    2daa:	cf 01       	movw	r24, r30
    2dac:	08 95       	ret

00002dae <memset>:
    2dae:	dc 01       	movw	r26, r24
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <memset+0x6>
    2db2:	6d 93       	st	X+, r22
    2db4:	41 50       	subi	r20, 0x01	; 1
    2db6:	50 40       	sbci	r21, 0x00	; 0
    2db8:	e0 f7       	brcc	.-8      	; 0x2db2 <memset+0x4>
    2dba:	08 95       	ret

00002dbc <_exit>:
    2dbc:	f8 94       	cli

00002dbe <__stop_program>:
    2dbe:	ff cf       	rjmp	.-2      	; 0x2dbe <__stop_program>
